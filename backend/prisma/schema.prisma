generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use String with constraints

// Note: SQLite doesn't support enums, so we use String with constraints

model Sucursal {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  location    String?
  serverUrl   String   @unique
  remoteUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  departments Department[]
  libraries   Library[]
  goals       Goal[]
  reports     Report[]
  generalReports GeneralReport[]
  folders     Folder[]
  files       File[]
  libraryFolders LibraryFolder[]
  libraryFiles LibraryFile[]
  notifications Notification[]
  errorLogs   ErrorLog[]
  scans       Scan[]
  sourceConnections SucursalConnection[] @relation("SourceConnections")
  targetConnections SucursalConnection[] @relation("TargetConnections")
  temperatures Temperature[]
  lists       List[]

  @@map("sucursals")
}

model SucursalConnection {
  id                String   @id @default(cuid())
  sourceSucursalId  String
  targetSucursalId  String
  createdAt         DateTime @default(now())

  sourceSucursal    Sucursal @relation("SourceConnections", fields: [sourceSucursalId], references: [id], onDelete: Cascade)
  targetSucursal    Sucursal @relation("TargetConnections", fields: [targetSucursalId], references: [id], onDelete: Cascade)

  @@unique([sourceSucursalId, targetSucursalId])
  @@map("sucursal_connections")
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  sucursalId  String
  supervisorId String?
  canSeeTemperatureMenu Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  supervisor  User?    @relation("DepartmentSupervisor", fields: [supervisorId], references: [id])
  users       User[]
  supervisors User[]   @relation("DepartmentSupervisors")
  goals       Goal[]

  @@unique([name, sucursalId])
  @@map("departments")
}

model User {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  password        String
  role            String     @default("USER")
  status          String     @default("PENDING")
  profilePicture  String?
  sucursalId      String
  departmentId    String?
  supervisorId    String?
  phone           String?
  address         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  lastLogin       DateTime?

  sucursal        Sucursal   @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  department      Department? @relation(fields: [departmentId], references: [id])
  supervisor      User?      @relation("UserSupervisors", fields: [supervisorId], references: [id])
  subordinates    User[]     @relation("UserSupervisors")
  supervisedDepartments Department[] @relation("DepartmentSupervisor")
  departmentSupervisors Department[] @relation("DepartmentSupervisors")

  folders         Folder[]
  files           File[]
  libraries       Library[]
  libraryMembers  LibraryMember[]
  libraryFolders  LibraryFolder[]
  libraryFiles    LibraryFile[]

  goals           GoalAssignment[]
  notifications   Notification[]
  scans           Scan[]
  createdGoals    Goal[]     @relation("GoalCreator")
  submittedReports GeneralReport[] @relation("SubmittedReports")
  receivedReports GeneralReport[] @relation("ReceivedReports")
  respondedReports GeneralReport[] @relation("RespondedReports")
  goalReports     GoalReport[] @relation("GoalReportSubmitter")
  reports         Report[]
  sharedGoals     GoalShare[] @relation("GoalSharedBy")
  receivedSharedGoals GoalShare[] @relation("GoalSharedWith")
  sharedLibraryFiles LibraryFile[] @relation("LibraryFileSharedBy")
  receivedSharedLibraryFiles LibraryFileShare[] @relation("LibraryFileSharedWith")
  sharedLibraryFileShares LibraryFileShare[] @relation("LibraryFileSharedBy")
  temperatures Temperature[]
  lists       List[]
  listMembers ListMember[]
  listItems   ListItem[]

  @@map("users")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  userId      String
  sucursalId  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  files       File[]

  @@map("folders")
}

model File {
  id          String   @id @default(cuid())
  name        String
  originalName String?
  description String?
  url         String
  size        Int
  type        String
  mimeType    String?
  isPublic    Boolean  @default(false)
  folderId    String?
  userId      String
  sucursalId  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  folder      Folder?  @relation(fields: [folderId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  reports     ReportFile[]
  generalReports GeneralReportFile[]
  goalReports GoalReportFile[]

  @@map("files")
}

model Library {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  sucursalId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  members     LibraryMember[]
  libraryFolders LibraryFolder[]
  libraryFiles LibraryFile[]

  @@map("libraries")
}

model LibraryMember {
  id         String   @id @default(cuid())
  libraryId  String
  userId     String
  createdAt  DateTime @default(now())

  library    Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([libraryId, userId])
  @@map("library_members")
}

model LibraryFolder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  userId      String
  sucursalId  String
  libraryId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  library     Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  parent      LibraryFolder? @relation("LibraryFolderHierarchy", fields: [parentId], references: [id])
  children    LibraryFolder[] @relation("LibraryFolderHierarchy")
  files       LibraryFile[]

  @@map("library_folders")
}

model LibraryFile {
  id          String   @id @default(cuid())
  name        String
  originalName String?
  description String?
  url         String
  size        Int
  type        String
  mimeType    String?
  folderId    String?
  userId      String
  sucursalId  String
  libraryId   String
  sharedById  String? // Who shared this file
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  folder      LibraryFolder? @relation(fields: [folderId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  library     Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  sharedBy    User?   @relation("LibraryFileSharedBy", fields: [sharedById], references: [id])
  shares      LibraryFileShare[] // All shares of this file

  @@map("library_files")
}

model LibraryFileShare {
  id          String   @id @default(cuid())
  fileId      String
  sharedById  String
  sharedWithId String
  sharedAt    DateTime @default(now())
  message     String?
  isRemoteShare Boolean @default(false)
  remoteServerUrl String?

  file        LibraryFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy    User        @relation("LibraryFileSharedBy", fields: [sharedById], references: [id])
  sharedWith  User        @relation("LibraryFileSharedWith", fields: [sharedWithId], references: [id])

  @@unique([fileId, sharedWithId])
  @@map("library_file_shares")
}



model Goal {
  id          String     @id @default(cuid())
  name        String
  description String?
  startDate   DateTime @default(now())
  endDate     DateTime @default(now())
  status      String     @default("DRAFT")
  priority    String     @default("MEDIUM")
  progress    Int        @default(0)
  departmentId String
  createdById String
  sucursalId  String
  isPublished Boolean    @default(false)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  department  Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdBy   User       @relation("GoalCreator", fields: [createdById], references: [id])
  sucursal    Sucursal   @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  assignments GoalAssignment[]
  reports     GoalReport[]
  generalReports Report[]
  shares      GoalShare[]

  @@map("goals")
}

model GoalReport {
  id            String    @id @default(cuid())
  title         String
  description   String
  goalId        String
  submittedById String
  isCompletion  Boolean   @default(false)
  status        String    @default("PENDING")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  goal          Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
  submittedBy   User      @relation("GoalReportSubmitter", fields: [submittedById], references: [id], onDelete: Cascade)
  files         GoalReportFile[]

  @@map("goal_reports")
}

model GoalReportFile {
  id            String      @id @default(cuid())
  goalReportId  String
  fileId        String

  goalReport    GoalReport  @relation(fields: [goalReportId], references: [id], onDelete: Cascade)
  file          File        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([goalReportId, fileId])
  @@map("goal_report_files")
}

model GoalAssignment {
  id       String   @id @default(cuid())
  goalId   String
  userId   String
  assignedAt DateTime @default(now())

  goal     Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([goalId, userId])
  @@map("goal_assignments")
}

model GoalShare {
  id          String   @id @default(cuid())
  goalId      String
  sharedById  String
  sharedWithId String
  sharedAt    DateTime @default(now())
  message     String?

  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  sharedBy    User     @relation("GoalSharedBy", fields: [sharedById], references: [id])
  sharedWith  User     @relation("GoalSharedWith", fields: [sharedWithId], references: [id])

  @@unique([goalId, sharedWithId])
  @@map("goal_shares")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  goalId      String?
  userId      String
  sucursalId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  goal        Goal?    @relation(fields: [goalId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  files       ReportFile[]

  @@map("reports")
}

model GeneralReport {
  id            String    @id @default(cuid())
  title         String
  description   String
  type          String
  status        String    @default("PENDING") // PENDING, RESPONDED, ARCHIVED
  submittedById String
  submittedToId String?
  respondedById String?
  response      String?
  submittedAt   DateTime  @default(now())
  respondedAt   DateTime?
  sucursalId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  submittedBy   User      @relation("SubmittedReports", fields: [submittedById], references: [id], onDelete: Cascade)
  submittedTo   User?     @relation("ReceivedReports", fields: [submittedToId], references: [id])
  respondedBy   User?     @relation("RespondedReports", fields: [respondedById], references: [id])
  sucursal      Sucursal  @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  attachments   GeneralReportFile[]

  @@map("general_reports")
}

model GeneralReportFile {
  id              String        @id @default(cuid())
  generalReportId String
  fileId          String

  generalReport   GeneralReport @relation(fields: [generalReportId], references: [id], onDelete: Cascade)
  file            File          @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([generalReportId, fileId])
  @@map("general_report_files")
}

model ReportFile {
  id       String @id @default(cuid())
  reportId String
  fileId   String

  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([reportId, fileId])
  @@map("report_files")
}

model Scan {
  id       String   @id @default(cuid())
  title    String
  userId   String
  sucursalId String
  images   String
  pdfUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)

  @@map("scans")
}

model Notification {
  id          String           @id @default(cuid())
  type        String
  title       String
  description String
  isRead      Boolean          @default(false)
  userId      String
  sucursalId  String
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal         @relation(fields: [sucursalId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ErrorLog {
  id            String    @id @default(cuid())
  sucursalId    String
  errorType     String
  description   String
  errorDetails  String?
  sentToRemote  Boolean   @default(false)
  createdAt     DateTime  @default(now())

  sucursal      Sucursal  @relation(fields: [sucursalId], references: [id], onDelete: Cascade)

  @@map("error_logs")
}

model Temperature {
  id          String   @id @default(cuid())
  temperature Float    // Temperature in Celsius
  recordedAt  DateTime @default(now())
  userId      String
  sucursalId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sucursal    Sucursal @relation(fields: [sucursalId], references: [id], onDelete: Cascade)

  @@map("temperatures")
}

model List {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdById String
  sucursalId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  sucursal    Sucursal    @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  members     ListMember[]
  items       ListItem[]

  @@map("lists")
}

model ListMember {
  id        String   @id @default(cuid())
  listId    String
  userId    String
  role      String   @default("MEMBER") // MEMBER, ADMIN
  joinedAt  DateTime @default(now())

  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listId, userId])
  @@map("list_members")
}

model ListItem {
  id          String    @id @default(cuid())
  listId      String
  name        String
  description String?
  value       Float?    // Value in MZN
  startDate   DateTime?
  endDate     DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("list_items")
} 