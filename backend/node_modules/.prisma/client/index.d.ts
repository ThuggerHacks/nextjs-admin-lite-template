
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Sucursal
 * 
 */
export type Sucursal = $Result.DefaultSelection<Prisma.$SucursalPayload>
/**
 * Model SucursalConnection
 * 
 */
export type SucursalConnection = $Result.DefaultSelection<Prisma.$SucursalConnectionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Folder
 * 
 */
export type Folder = $Result.DefaultSelection<Prisma.$FolderPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Library
 * 
 */
export type Library = $Result.DefaultSelection<Prisma.$LibraryPayload>
/**
 * Model LibraryMember
 * 
 */
export type LibraryMember = $Result.DefaultSelection<Prisma.$LibraryMemberPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model GoalReport
 * 
 */
export type GoalReport = $Result.DefaultSelection<Prisma.$GoalReportPayload>
/**
 * Model GoalReportFile
 * 
 */
export type GoalReportFile = $Result.DefaultSelection<Prisma.$GoalReportFilePayload>
/**
 * Model GoalAssignment
 * 
 */
export type GoalAssignment = $Result.DefaultSelection<Prisma.$GoalAssignmentPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model GeneralReport
 * 
 */
export type GeneralReport = $Result.DefaultSelection<Prisma.$GeneralReportPayload>
/**
 * Model GeneralReportFile
 * 
 */
export type GeneralReportFile = $Result.DefaultSelection<Prisma.$GeneralReportFilePayload>
/**
 * Model ReportFile
 * 
 */
export type ReportFile = $Result.DefaultSelection<Prisma.$ReportFilePayload>
/**
 * Model Scan
 * 
 */
export type Scan = $Result.DefaultSelection<Prisma.$ScanPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ErrorLog
 * 
 */
export type ErrorLog = $Result.DefaultSelection<Prisma.$ErrorLogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sucursals
 * const sucursals = await prisma.sucursal.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sucursals
   * const sucursals = await prisma.sucursal.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.sucursal`: Exposes CRUD operations for the **Sucursal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sucursals
    * const sucursals = await prisma.sucursal.findMany()
    * ```
    */
  get sucursal(): Prisma.SucursalDelegate<ExtArgs>;

  /**
   * `prisma.sucursalConnection`: Exposes CRUD operations for the **SucursalConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SucursalConnections
    * const sucursalConnections = await prisma.sucursalConnection.findMany()
    * ```
    */
  get sucursalConnection(): Prisma.SucursalConnectionDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.folder`: Exposes CRUD operations for the **Folder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Folders
    * const folders = await prisma.folder.findMany()
    * ```
    */
  get folder(): Prisma.FolderDelegate<ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs>;

  /**
   * `prisma.library`: Exposes CRUD operations for the **Library** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Libraries
    * const libraries = await prisma.library.findMany()
    * ```
    */
  get library(): Prisma.LibraryDelegate<ExtArgs>;

  /**
   * `prisma.libraryMember`: Exposes CRUD operations for the **LibraryMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryMembers
    * const libraryMembers = await prisma.libraryMember.findMany()
    * ```
    */
  get libraryMember(): Prisma.LibraryMemberDelegate<ExtArgs>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs>;

  /**
   * `prisma.goalReport`: Exposes CRUD operations for the **GoalReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalReports
    * const goalReports = await prisma.goalReport.findMany()
    * ```
    */
  get goalReport(): Prisma.GoalReportDelegate<ExtArgs>;

  /**
   * `prisma.goalReportFile`: Exposes CRUD operations for the **GoalReportFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalReportFiles
    * const goalReportFiles = await prisma.goalReportFile.findMany()
    * ```
    */
  get goalReportFile(): Prisma.GoalReportFileDelegate<ExtArgs>;

  /**
   * `prisma.goalAssignment`: Exposes CRUD operations for the **GoalAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalAssignments
    * const goalAssignments = await prisma.goalAssignment.findMany()
    * ```
    */
  get goalAssignment(): Prisma.GoalAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.generalReport`: Exposes CRUD operations for the **GeneralReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralReports
    * const generalReports = await prisma.generalReport.findMany()
    * ```
    */
  get generalReport(): Prisma.GeneralReportDelegate<ExtArgs>;

  /**
   * `prisma.generalReportFile`: Exposes CRUD operations for the **GeneralReportFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralReportFiles
    * const generalReportFiles = await prisma.generalReportFile.findMany()
    * ```
    */
  get generalReportFile(): Prisma.GeneralReportFileDelegate<ExtArgs>;

  /**
   * `prisma.reportFile`: Exposes CRUD operations for the **ReportFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportFiles
    * const reportFiles = await prisma.reportFile.findMany()
    * ```
    */
  get reportFile(): Prisma.ReportFileDelegate<ExtArgs>;

  /**
   * `prisma.scan`: Exposes CRUD operations for the **Scan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scans
    * const scans = await prisma.scan.findMany()
    * ```
    */
  get scan(): Prisma.ScanDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.errorLog`: Exposes CRUD operations for the **ErrorLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ErrorLogs
    * const errorLogs = await prisma.errorLog.findMany()
    * ```
    */
  get errorLog(): Prisma.ErrorLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Sucursal: 'Sucursal',
    SucursalConnection: 'SucursalConnection',
    Department: 'Department',
    User: 'User',
    Folder: 'Folder',
    File: 'File',
    Library: 'Library',
    LibraryMember: 'LibraryMember',
    Goal: 'Goal',
    GoalReport: 'GoalReport',
    GoalReportFile: 'GoalReportFile',
    GoalAssignment: 'GoalAssignment',
    Report: 'Report',
    GeneralReport: 'GeneralReport',
    GeneralReportFile: 'GeneralReportFile',
    ReportFile: 'ReportFile',
    Scan: 'Scan',
    Notification: 'Notification',
    ErrorLog: 'ErrorLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "sucursal" | "sucursalConnection" | "department" | "user" | "folder" | "file" | "library" | "libraryMember" | "goal" | "goalReport" | "goalReportFile" | "goalAssignment" | "report" | "generalReport" | "generalReportFile" | "reportFile" | "scan" | "notification" | "errorLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Sucursal: {
        payload: Prisma.$SucursalPayload<ExtArgs>
        fields: Prisma.SucursalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SucursalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SucursalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          findFirst: {
            args: Prisma.SucursalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SucursalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          findMany: {
            args: Prisma.SucursalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>[]
          }
          create: {
            args: Prisma.SucursalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          createMany: {
            args: Prisma.SucursalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SucursalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>[]
          }
          delete: {
            args: Prisma.SucursalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          update: {
            args: Prisma.SucursalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          deleteMany: {
            args: Prisma.SucursalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SucursalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SucursalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalPayload>
          }
          aggregate: {
            args: Prisma.SucursalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSucursal>
          }
          groupBy: {
            args: Prisma.SucursalGroupByArgs<ExtArgs>
            result: $Utils.Optional<SucursalGroupByOutputType>[]
          }
          count: {
            args: Prisma.SucursalCountArgs<ExtArgs>
            result: $Utils.Optional<SucursalCountAggregateOutputType> | number
          }
        }
      }
      SucursalConnection: {
        payload: Prisma.$SucursalConnectionPayload<ExtArgs>
        fields: Prisma.SucursalConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SucursalConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SucursalConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          findFirst: {
            args: Prisma.SucursalConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SucursalConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          findMany: {
            args: Prisma.SucursalConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>[]
          }
          create: {
            args: Prisma.SucursalConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          createMany: {
            args: Prisma.SucursalConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SucursalConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>[]
          }
          delete: {
            args: Prisma.SucursalConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          update: {
            args: Prisma.SucursalConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          deleteMany: {
            args: Prisma.SucursalConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SucursalConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SucursalConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SucursalConnectionPayload>
          }
          aggregate: {
            args: Prisma.SucursalConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSucursalConnection>
          }
          groupBy: {
            args: Prisma.SucursalConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SucursalConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SucursalConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<SucursalConnectionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Folder: {
        payload: Prisma.$FolderPayload<ExtArgs>
        fields: Prisma.FolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findFirst: {
            args: Prisma.FolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findMany: {
            args: Prisma.FolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          create: {
            args: Prisma.FolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          createMany: {
            args: Prisma.FolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          delete: {
            args: Prisma.FolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          update: {
            args: Prisma.FolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          deleteMany: {
            args: Prisma.FolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          aggregate: {
            args: Prisma.FolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFolder>
          }
          groupBy: {
            args: Prisma.FolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FolderCountArgs<ExtArgs>
            result: $Utils.Optional<FolderCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Library: {
        payload: Prisma.$LibraryPayload<ExtArgs>
        fields: Prisma.LibraryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LibraryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LibraryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          findFirst: {
            args: Prisma.LibraryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LibraryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          findMany: {
            args: Prisma.LibraryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>[]
          }
          create: {
            args: Prisma.LibraryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          createMany: {
            args: Prisma.LibraryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LibraryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>[]
          }
          delete: {
            args: Prisma.LibraryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          update: {
            args: Prisma.LibraryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          deleteMany: {
            args: Prisma.LibraryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LibraryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LibraryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryPayload>
          }
          aggregate: {
            args: Prisma.LibraryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLibrary>
          }
          groupBy: {
            args: Prisma.LibraryGroupByArgs<ExtArgs>
            result: $Utils.Optional<LibraryGroupByOutputType>[]
          }
          count: {
            args: Prisma.LibraryCountArgs<ExtArgs>
            result: $Utils.Optional<LibraryCountAggregateOutputType> | number
          }
        }
      }
      LibraryMember: {
        payload: Prisma.$LibraryMemberPayload<ExtArgs>
        fields: Prisma.LibraryMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LibraryMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LibraryMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          findFirst: {
            args: Prisma.LibraryMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LibraryMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          findMany: {
            args: Prisma.LibraryMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>[]
          }
          create: {
            args: Prisma.LibraryMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          createMany: {
            args: Prisma.LibraryMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LibraryMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>[]
          }
          delete: {
            args: Prisma.LibraryMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          update: {
            args: Prisma.LibraryMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          deleteMany: {
            args: Prisma.LibraryMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LibraryMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LibraryMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibraryMemberPayload>
          }
          aggregate: {
            args: Prisma.LibraryMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLibraryMember>
          }
          groupBy: {
            args: Prisma.LibraryMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<LibraryMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.LibraryMemberCountArgs<ExtArgs>
            result: $Utils.Optional<LibraryMemberCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      GoalReport: {
        payload: Prisma.$GoalReportPayload<ExtArgs>
        fields: Prisma.GoalReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          findFirst: {
            args: Prisma.GoalReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          findMany: {
            args: Prisma.GoalReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>[]
          }
          create: {
            args: Prisma.GoalReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          createMany: {
            args: Prisma.GoalReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>[]
          }
          delete: {
            args: Prisma.GoalReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          update: {
            args: Prisma.GoalReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          deleteMany: {
            args: Prisma.GoalReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportPayload>
          }
          aggregate: {
            args: Prisma.GoalReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalReport>
          }
          groupBy: {
            args: Prisma.GoalReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalReportCountArgs<ExtArgs>
            result: $Utils.Optional<GoalReportCountAggregateOutputType> | number
          }
        }
      }
      GoalReportFile: {
        payload: Prisma.$GoalReportFilePayload<ExtArgs>
        fields: Prisma.GoalReportFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalReportFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalReportFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          findFirst: {
            args: Prisma.GoalReportFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalReportFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          findMany: {
            args: Prisma.GoalReportFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>[]
          }
          create: {
            args: Prisma.GoalReportFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          createMany: {
            args: Prisma.GoalReportFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalReportFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>[]
          }
          delete: {
            args: Prisma.GoalReportFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          update: {
            args: Prisma.GoalReportFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          deleteMany: {
            args: Prisma.GoalReportFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalReportFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalReportFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalReportFilePayload>
          }
          aggregate: {
            args: Prisma.GoalReportFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalReportFile>
          }
          groupBy: {
            args: Prisma.GoalReportFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalReportFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalReportFileCountArgs<ExtArgs>
            result: $Utils.Optional<GoalReportFileCountAggregateOutputType> | number
          }
        }
      }
      GoalAssignment: {
        payload: Prisma.$GoalAssignmentPayload<ExtArgs>
        fields: Prisma.GoalAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          findFirst: {
            args: Prisma.GoalAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          findMany: {
            args: Prisma.GoalAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>[]
          }
          create: {
            args: Prisma.GoalAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          createMany: {
            args: Prisma.GoalAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>[]
          }
          delete: {
            args: Prisma.GoalAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          update: {
            args: Prisma.GoalAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.GoalAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalAssignmentPayload>
          }
          aggregate: {
            args: Prisma.GoalAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalAssignment>
          }
          groupBy: {
            args: Prisma.GoalAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<GoalAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      GeneralReport: {
        payload: Prisma.$GeneralReportPayload<ExtArgs>
        fields: Prisma.GeneralReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          findFirst: {
            args: Prisma.GeneralReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          findMany: {
            args: Prisma.GeneralReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>[]
          }
          create: {
            args: Prisma.GeneralReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          createMany: {
            args: Prisma.GeneralReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneralReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>[]
          }
          delete: {
            args: Prisma.GeneralReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          update: {
            args: Prisma.GeneralReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          deleteMany: {
            args: Prisma.GeneralReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GeneralReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportPayload>
          }
          aggregate: {
            args: Prisma.GeneralReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralReport>
          }
          groupBy: {
            args: Prisma.GeneralReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralReportCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralReportCountAggregateOutputType> | number
          }
        }
      }
      GeneralReportFile: {
        payload: Prisma.$GeneralReportFilePayload<ExtArgs>
        fields: Prisma.GeneralReportFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralReportFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralReportFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          findFirst: {
            args: Prisma.GeneralReportFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralReportFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          findMany: {
            args: Prisma.GeneralReportFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>[]
          }
          create: {
            args: Prisma.GeneralReportFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          createMany: {
            args: Prisma.GeneralReportFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneralReportFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>[]
          }
          delete: {
            args: Prisma.GeneralReportFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          update: {
            args: Prisma.GeneralReportFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          deleteMany: {
            args: Prisma.GeneralReportFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralReportFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GeneralReportFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralReportFilePayload>
          }
          aggregate: {
            args: Prisma.GeneralReportFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralReportFile>
          }
          groupBy: {
            args: Prisma.GeneralReportFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralReportFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralReportFileCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralReportFileCountAggregateOutputType> | number
          }
        }
      }
      ReportFile: {
        payload: Prisma.$ReportFilePayload<ExtArgs>
        fields: Prisma.ReportFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          findFirst: {
            args: Prisma.ReportFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          findMany: {
            args: Prisma.ReportFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>[]
          }
          create: {
            args: Prisma.ReportFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          createMany: {
            args: Prisma.ReportFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>[]
          }
          delete: {
            args: Prisma.ReportFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          update: {
            args: Prisma.ReportFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          deleteMany: {
            args: Prisma.ReportFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          aggregate: {
            args: Prisma.ReportFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportFile>
          }
          groupBy: {
            args: Prisma.ReportFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportFileCountArgs<ExtArgs>
            result: $Utils.Optional<ReportFileCountAggregateOutputType> | number
          }
        }
      }
      Scan: {
        payload: Prisma.$ScanPayload<ExtArgs>
        fields: Prisma.ScanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          findFirst: {
            args: Prisma.ScanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          findMany: {
            args: Prisma.ScanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>[]
          }
          create: {
            args: Prisma.ScanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          createMany: {
            args: Prisma.ScanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>[]
          }
          delete: {
            args: Prisma.ScanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          update: {
            args: Prisma.ScanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          deleteMany: {
            args: Prisma.ScanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanPayload>
          }
          aggregate: {
            args: Prisma.ScanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScan>
          }
          groupBy: {
            args: Prisma.ScanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScanCountArgs<ExtArgs>
            result: $Utils.Optional<ScanCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ErrorLog: {
        payload: Prisma.$ErrorLogPayload<ExtArgs>
        fields: Prisma.ErrorLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ErrorLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ErrorLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          findFirst: {
            args: Prisma.ErrorLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ErrorLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          findMany: {
            args: Prisma.ErrorLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>[]
          }
          create: {
            args: Prisma.ErrorLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          createMany: {
            args: Prisma.ErrorLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ErrorLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>[]
          }
          delete: {
            args: Prisma.ErrorLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          update: {
            args: Prisma.ErrorLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          deleteMany: {
            args: Prisma.ErrorLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ErrorLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ErrorLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ErrorLogPayload>
          }
          aggregate: {
            args: Prisma.ErrorLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateErrorLog>
          }
          groupBy: {
            args: Prisma.ErrorLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ErrorLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ErrorLogCountArgs<ExtArgs>
            result: $Utils.Optional<ErrorLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SucursalCountOutputType
   */

  export type SucursalCountOutputType = {
    users: number
    departments: number
    libraries: number
    goals: number
    reports: number
    generalReports: number
    folders: number
    files: number
    notifications: number
    errorLogs: number
    scans: number
    sourceConnections: number
    targetConnections: number
  }

  export type SucursalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SucursalCountOutputTypeCountUsersArgs
    departments?: boolean | SucursalCountOutputTypeCountDepartmentsArgs
    libraries?: boolean | SucursalCountOutputTypeCountLibrariesArgs
    goals?: boolean | SucursalCountOutputTypeCountGoalsArgs
    reports?: boolean | SucursalCountOutputTypeCountReportsArgs
    generalReports?: boolean | SucursalCountOutputTypeCountGeneralReportsArgs
    folders?: boolean | SucursalCountOutputTypeCountFoldersArgs
    files?: boolean | SucursalCountOutputTypeCountFilesArgs
    notifications?: boolean | SucursalCountOutputTypeCountNotificationsArgs
    errorLogs?: boolean | SucursalCountOutputTypeCountErrorLogsArgs
    scans?: boolean | SucursalCountOutputTypeCountScansArgs
    sourceConnections?: boolean | SucursalCountOutputTypeCountSourceConnectionsArgs
    targetConnections?: boolean | SucursalCountOutputTypeCountTargetConnectionsArgs
  }

  // Custom InputTypes
  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalCountOutputType
     */
    select?: SucursalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountLibrariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountGeneralReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountErrorLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ErrorLogWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountScansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScanWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountSourceConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SucursalConnectionWhereInput
  }

  /**
   * SucursalCountOutputType without action
   */
  export type SucursalCountOutputTypeCountTargetConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SucursalConnectionWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
    supervisors: number
    goals: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
    supervisors?: boolean | DepartmentCountOutputTypeCountSupervisorsArgs
    goals?: boolean | DepartmentCountOutputTypeCountGoalsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountSupervisorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    subordinates: number
    supervisedDepartments: number
    departmentSupervisors: number
    folders: number
    files: number
    libraries: number
    libraryMembers: number
    goals: number
    notifications: number
    scans: number
    createdGoals: number
    submittedReports: number
    receivedReports: number
    respondedReports: number
    goalReports: number
    reports: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subordinates?: boolean | UserCountOutputTypeCountSubordinatesArgs
    supervisedDepartments?: boolean | UserCountOutputTypeCountSupervisedDepartmentsArgs
    departmentSupervisors?: boolean | UserCountOutputTypeCountDepartmentSupervisorsArgs
    folders?: boolean | UserCountOutputTypeCountFoldersArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
    libraries?: boolean | UserCountOutputTypeCountLibrariesArgs
    libraryMembers?: boolean | UserCountOutputTypeCountLibraryMembersArgs
    goals?: boolean | UserCountOutputTypeCountGoalsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    scans?: boolean | UserCountOutputTypeCountScansArgs
    createdGoals?: boolean | UserCountOutputTypeCountCreatedGoalsArgs
    submittedReports?: boolean | UserCountOutputTypeCountSubmittedReportsArgs
    receivedReports?: boolean | UserCountOutputTypeCountReceivedReportsArgs
    respondedReports?: boolean | UserCountOutputTypeCountRespondedReportsArgs
    goalReports?: boolean | UserCountOutputTypeCountGoalReportsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSupervisedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentSupervisorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLibrariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLibraryMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmittedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRespondedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type FolderCountOutputType
   */

  export type FolderCountOutputType = {
    children: number
    files: number
  }

  export type FolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | FolderCountOutputTypeCountChildrenArgs
    files?: boolean | FolderCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FolderCountOutputType
     */
    select?: FolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    reports: number
    generalReports: number
    goalReports: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | FileCountOutputTypeCountReportsArgs
    generalReports?: boolean | FileCountOutputTypeCountGeneralReportsArgs
    goalReports?: boolean | FileCountOutputTypeCountGoalReportsArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportFileWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountGeneralReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportFileWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountGoalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportFileWhereInput
  }


  /**
   * Count Type LibraryCountOutputType
   */

  export type LibraryCountOutputType = {
    members: number
  }

  export type LibraryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | LibraryCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * LibraryCountOutputType without action
   */
  export type LibraryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryCountOutputType
     */
    select?: LibraryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LibraryCountOutputType without action
   */
  export type LibraryCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryMemberWhereInput
  }


  /**
   * Count Type GoalCountOutputType
   */

  export type GoalCountOutputType = {
    assignments: number
    reports: number
    generalReports: number
  }

  export type GoalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | GoalCountOutputTypeCountAssignmentsArgs
    reports?: boolean | GoalCountOutputTypeCountReportsArgs
    generalReports?: boolean | GoalCountOutputTypeCountGeneralReportsArgs
  }

  // Custom InputTypes
  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalCountOutputType
     */
    select?: GoalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalAssignmentWhereInput
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportWhereInput
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountGeneralReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type GoalReportCountOutputType
   */

  export type GoalReportCountOutputType = {
    files: number
  }

  export type GoalReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | GoalReportCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * GoalReportCountOutputType without action
   */
  export type GoalReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportCountOutputType
     */
    select?: GoalReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalReportCountOutputType without action
   */
  export type GoalReportCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportFileWhereInput
  }


  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    files: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | ReportCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportFileWhereInput
  }


  /**
   * Count Type GeneralReportCountOutputType
   */

  export type GeneralReportCountOutputType = {
    attachments: number
  }

  export type GeneralReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | GeneralReportCountOutputTypeCountAttachmentsArgs
  }

  // Custom InputTypes
  /**
   * GeneralReportCountOutputType without action
   */
  export type GeneralReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportCountOutputType
     */
    select?: GeneralReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GeneralReportCountOutputType without action
   */
  export type GeneralReportCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportFileWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Sucursal
   */

  export type AggregateSucursal = {
    _count: SucursalCountAggregateOutputType | null
    _min: SucursalMinAggregateOutputType | null
    _max: SucursalMaxAggregateOutputType | null
  }

  export type SucursalMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    location: string | null
    serverUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SucursalMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    location: string | null
    serverUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SucursalCountAggregateOutputType = {
    id: number
    name: number
    description: number
    location: number
    serverUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SucursalMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    serverUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SucursalMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    serverUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SucursalCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    serverUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SucursalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sucursal to aggregate.
     */
    where?: SucursalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sucursals to fetch.
     */
    orderBy?: SucursalOrderByWithRelationInput | SucursalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SucursalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sucursals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sucursals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sucursals
    **/
    _count?: true | SucursalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SucursalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SucursalMaxAggregateInputType
  }

  export type GetSucursalAggregateType<T extends SucursalAggregateArgs> = {
        [P in keyof T & keyof AggregateSucursal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSucursal[P]>
      : GetScalarType<T[P], AggregateSucursal[P]>
  }




  export type SucursalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SucursalWhereInput
    orderBy?: SucursalOrderByWithAggregationInput | SucursalOrderByWithAggregationInput[]
    by: SucursalScalarFieldEnum[] | SucursalScalarFieldEnum
    having?: SucursalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SucursalCountAggregateInputType | true
    _min?: SucursalMinAggregateInputType
    _max?: SucursalMaxAggregateInputType
  }

  export type SucursalGroupByOutputType = {
    id: string
    name: string
    description: string | null
    location: string | null
    serverUrl: string
    createdAt: Date
    updatedAt: Date
    _count: SucursalCountAggregateOutputType | null
    _min: SucursalMinAggregateOutputType | null
    _max: SucursalMaxAggregateOutputType | null
  }

  type GetSucursalGroupByPayload<T extends SucursalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SucursalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SucursalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SucursalGroupByOutputType[P]>
            : GetScalarType<T[P], SucursalGroupByOutputType[P]>
        }
      >
    >


  export type SucursalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    serverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Sucursal$usersArgs<ExtArgs>
    departments?: boolean | Sucursal$departmentsArgs<ExtArgs>
    libraries?: boolean | Sucursal$librariesArgs<ExtArgs>
    goals?: boolean | Sucursal$goalsArgs<ExtArgs>
    reports?: boolean | Sucursal$reportsArgs<ExtArgs>
    generalReports?: boolean | Sucursal$generalReportsArgs<ExtArgs>
    folders?: boolean | Sucursal$foldersArgs<ExtArgs>
    files?: boolean | Sucursal$filesArgs<ExtArgs>
    notifications?: boolean | Sucursal$notificationsArgs<ExtArgs>
    errorLogs?: boolean | Sucursal$errorLogsArgs<ExtArgs>
    scans?: boolean | Sucursal$scansArgs<ExtArgs>
    sourceConnections?: boolean | Sucursal$sourceConnectionsArgs<ExtArgs>
    targetConnections?: boolean | Sucursal$targetConnectionsArgs<ExtArgs>
    _count?: boolean | SucursalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sucursal"]>

  export type SucursalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    serverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sucursal"]>

  export type SucursalSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    serverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SucursalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Sucursal$usersArgs<ExtArgs>
    departments?: boolean | Sucursal$departmentsArgs<ExtArgs>
    libraries?: boolean | Sucursal$librariesArgs<ExtArgs>
    goals?: boolean | Sucursal$goalsArgs<ExtArgs>
    reports?: boolean | Sucursal$reportsArgs<ExtArgs>
    generalReports?: boolean | Sucursal$generalReportsArgs<ExtArgs>
    folders?: boolean | Sucursal$foldersArgs<ExtArgs>
    files?: boolean | Sucursal$filesArgs<ExtArgs>
    notifications?: boolean | Sucursal$notificationsArgs<ExtArgs>
    errorLogs?: boolean | Sucursal$errorLogsArgs<ExtArgs>
    scans?: boolean | Sucursal$scansArgs<ExtArgs>
    sourceConnections?: boolean | Sucursal$sourceConnectionsArgs<ExtArgs>
    targetConnections?: boolean | Sucursal$targetConnectionsArgs<ExtArgs>
    _count?: boolean | SucursalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SucursalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SucursalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sucursal"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      libraries: Prisma.$LibraryPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      generalReports: Prisma.$GeneralReportPayload<ExtArgs>[]
      folders: Prisma.$FolderPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      errorLogs: Prisma.$ErrorLogPayload<ExtArgs>[]
      scans: Prisma.$ScanPayload<ExtArgs>[]
      sourceConnections: Prisma.$SucursalConnectionPayload<ExtArgs>[]
      targetConnections: Prisma.$SucursalConnectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      location: string | null
      serverUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sucursal"]>
    composites: {}
  }

  type SucursalGetPayload<S extends boolean | null | undefined | SucursalDefaultArgs> = $Result.GetResult<Prisma.$SucursalPayload, S>

  type SucursalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SucursalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SucursalCountAggregateInputType | true
    }

  export interface SucursalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sucursal'], meta: { name: 'Sucursal' } }
    /**
     * Find zero or one Sucursal that matches the filter.
     * @param {SucursalFindUniqueArgs} args - Arguments to find a Sucursal
     * @example
     * // Get one Sucursal
     * const sucursal = await prisma.sucursal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SucursalFindUniqueArgs>(args: SelectSubset<T, SucursalFindUniqueArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sucursal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SucursalFindUniqueOrThrowArgs} args - Arguments to find a Sucursal
     * @example
     * // Get one Sucursal
     * const sucursal = await prisma.sucursal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SucursalFindUniqueOrThrowArgs>(args: SelectSubset<T, SucursalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sucursal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalFindFirstArgs} args - Arguments to find a Sucursal
     * @example
     * // Get one Sucursal
     * const sucursal = await prisma.sucursal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SucursalFindFirstArgs>(args?: SelectSubset<T, SucursalFindFirstArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sucursal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalFindFirstOrThrowArgs} args - Arguments to find a Sucursal
     * @example
     * // Get one Sucursal
     * const sucursal = await prisma.sucursal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SucursalFindFirstOrThrowArgs>(args?: SelectSubset<T, SucursalFindFirstOrThrowArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sucursals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sucursals
     * const sucursals = await prisma.sucursal.findMany()
     * 
     * // Get first 10 Sucursals
     * const sucursals = await prisma.sucursal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sucursalWithIdOnly = await prisma.sucursal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SucursalFindManyArgs>(args?: SelectSubset<T, SucursalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sucursal.
     * @param {SucursalCreateArgs} args - Arguments to create a Sucursal.
     * @example
     * // Create one Sucursal
     * const Sucursal = await prisma.sucursal.create({
     *   data: {
     *     // ... data to create a Sucursal
     *   }
     * })
     * 
     */
    create<T extends SucursalCreateArgs>(args: SelectSubset<T, SucursalCreateArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sucursals.
     * @param {SucursalCreateManyArgs} args - Arguments to create many Sucursals.
     * @example
     * // Create many Sucursals
     * const sucursal = await prisma.sucursal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SucursalCreateManyArgs>(args?: SelectSubset<T, SucursalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sucursals and returns the data saved in the database.
     * @param {SucursalCreateManyAndReturnArgs} args - Arguments to create many Sucursals.
     * @example
     * // Create many Sucursals
     * const sucursal = await prisma.sucursal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sucursals and only return the `id`
     * const sucursalWithIdOnly = await prisma.sucursal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SucursalCreateManyAndReturnArgs>(args?: SelectSubset<T, SucursalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sucursal.
     * @param {SucursalDeleteArgs} args - Arguments to delete one Sucursal.
     * @example
     * // Delete one Sucursal
     * const Sucursal = await prisma.sucursal.delete({
     *   where: {
     *     // ... filter to delete one Sucursal
     *   }
     * })
     * 
     */
    delete<T extends SucursalDeleteArgs>(args: SelectSubset<T, SucursalDeleteArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sucursal.
     * @param {SucursalUpdateArgs} args - Arguments to update one Sucursal.
     * @example
     * // Update one Sucursal
     * const sucursal = await prisma.sucursal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SucursalUpdateArgs>(args: SelectSubset<T, SucursalUpdateArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sucursals.
     * @param {SucursalDeleteManyArgs} args - Arguments to filter Sucursals to delete.
     * @example
     * // Delete a few Sucursals
     * const { count } = await prisma.sucursal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SucursalDeleteManyArgs>(args?: SelectSubset<T, SucursalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sucursals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sucursals
     * const sucursal = await prisma.sucursal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SucursalUpdateManyArgs>(args: SelectSubset<T, SucursalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sucursal.
     * @param {SucursalUpsertArgs} args - Arguments to update or create a Sucursal.
     * @example
     * // Update or create a Sucursal
     * const sucursal = await prisma.sucursal.upsert({
     *   create: {
     *     // ... data to create a Sucursal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sucursal we want to update
     *   }
     * })
     */
    upsert<T extends SucursalUpsertArgs>(args: SelectSubset<T, SucursalUpsertArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sucursals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalCountArgs} args - Arguments to filter Sucursals to count.
     * @example
     * // Count the number of Sucursals
     * const count = await prisma.sucursal.count({
     *   where: {
     *     // ... the filter for the Sucursals we want to count
     *   }
     * })
    **/
    count<T extends SucursalCountArgs>(
      args?: Subset<T, SucursalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SucursalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sucursal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SucursalAggregateArgs>(args: Subset<T, SucursalAggregateArgs>): Prisma.PrismaPromise<GetSucursalAggregateType<T>>

    /**
     * Group by Sucursal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SucursalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SucursalGroupByArgs['orderBy'] }
        : { orderBy?: SucursalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SucursalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSucursalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sucursal model
   */
  readonly fields: SucursalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sucursal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SucursalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Sucursal$usersArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    departments<T extends Sucursal$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    libraries<T extends Sucursal$librariesArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$librariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends Sucursal$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Sucursal$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    generalReports<T extends Sucursal$generalReportsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$generalReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findMany"> | Null>
    folders<T extends Sucursal$foldersArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends Sucursal$filesArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Sucursal$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    errorLogs<T extends Sucursal$errorLogsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$errorLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findMany"> | Null>
    scans<T extends Sucursal$scansArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$scansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findMany"> | Null>
    sourceConnections<T extends Sucursal$sourceConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$sourceConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    targetConnections<T extends Sucursal$targetConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Sucursal$targetConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sucursal model
   */ 
  interface SucursalFieldRefs {
    readonly id: FieldRef<"Sucursal", 'String'>
    readonly name: FieldRef<"Sucursal", 'String'>
    readonly description: FieldRef<"Sucursal", 'String'>
    readonly location: FieldRef<"Sucursal", 'String'>
    readonly serverUrl: FieldRef<"Sucursal", 'String'>
    readonly createdAt: FieldRef<"Sucursal", 'DateTime'>
    readonly updatedAt: FieldRef<"Sucursal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sucursal findUnique
   */
  export type SucursalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter, which Sucursal to fetch.
     */
    where: SucursalWhereUniqueInput
  }

  /**
   * Sucursal findUniqueOrThrow
   */
  export type SucursalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter, which Sucursal to fetch.
     */
    where: SucursalWhereUniqueInput
  }

  /**
   * Sucursal findFirst
   */
  export type SucursalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter, which Sucursal to fetch.
     */
    where?: SucursalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sucursals to fetch.
     */
    orderBy?: SucursalOrderByWithRelationInput | SucursalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sucursals.
     */
    cursor?: SucursalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sucursals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sucursals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sucursals.
     */
    distinct?: SucursalScalarFieldEnum | SucursalScalarFieldEnum[]
  }

  /**
   * Sucursal findFirstOrThrow
   */
  export type SucursalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter, which Sucursal to fetch.
     */
    where?: SucursalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sucursals to fetch.
     */
    orderBy?: SucursalOrderByWithRelationInput | SucursalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sucursals.
     */
    cursor?: SucursalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sucursals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sucursals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sucursals.
     */
    distinct?: SucursalScalarFieldEnum | SucursalScalarFieldEnum[]
  }

  /**
   * Sucursal findMany
   */
  export type SucursalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter, which Sucursals to fetch.
     */
    where?: SucursalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sucursals to fetch.
     */
    orderBy?: SucursalOrderByWithRelationInput | SucursalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sucursals.
     */
    cursor?: SucursalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sucursals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sucursals.
     */
    skip?: number
    distinct?: SucursalScalarFieldEnum | SucursalScalarFieldEnum[]
  }

  /**
   * Sucursal create
   */
  export type SucursalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * The data needed to create a Sucursal.
     */
    data: XOR<SucursalCreateInput, SucursalUncheckedCreateInput>
  }

  /**
   * Sucursal createMany
   */
  export type SucursalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sucursals.
     */
    data: SucursalCreateManyInput | SucursalCreateManyInput[]
  }

  /**
   * Sucursal createManyAndReturn
   */
  export type SucursalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sucursals.
     */
    data: SucursalCreateManyInput | SucursalCreateManyInput[]
  }

  /**
   * Sucursal update
   */
  export type SucursalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * The data needed to update a Sucursal.
     */
    data: XOR<SucursalUpdateInput, SucursalUncheckedUpdateInput>
    /**
     * Choose, which Sucursal to update.
     */
    where: SucursalWhereUniqueInput
  }

  /**
   * Sucursal updateMany
   */
  export type SucursalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sucursals.
     */
    data: XOR<SucursalUpdateManyMutationInput, SucursalUncheckedUpdateManyInput>
    /**
     * Filter which Sucursals to update
     */
    where?: SucursalWhereInput
  }

  /**
   * Sucursal upsert
   */
  export type SucursalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * The filter to search for the Sucursal to update in case it exists.
     */
    where: SucursalWhereUniqueInput
    /**
     * In case the Sucursal found by the `where` argument doesn't exist, create a new Sucursal with this data.
     */
    create: XOR<SucursalCreateInput, SucursalUncheckedCreateInput>
    /**
     * In case the Sucursal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SucursalUpdateInput, SucursalUncheckedUpdateInput>
  }

  /**
   * Sucursal delete
   */
  export type SucursalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
    /**
     * Filter which Sucursal to delete.
     */
    where: SucursalWhereUniqueInput
  }

  /**
   * Sucursal deleteMany
   */
  export type SucursalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sucursals to delete
     */
    where?: SucursalWhereInput
  }

  /**
   * Sucursal.users
   */
  export type Sucursal$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Sucursal.departments
   */
  export type Sucursal$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Sucursal.libraries
   */
  export type Sucursal$librariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    where?: LibraryWhereInput
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    cursor?: LibraryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibraryScalarFieldEnum | LibraryScalarFieldEnum[]
  }

  /**
   * Sucursal.goals
   */
  export type Sucursal$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Sucursal.reports
   */
  export type Sucursal$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Sucursal.generalReports
   */
  export type Sucursal$generalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    where?: GeneralReportWhereInput
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    cursor?: GeneralReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * Sucursal.folders
   */
  export type Sucursal$foldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Sucursal.files
   */
  export type Sucursal$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Sucursal.notifications
   */
  export type Sucursal$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Sucursal.errorLogs
   */
  export type Sucursal$errorLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    where?: ErrorLogWhereInput
    orderBy?: ErrorLogOrderByWithRelationInput | ErrorLogOrderByWithRelationInput[]
    cursor?: ErrorLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ErrorLogScalarFieldEnum | ErrorLogScalarFieldEnum[]
  }

  /**
   * Sucursal.scans
   */
  export type Sucursal$scansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    where?: ScanWhereInput
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    cursor?: ScanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScanScalarFieldEnum | ScanScalarFieldEnum[]
  }

  /**
   * Sucursal.sourceConnections
   */
  export type Sucursal$sourceConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    where?: SucursalConnectionWhereInput
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    cursor?: SucursalConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SucursalConnectionScalarFieldEnum | SucursalConnectionScalarFieldEnum[]
  }

  /**
   * Sucursal.targetConnections
   */
  export type Sucursal$targetConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    where?: SucursalConnectionWhereInput
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    cursor?: SucursalConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SucursalConnectionScalarFieldEnum | SucursalConnectionScalarFieldEnum[]
  }

  /**
   * Sucursal without action
   */
  export type SucursalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sucursal
     */
    select?: SucursalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalInclude<ExtArgs> | null
  }


  /**
   * Model SucursalConnection
   */

  export type AggregateSucursalConnection = {
    _count: SucursalConnectionCountAggregateOutputType | null
    _min: SucursalConnectionMinAggregateOutputType | null
    _max: SucursalConnectionMaxAggregateOutputType | null
  }

  export type SucursalConnectionMinAggregateOutputType = {
    id: string | null
    sourceSucursalId: string | null
    targetSucursalId: string | null
    createdAt: Date | null
  }

  export type SucursalConnectionMaxAggregateOutputType = {
    id: string | null
    sourceSucursalId: string | null
    targetSucursalId: string | null
    createdAt: Date | null
  }

  export type SucursalConnectionCountAggregateOutputType = {
    id: number
    sourceSucursalId: number
    targetSucursalId: number
    createdAt: number
    _all: number
  }


  export type SucursalConnectionMinAggregateInputType = {
    id?: true
    sourceSucursalId?: true
    targetSucursalId?: true
    createdAt?: true
  }

  export type SucursalConnectionMaxAggregateInputType = {
    id?: true
    sourceSucursalId?: true
    targetSucursalId?: true
    createdAt?: true
  }

  export type SucursalConnectionCountAggregateInputType = {
    id?: true
    sourceSucursalId?: true
    targetSucursalId?: true
    createdAt?: true
    _all?: true
  }

  export type SucursalConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SucursalConnection to aggregate.
     */
    where?: SucursalConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SucursalConnections to fetch.
     */
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SucursalConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SucursalConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SucursalConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SucursalConnections
    **/
    _count?: true | SucursalConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SucursalConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SucursalConnectionMaxAggregateInputType
  }

  export type GetSucursalConnectionAggregateType<T extends SucursalConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSucursalConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSucursalConnection[P]>
      : GetScalarType<T[P], AggregateSucursalConnection[P]>
  }




  export type SucursalConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SucursalConnectionWhereInput
    orderBy?: SucursalConnectionOrderByWithAggregationInput | SucursalConnectionOrderByWithAggregationInput[]
    by: SucursalConnectionScalarFieldEnum[] | SucursalConnectionScalarFieldEnum
    having?: SucursalConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SucursalConnectionCountAggregateInputType | true
    _min?: SucursalConnectionMinAggregateInputType
    _max?: SucursalConnectionMaxAggregateInputType
  }

  export type SucursalConnectionGroupByOutputType = {
    id: string
    sourceSucursalId: string
    targetSucursalId: string
    createdAt: Date
    _count: SucursalConnectionCountAggregateOutputType | null
    _min: SucursalConnectionMinAggregateOutputType | null
    _max: SucursalConnectionMaxAggregateOutputType | null
  }

  type GetSucursalConnectionGroupByPayload<T extends SucursalConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SucursalConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SucursalConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SucursalConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], SucursalConnectionGroupByOutputType[P]>
        }
      >
    >


  export type SucursalConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceSucursalId?: boolean
    targetSucursalId?: boolean
    createdAt?: boolean
    sourceSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    targetSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sucursalConnection"]>

  export type SucursalConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceSucursalId?: boolean
    targetSucursalId?: boolean
    createdAt?: boolean
    sourceSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    targetSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sucursalConnection"]>

  export type SucursalConnectionSelectScalar = {
    id?: boolean
    sourceSucursalId?: boolean
    targetSucursalId?: boolean
    createdAt?: boolean
  }

  export type SucursalConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sourceSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    targetSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }
  export type SucursalConnectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sourceSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    targetSucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $SucursalConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SucursalConnection"
    objects: {
      sourceSucursal: Prisma.$SucursalPayload<ExtArgs>
      targetSucursal: Prisma.$SucursalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sourceSucursalId: string
      targetSucursalId: string
      createdAt: Date
    }, ExtArgs["result"]["sucursalConnection"]>
    composites: {}
  }

  type SucursalConnectionGetPayload<S extends boolean | null | undefined | SucursalConnectionDefaultArgs> = $Result.GetResult<Prisma.$SucursalConnectionPayload, S>

  type SucursalConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SucursalConnectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SucursalConnectionCountAggregateInputType | true
    }

  export interface SucursalConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SucursalConnection'], meta: { name: 'SucursalConnection' } }
    /**
     * Find zero or one SucursalConnection that matches the filter.
     * @param {SucursalConnectionFindUniqueArgs} args - Arguments to find a SucursalConnection
     * @example
     * // Get one SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SucursalConnectionFindUniqueArgs>(args: SelectSubset<T, SucursalConnectionFindUniqueArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SucursalConnection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SucursalConnectionFindUniqueOrThrowArgs} args - Arguments to find a SucursalConnection
     * @example
     * // Get one SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SucursalConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SucursalConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SucursalConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionFindFirstArgs} args - Arguments to find a SucursalConnection
     * @example
     * // Get one SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SucursalConnectionFindFirstArgs>(args?: SelectSubset<T, SucursalConnectionFindFirstArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SucursalConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionFindFirstOrThrowArgs} args - Arguments to find a SucursalConnection
     * @example
     * // Get one SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SucursalConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SucursalConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SucursalConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SucursalConnections
     * const sucursalConnections = await prisma.sucursalConnection.findMany()
     * 
     * // Get first 10 SucursalConnections
     * const sucursalConnections = await prisma.sucursalConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sucursalConnectionWithIdOnly = await prisma.sucursalConnection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SucursalConnectionFindManyArgs>(args?: SelectSubset<T, SucursalConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SucursalConnection.
     * @param {SucursalConnectionCreateArgs} args - Arguments to create a SucursalConnection.
     * @example
     * // Create one SucursalConnection
     * const SucursalConnection = await prisma.sucursalConnection.create({
     *   data: {
     *     // ... data to create a SucursalConnection
     *   }
     * })
     * 
     */
    create<T extends SucursalConnectionCreateArgs>(args: SelectSubset<T, SucursalConnectionCreateArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SucursalConnections.
     * @param {SucursalConnectionCreateManyArgs} args - Arguments to create many SucursalConnections.
     * @example
     * // Create many SucursalConnections
     * const sucursalConnection = await prisma.sucursalConnection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SucursalConnectionCreateManyArgs>(args?: SelectSubset<T, SucursalConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SucursalConnections and returns the data saved in the database.
     * @param {SucursalConnectionCreateManyAndReturnArgs} args - Arguments to create many SucursalConnections.
     * @example
     * // Create many SucursalConnections
     * const sucursalConnection = await prisma.sucursalConnection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SucursalConnections and only return the `id`
     * const sucursalConnectionWithIdOnly = await prisma.sucursalConnection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SucursalConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SucursalConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SucursalConnection.
     * @param {SucursalConnectionDeleteArgs} args - Arguments to delete one SucursalConnection.
     * @example
     * // Delete one SucursalConnection
     * const SucursalConnection = await prisma.sucursalConnection.delete({
     *   where: {
     *     // ... filter to delete one SucursalConnection
     *   }
     * })
     * 
     */
    delete<T extends SucursalConnectionDeleteArgs>(args: SelectSubset<T, SucursalConnectionDeleteArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SucursalConnection.
     * @param {SucursalConnectionUpdateArgs} args - Arguments to update one SucursalConnection.
     * @example
     * // Update one SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SucursalConnectionUpdateArgs>(args: SelectSubset<T, SucursalConnectionUpdateArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SucursalConnections.
     * @param {SucursalConnectionDeleteManyArgs} args - Arguments to filter SucursalConnections to delete.
     * @example
     * // Delete a few SucursalConnections
     * const { count } = await prisma.sucursalConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SucursalConnectionDeleteManyArgs>(args?: SelectSubset<T, SucursalConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SucursalConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SucursalConnections
     * const sucursalConnection = await prisma.sucursalConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SucursalConnectionUpdateManyArgs>(args: SelectSubset<T, SucursalConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SucursalConnection.
     * @param {SucursalConnectionUpsertArgs} args - Arguments to update or create a SucursalConnection.
     * @example
     * // Update or create a SucursalConnection
     * const sucursalConnection = await prisma.sucursalConnection.upsert({
     *   create: {
     *     // ... data to create a SucursalConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SucursalConnection we want to update
     *   }
     * })
     */
    upsert<T extends SucursalConnectionUpsertArgs>(args: SelectSubset<T, SucursalConnectionUpsertArgs<ExtArgs>>): Prisma__SucursalConnectionClient<$Result.GetResult<Prisma.$SucursalConnectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SucursalConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionCountArgs} args - Arguments to filter SucursalConnections to count.
     * @example
     * // Count the number of SucursalConnections
     * const count = await prisma.sucursalConnection.count({
     *   where: {
     *     // ... the filter for the SucursalConnections we want to count
     *   }
     * })
    **/
    count<T extends SucursalConnectionCountArgs>(
      args?: Subset<T, SucursalConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SucursalConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SucursalConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SucursalConnectionAggregateArgs>(args: Subset<T, SucursalConnectionAggregateArgs>): Prisma.PrismaPromise<GetSucursalConnectionAggregateType<T>>

    /**
     * Group by SucursalConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SucursalConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SucursalConnectionGroupByArgs['orderBy'] }
        : { orderBy?: SucursalConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SucursalConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSucursalConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SucursalConnection model
   */
  readonly fields: SucursalConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SucursalConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SucursalConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sourceSucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    targetSucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SucursalConnection model
   */ 
  interface SucursalConnectionFieldRefs {
    readonly id: FieldRef<"SucursalConnection", 'String'>
    readonly sourceSucursalId: FieldRef<"SucursalConnection", 'String'>
    readonly targetSucursalId: FieldRef<"SucursalConnection", 'String'>
    readonly createdAt: FieldRef<"SucursalConnection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SucursalConnection findUnique
   */
  export type SucursalConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter, which SucursalConnection to fetch.
     */
    where: SucursalConnectionWhereUniqueInput
  }

  /**
   * SucursalConnection findUniqueOrThrow
   */
  export type SucursalConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter, which SucursalConnection to fetch.
     */
    where: SucursalConnectionWhereUniqueInput
  }

  /**
   * SucursalConnection findFirst
   */
  export type SucursalConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter, which SucursalConnection to fetch.
     */
    where?: SucursalConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SucursalConnections to fetch.
     */
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SucursalConnections.
     */
    cursor?: SucursalConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SucursalConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SucursalConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SucursalConnections.
     */
    distinct?: SucursalConnectionScalarFieldEnum | SucursalConnectionScalarFieldEnum[]
  }

  /**
   * SucursalConnection findFirstOrThrow
   */
  export type SucursalConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter, which SucursalConnection to fetch.
     */
    where?: SucursalConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SucursalConnections to fetch.
     */
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SucursalConnections.
     */
    cursor?: SucursalConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SucursalConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SucursalConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SucursalConnections.
     */
    distinct?: SucursalConnectionScalarFieldEnum | SucursalConnectionScalarFieldEnum[]
  }

  /**
   * SucursalConnection findMany
   */
  export type SucursalConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter, which SucursalConnections to fetch.
     */
    where?: SucursalConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SucursalConnections to fetch.
     */
    orderBy?: SucursalConnectionOrderByWithRelationInput | SucursalConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SucursalConnections.
     */
    cursor?: SucursalConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SucursalConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SucursalConnections.
     */
    skip?: number
    distinct?: SucursalConnectionScalarFieldEnum | SucursalConnectionScalarFieldEnum[]
  }

  /**
   * SucursalConnection create
   */
  export type SucursalConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a SucursalConnection.
     */
    data: XOR<SucursalConnectionCreateInput, SucursalConnectionUncheckedCreateInput>
  }

  /**
   * SucursalConnection createMany
   */
  export type SucursalConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SucursalConnections.
     */
    data: SucursalConnectionCreateManyInput | SucursalConnectionCreateManyInput[]
  }

  /**
   * SucursalConnection createManyAndReturn
   */
  export type SucursalConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SucursalConnections.
     */
    data: SucursalConnectionCreateManyInput | SucursalConnectionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SucursalConnection update
   */
  export type SucursalConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a SucursalConnection.
     */
    data: XOR<SucursalConnectionUpdateInput, SucursalConnectionUncheckedUpdateInput>
    /**
     * Choose, which SucursalConnection to update.
     */
    where: SucursalConnectionWhereUniqueInput
  }

  /**
   * SucursalConnection updateMany
   */
  export type SucursalConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SucursalConnections.
     */
    data: XOR<SucursalConnectionUpdateManyMutationInput, SucursalConnectionUncheckedUpdateManyInput>
    /**
     * Filter which SucursalConnections to update
     */
    where?: SucursalConnectionWhereInput
  }

  /**
   * SucursalConnection upsert
   */
  export type SucursalConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the SucursalConnection to update in case it exists.
     */
    where: SucursalConnectionWhereUniqueInput
    /**
     * In case the SucursalConnection found by the `where` argument doesn't exist, create a new SucursalConnection with this data.
     */
    create: XOR<SucursalConnectionCreateInput, SucursalConnectionUncheckedCreateInput>
    /**
     * In case the SucursalConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SucursalConnectionUpdateInput, SucursalConnectionUncheckedUpdateInput>
  }

  /**
   * SucursalConnection delete
   */
  export type SucursalConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
    /**
     * Filter which SucursalConnection to delete.
     */
    where: SucursalConnectionWhereUniqueInput
  }

  /**
   * SucursalConnection deleteMany
   */
  export type SucursalConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SucursalConnections to delete
     */
    where?: SucursalConnectionWhereInput
  }

  /**
   * SucursalConnection without action
   */
  export type SucursalConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SucursalConnection
     */
    select?: SucursalConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SucursalConnectionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sucursalId: string | null
    supervisorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sucursalId: string | null
    supervisorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    sucursalId: number
    supervisorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sucursalId?: true
    supervisorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sucursalId?: true
    supervisorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sucursalId?: true
    supervisorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    sucursalId: string
    supervisorId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sucursalId?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    supervisor?: boolean | Department$supervisorArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    supervisors?: boolean | Department$supervisorsArgs<ExtArgs>
    goals?: boolean | Department$goalsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sucursalId?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    supervisor?: boolean | Department$supervisorArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    sucursalId?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    supervisor?: boolean | Department$supervisorArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    supervisors?: boolean | Department$supervisorsArgs<ExtArgs>
    goals?: boolean | Department$goalsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    supervisor?: boolean | Department$supervisorArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      supervisor: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      supervisors: Prisma.$UserPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      sucursalId: string
      supervisorId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supervisor<T extends Department$supervisorArgs<ExtArgs> = {}>(args?: Subset<T, Department$supervisorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    supervisors<T extends Department$supervisorsArgs<ExtArgs> = {}>(args?: Subset<T, Department$supervisorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends Department$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Department$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly sucursalId: FieldRef<"Department", 'String'>
    readonly supervisorId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.supervisor
   */
  export type Department$supervisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department.supervisors
   */
  export type Department$supervisorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department.goals
   */
  export type Department$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    status: string | null
    profilePicture: string | null
    sucursalId: string | null
    departmentId: string | null
    supervisorId: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    status: string | null
    profilePicture: string | null
    sucursalId: string | null
    departmentId: string | null
    supervisorId: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    status: number
    profilePicture: number
    sucursalId: number
    departmentId: number
    supervisorId: number
    phone: number
    address: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    status?: true
    profilePicture?: true
    sucursalId?: true
    departmentId?: true
    supervisorId?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    status?: true
    profilePicture?: true
    sucursalId?: true
    departmentId?: true
    supervisorId?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    status?: true
    profilePicture?: true
    sucursalId?: true
    departmentId?: true
    supervisorId?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: string
    status: string
    profilePicture: string | null
    sucursalId: string
    departmentId: string | null
    supervisorId: string | null
    phone: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    profilePicture?: boolean
    sucursalId?: boolean
    departmentId?: boolean
    supervisorId?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
    subordinates?: boolean | User$subordinatesArgs<ExtArgs>
    supervisedDepartments?: boolean | User$supervisedDepartmentsArgs<ExtArgs>
    departmentSupervisors?: boolean | User$departmentSupervisorsArgs<ExtArgs>
    folders?: boolean | User$foldersArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    libraries?: boolean | User$librariesArgs<ExtArgs>
    libraryMembers?: boolean | User$libraryMembersArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    scans?: boolean | User$scansArgs<ExtArgs>
    createdGoals?: boolean | User$createdGoalsArgs<ExtArgs>
    submittedReports?: boolean | User$submittedReportsArgs<ExtArgs>
    receivedReports?: boolean | User$receivedReportsArgs<ExtArgs>
    respondedReports?: boolean | User$respondedReportsArgs<ExtArgs>
    goalReports?: boolean | User$goalReportsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    profilePicture?: boolean
    sucursalId?: boolean
    departmentId?: boolean
    supervisorId?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    profilePicture?: boolean
    sucursalId?: boolean
    departmentId?: boolean
    supervisorId?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
    subordinates?: boolean | User$subordinatesArgs<ExtArgs>
    supervisedDepartments?: boolean | User$supervisedDepartmentsArgs<ExtArgs>
    departmentSupervisors?: boolean | User$departmentSupervisorsArgs<ExtArgs>
    folders?: boolean | User$foldersArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    libraries?: boolean | User$librariesArgs<ExtArgs>
    libraryMembers?: boolean | User$libraryMembersArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    scans?: boolean | User$scansArgs<ExtArgs>
    createdGoals?: boolean | User$createdGoalsArgs<ExtArgs>
    submittedReports?: boolean | User$submittedReportsArgs<ExtArgs>
    receivedReports?: boolean | User$receivedReportsArgs<ExtArgs>
    respondedReports?: boolean | User$respondedReportsArgs<ExtArgs>
    goalReports?: boolean | User$goalReportsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      supervisor: Prisma.$UserPayload<ExtArgs> | null
      subordinates: Prisma.$UserPayload<ExtArgs>[]
      supervisedDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      departmentSupervisors: Prisma.$DepartmentPayload<ExtArgs>[]
      folders: Prisma.$FolderPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      libraries: Prisma.$LibraryPayload<ExtArgs>[]
      libraryMembers: Prisma.$LibraryMemberPayload<ExtArgs>[]
      goals: Prisma.$GoalAssignmentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      scans: Prisma.$ScanPayload<ExtArgs>[]
      createdGoals: Prisma.$GoalPayload<ExtArgs>[]
      submittedReports: Prisma.$GeneralReportPayload<ExtArgs>[]
      receivedReports: Prisma.$GeneralReportPayload<ExtArgs>[]
      respondedReports: Prisma.$GeneralReportPayload<ExtArgs>[]
      goalReports: Prisma.$GoalReportPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: string
      status: string
      profilePicture: string | null
      sucursalId: string
      departmentId: string | null
      supervisorId: string | null
      phone: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    supervisor<T extends User$supervisorArgs<ExtArgs> = {}>(args?: Subset<T, User$supervisorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    subordinates<T extends User$subordinatesArgs<ExtArgs> = {}>(args?: Subset<T, User$subordinatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    supervisedDepartments<T extends User$supervisedDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$supervisedDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    departmentSupervisors<T extends User$departmentSupervisorsArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentSupervisorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    folders<T extends User$foldersArgs<ExtArgs> = {}>(args?: Subset<T, User$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    libraries<T extends User$librariesArgs<ExtArgs> = {}>(args?: Subset<T, User$librariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findMany"> | Null>
    libraryMembers<T extends User$libraryMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$libraryMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends User$goalsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    scans<T extends User$scansArgs<ExtArgs> = {}>(args?: Subset<T, User$scansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findMany"> | Null>
    createdGoals<T extends User$createdGoalsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdGoalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    submittedReports<T extends User$submittedReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$submittedReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findMany"> | Null>
    receivedReports<T extends User$receivedReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findMany"> | Null>
    respondedReports<T extends User$respondedReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$respondedReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findMany"> | Null>
    goalReports<T extends User$goalReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly profilePicture: FieldRef<"User", 'String'>
    readonly sucursalId: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'String'>
    readonly supervisorId: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.supervisor
   */
  export type User$supervisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.subordinates
   */
  export type User$subordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.supervisedDepartments
   */
  export type User$supervisedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.departmentSupervisors
   */
  export type User$departmentSupervisorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.folders
   */
  export type User$foldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.libraries
   */
  export type User$librariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    where?: LibraryWhereInput
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    cursor?: LibraryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibraryScalarFieldEnum | LibraryScalarFieldEnum[]
  }

  /**
   * User.libraryMembers
   */
  export type User$libraryMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    where?: LibraryMemberWhereInput
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    cursor?: LibraryMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibraryMemberScalarFieldEnum | LibraryMemberScalarFieldEnum[]
  }

  /**
   * User.goals
   */
  export type User$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    where?: GoalAssignmentWhereInput
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    cursor?: GoalAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalAssignmentScalarFieldEnum | GoalAssignmentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.scans
   */
  export type User$scansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    where?: ScanWhereInput
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    cursor?: ScanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScanScalarFieldEnum | ScanScalarFieldEnum[]
  }

  /**
   * User.createdGoals
   */
  export type User$createdGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.submittedReports
   */
  export type User$submittedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    where?: GeneralReportWhereInput
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    cursor?: GeneralReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * User.receivedReports
   */
  export type User$receivedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    where?: GeneralReportWhereInput
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    cursor?: GeneralReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * User.respondedReports
   */
  export type User$respondedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    where?: GeneralReportWhereInput
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    cursor?: GeneralReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * User.goalReports
   */
  export type User$goalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    where?: GoalReportWhereInput
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    cursor?: GoalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReportScalarFieldEnum | GoalReportScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Folder
   */

  export type AggregateFolder = {
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  export type FolderMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    parentId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    parentId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderCountAggregateOutputType = {
    id: number
    name: number
    description: number
    parentId: number
    userId: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FolderMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folder to aggregate.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Folders
    **/
    _count?: true | FolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FolderMaxAggregateInputType
  }

  export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFolder[P]>
      : GetScalarType<T[P], AggregateFolder[P]>
  }




  export type FolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithAggregationInput | FolderOrderByWithAggregationInput[]
    by: FolderScalarFieldEnum[] | FolderScalarFieldEnum
    having?: FolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FolderCountAggregateInputType | true
    _min?: FolderMinAggregateInputType
    _max?: FolderMaxAggregateInputType
  }

  export type FolderGroupByOutputType = {
    id: string
    name: string
    description: string | null
    parentId: string | null
    userId: string
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FolderGroupByOutputType[P]>
            : GetScalarType<T[P], FolderGroupByOutputType[P]>
        }
      >
    >


  export type FolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    files?: boolean | Folder$filesArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    files?: boolean | Folder$filesArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }

  export type $FolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Folder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      parent: Prisma.$FolderPayload<ExtArgs> | null
      children: Prisma.$FolderPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      parentId: string | null
      userId: string
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["folder"]>
    composites: {}
  }

  type FolderGetPayload<S extends boolean | null | undefined | FolderDefaultArgs> = $Result.GetResult<Prisma.$FolderPayload, S>

  type FolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FolderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FolderCountAggregateInputType | true
    }

  export interface FolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
    /**
     * Find zero or one Folder that matches the filter.
     * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FolderFindUniqueArgs>(args: SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Folder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs>(args: SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Folder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FolderFindFirstArgs>(args?: SelectSubset<T, FolderFindFirstArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Folder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FolderFindFirstOrThrowArgs>(args?: SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Folders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Folders
     * const folders = await prisma.folder.findMany()
     * 
     * // Get first 10 Folders
     * const folders = await prisma.folder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FolderFindManyArgs>(args?: SelectSubset<T, FolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Folder.
     * @param {FolderCreateArgs} args - Arguments to create a Folder.
     * @example
     * // Create one Folder
     * const Folder = await prisma.folder.create({
     *   data: {
     *     // ... data to create a Folder
     *   }
     * })
     * 
     */
    create<T extends FolderCreateArgs>(args: SelectSubset<T, FolderCreateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Folders.
     * @param {FolderCreateManyArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FolderCreateManyArgs>(args?: SelectSubset<T, FolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Folders and returns the data saved in the database.
     * @param {FolderCreateManyAndReturnArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FolderCreateManyAndReturnArgs>(args?: SelectSubset<T, FolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Folder.
     * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
     * @example
     * // Delete one Folder
     * const Folder = await prisma.folder.delete({
     *   where: {
     *     // ... filter to delete one Folder
     *   }
     * })
     * 
     */
    delete<T extends FolderDeleteArgs>(args: SelectSubset<T, FolderDeleteArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Folder.
     * @param {FolderUpdateArgs} args - Arguments to update one Folder.
     * @example
     * // Update one Folder
     * const folder = await prisma.folder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FolderUpdateArgs>(args: SelectSubset<T, FolderUpdateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Folders.
     * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
     * @example
     * // Delete a few Folders
     * const { count } = await prisma.folder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FolderDeleteManyArgs>(args?: SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FolderUpdateManyArgs>(args: SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Folder.
     * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
     * @example
     * // Update or create a Folder
     * const folder = await prisma.folder.upsert({
     *   create: {
     *     // ... data to create a Folder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Folder we want to update
     *   }
     * })
     */
    upsert<T extends FolderUpsertArgs>(args: SelectSubset<T, FolderUpsertArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderCountArgs} args - Arguments to filter Folders to count.
     * @example
     * // Count the number of Folders
     * const count = await prisma.folder.count({
     *   where: {
     *     // ... the filter for the Folders we want to count
     *   }
     * })
    **/
    count<T extends FolderCountArgs>(
      args?: Subset<T, FolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FolderAggregateArgs>(args: Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

    /**
     * Group by Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FolderGroupByArgs['orderBy'] }
        : { orderBy?: FolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Folder model
   */
  readonly fields: FolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Folder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parent<T extends Folder$parentArgs<ExtArgs> = {}>(args?: Subset<T, Folder$parentArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Folder$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Folder$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends Folder$filesArgs<ExtArgs> = {}>(args?: Subset<T, Folder$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Folder model
   */ 
  interface FolderFieldRefs {
    readonly id: FieldRef<"Folder", 'String'>
    readonly name: FieldRef<"Folder", 'String'>
    readonly description: FieldRef<"Folder", 'String'>
    readonly parentId: FieldRef<"Folder", 'String'>
    readonly userId: FieldRef<"Folder", 'String'>
    readonly sucursalId: FieldRef<"Folder", 'String'>
    readonly createdAt: FieldRef<"Folder", 'DateTime'>
    readonly updatedAt: FieldRef<"Folder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Folder findUnique
   */
  export type FolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findUniqueOrThrow
   */
  export type FolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findFirst
   */
  export type FolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findFirstOrThrow
   */
  export type FolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findMany
   */
  export type FolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folders to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder create
   */
  export type FolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Folder.
     */
    data: XOR<FolderCreateInput, FolderUncheckedCreateInput>
  }

  /**
   * Folder createMany
   */
  export type FolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
  }

  /**
   * Folder createManyAndReturn
   */
  export type FolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder update
   */
  export type FolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Folder.
     */
    data: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
    /**
     * Choose, which Folder to update.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder updateMany
   */
  export type FolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
  }

  /**
   * Folder upsert
   */
  export type FolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Folder to update in case it exists.
     */
    where: FolderWhereUniqueInput
    /**
     * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
     */
    create: XOR<FolderCreateInput, FolderUncheckedCreateInput>
    /**
     * In case the Folder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
  }

  /**
   * Folder delete
   */
  export type FolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter which Folder to delete.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder deleteMany
   */
  export type FolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folders to delete
     */
    where?: FolderWhereInput
  }

  /**
   * Folder.parent
   */
  export type Folder$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Folder.children
   */
  export type Folder$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder.files
   */
  export type Folder$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Folder without action
   */
  export type FolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    originalName: string | null
    description: string | null
    url: string | null
    size: number | null
    type: string | null
    mimeType: string | null
    isPublic: boolean | null
    folderId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    originalName: string | null
    description: string | null
    url: string | null
    size: number | null
    type: string | null
    mimeType: string | null
    isPublic: boolean | null
    folderId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    originalName: number
    description: number
    url: number
    size: number
    type: number
    mimeType: number
    isPublic: number
    folderId: number
    userId: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    description?: true
    url?: true
    size?: true
    type?: true
    mimeType?: true
    isPublic?: true
    folderId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    description?: true
    url?: true
    size?: true
    type?: true
    mimeType?: true
    isPublic?: true
    folderId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    originalName?: true
    description?: true
    url?: true
    size?: true
    type?: true
    mimeType?: true
    isPublic?: true
    folderId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    originalName: string | null
    description: string | null
    url: string
    size: number
    type: string
    mimeType: string | null
    isPublic: boolean
    folderId: string | null
    userId: string
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    originalName?: boolean
    description?: boolean
    url?: boolean
    size?: boolean
    type?: boolean
    mimeType?: boolean
    isPublic?: boolean
    folderId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    reports?: boolean | File$reportsArgs<ExtArgs>
    generalReports?: boolean | File$generalReportsArgs<ExtArgs>
    goalReports?: boolean | File$goalReportsArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    originalName?: boolean
    description?: boolean
    url?: boolean
    size?: boolean
    type?: boolean
    mimeType?: boolean
    isPublic?: boolean
    folderId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    originalName?: boolean
    description?: boolean
    url?: boolean
    size?: boolean
    type?: boolean
    mimeType?: boolean
    isPublic?: boolean
    folderId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    reports?: boolean | File$reportsArgs<ExtArgs>
    generalReports?: boolean | File$generalReportsArgs<ExtArgs>
    goalReports?: boolean | File$goalReportsArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      folder: Prisma.$FolderPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      reports: Prisma.$ReportFilePayload<ExtArgs>[]
      generalReports: Prisma.$GeneralReportFilePayload<ExtArgs>[]
      goalReports: Prisma.$GoalReportFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      originalName: string | null
      description: string | null
      url: string
      size: number
      type: string
      mimeType: string | null
      isPublic: boolean
      folderId: string | null
      userId: string
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    folder<T extends File$folderArgs<ExtArgs> = {}>(args?: Subset<T, File$folderArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reports<T extends File$reportsArgs<ExtArgs> = {}>(args?: Subset<T, File$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    generalReports<T extends File$generalReportsArgs<ExtArgs> = {}>(args?: Subset<T, File$generalReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    goalReports<T extends File$goalReportsArgs<ExtArgs> = {}>(args?: Subset<T, File$goalReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */ 
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly originalName: FieldRef<"File", 'String'>
    readonly description: FieldRef<"File", 'String'>
    readonly url: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly type: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly isPublic: FieldRef<"File", 'Boolean'>
    readonly folderId: FieldRef<"File", 'String'>
    readonly userId: FieldRef<"File", 'String'>
    readonly sucursalId: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }

  /**
   * File.folder
   */
  export type File$folderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * File.reports
   */
  export type File$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    where?: ReportFileWhereInput
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    cursor?: ReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * File.generalReports
   */
  export type File$generalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    where?: GeneralReportFileWhereInput
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    cursor?: GeneralReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportFileScalarFieldEnum | GeneralReportFileScalarFieldEnum[]
  }

  /**
   * File.goalReports
   */
  export type File$goalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    where?: GoalReportFileWhereInput
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    cursor?: GoalReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReportFileScalarFieldEnum | GoalReportFileScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Library
   */

  export type AggregateLibrary = {
    _count: LibraryCountAggregateOutputType | null
    _min: LibraryMinAggregateOutputType | null
    _max: LibraryMaxAggregateOutputType | null
  }

  export type LibraryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Library to aggregate.
     */
    where?: LibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libraries to fetch.
     */
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libraries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libraries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Libraries
    **/
    _count?: true | LibraryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryMaxAggregateInputType
  }

  export type GetLibraryAggregateType<T extends LibraryAggregateArgs> = {
        [P in keyof T & keyof AggregateLibrary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibrary[P]>
      : GetScalarType<T[P], AggregateLibrary[P]>
  }




  export type LibraryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryWhereInput
    orderBy?: LibraryOrderByWithAggregationInput | LibraryOrderByWithAggregationInput[]
    by: LibraryScalarFieldEnum[] | LibraryScalarFieldEnum
    having?: LibraryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryCountAggregateInputType | true
    _min?: LibraryMinAggregateInputType
    _max?: LibraryMaxAggregateInputType
  }

  export type LibraryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryCountAggregateOutputType | null
    _min: LibraryMinAggregateOutputType | null
    _max: LibraryMaxAggregateOutputType | null
  }

  type GetLibraryGroupByPayload<T extends LibraryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LibraryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryGroupByOutputType[P]>
        }
      >
    >


  export type LibrarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    members?: boolean | Library$membersArgs<ExtArgs>
    _count?: boolean | LibraryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["library"]>

  export type LibrarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["library"]>

  export type LibrarySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LibraryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    members?: boolean | Library$membersArgs<ExtArgs>
    _count?: boolean | LibraryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LibraryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $LibraryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Library"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      members: Prisma.$LibraryMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["library"]>
    composites: {}
  }

  type LibraryGetPayload<S extends boolean | null | undefined | LibraryDefaultArgs> = $Result.GetResult<Prisma.$LibraryPayload, S>

  type LibraryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LibraryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LibraryCountAggregateInputType | true
    }

  export interface LibraryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Library'], meta: { name: 'Library' } }
    /**
     * Find zero or one Library that matches the filter.
     * @param {LibraryFindUniqueArgs} args - Arguments to find a Library
     * @example
     * // Get one Library
     * const library = await prisma.library.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LibraryFindUniqueArgs>(args: SelectSubset<T, LibraryFindUniqueArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Library that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LibraryFindUniqueOrThrowArgs} args - Arguments to find a Library
     * @example
     * // Get one Library
     * const library = await prisma.library.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LibraryFindUniqueOrThrowArgs>(args: SelectSubset<T, LibraryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Library that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryFindFirstArgs} args - Arguments to find a Library
     * @example
     * // Get one Library
     * const library = await prisma.library.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LibraryFindFirstArgs>(args?: SelectSubset<T, LibraryFindFirstArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Library that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryFindFirstOrThrowArgs} args - Arguments to find a Library
     * @example
     * // Get one Library
     * const library = await prisma.library.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LibraryFindFirstOrThrowArgs>(args?: SelectSubset<T, LibraryFindFirstOrThrowArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Libraries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Libraries
     * const libraries = await prisma.library.findMany()
     * 
     * // Get first 10 Libraries
     * const libraries = await prisma.library.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryWithIdOnly = await prisma.library.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LibraryFindManyArgs>(args?: SelectSubset<T, LibraryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Library.
     * @param {LibraryCreateArgs} args - Arguments to create a Library.
     * @example
     * // Create one Library
     * const Library = await prisma.library.create({
     *   data: {
     *     // ... data to create a Library
     *   }
     * })
     * 
     */
    create<T extends LibraryCreateArgs>(args: SelectSubset<T, LibraryCreateArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Libraries.
     * @param {LibraryCreateManyArgs} args - Arguments to create many Libraries.
     * @example
     * // Create many Libraries
     * const library = await prisma.library.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LibraryCreateManyArgs>(args?: SelectSubset<T, LibraryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Libraries and returns the data saved in the database.
     * @param {LibraryCreateManyAndReturnArgs} args - Arguments to create many Libraries.
     * @example
     * // Create many Libraries
     * const library = await prisma.library.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Libraries and only return the `id`
     * const libraryWithIdOnly = await prisma.library.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LibraryCreateManyAndReturnArgs>(args?: SelectSubset<T, LibraryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Library.
     * @param {LibraryDeleteArgs} args - Arguments to delete one Library.
     * @example
     * // Delete one Library
     * const Library = await prisma.library.delete({
     *   where: {
     *     // ... filter to delete one Library
     *   }
     * })
     * 
     */
    delete<T extends LibraryDeleteArgs>(args: SelectSubset<T, LibraryDeleteArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Library.
     * @param {LibraryUpdateArgs} args - Arguments to update one Library.
     * @example
     * // Update one Library
     * const library = await prisma.library.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LibraryUpdateArgs>(args: SelectSubset<T, LibraryUpdateArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Libraries.
     * @param {LibraryDeleteManyArgs} args - Arguments to filter Libraries to delete.
     * @example
     * // Delete a few Libraries
     * const { count } = await prisma.library.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LibraryDeleteManyArgs>(args?: SelectSubset<T, LibraryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Libraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Libraries
     * const library = await prisma.library.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LibraryUpdateManyArgs>(args: SelectSubset<T, LibraryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Library.
     * @param {LibraryUpsertArgs} args - Arguments to update or create a Library.
     * @example
     * // Update or create a Library
     * const library = await prisma.library.upsert({
     *   create: {
     *     // ... data to create a Library
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Library we want to update
     *   }
     * })
     */
    upsert<T extends LibraryUpsertArgs>(args: SelectSubset<T, LibraryUpsertArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Libraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCountArgs} args - Arguments to filter Libraries to count.
     * @example
     * // Count the number of Libraries
     * const count = await prisma.library.count({
     *   where: {
     *     // ... the filter for the Libraries we want to count
     *   }
     * })
    **/
    count<T extends LibraryCountArgs>(
      args?: Subset<T, LibraryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Library.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryAggregateArgs>(args: Subset<T, LibraryAggregateArgs>): Prisma.PrismaPromise<GetLibraryAggregateType<T>>

    /**
     * Group by Library.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryGroupByArgs['orderBy'] }
        : { orderBy?: LibraryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Library model
   */
  readonly fields: LibraryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Library.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LibraryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    members<T extends Library$membersArgs<ExtArgs> = {}>(args?: Subset<T, Library$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Library model
   */ 
  interface LibraryFieldRefs {
    readonly id: FieldRef<"Library", 'String'>
    readonly name: FieldRef<"Library", 'String'>
    readonly description: FieldRef<"Library", 'String'>
    readonly userId: FieldRef<"Library", 'String'>
    readonly sucursalId: FieldRef<"Library", 'String'>
    readonly createdAt: FieldRef<"Library", 'DateTime'>
    readonly updatedAt: FieldRef<"Library", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Library findUnique
   */
  export type LibraryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter, which Library to fetch.
     */
    where: LibraryWhereUniqueInput
  }

  /**
   * Library findUniqueOrThrow
   */
  export type LibraryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter, which Library to fetch.
     */
    where: LibraryWhereUniqueInput
  }

  /**
   * Library findFirst
   */
  export type LibraryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter, which Library to fetch.
     */
    where?: LibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libraries to fetch.
     */
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libraries.
     */
    cursor?: LibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libraries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libraries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libraries.
     */
    distinct?: LibraryScalarFieldEnum | LibraryScalarFieldEnum[]
  }

  /**
   * Library findFirstOrThrow
   */
  export type LibraryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter, which Library to fetch.
     */
    where?: LibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libraries to fetch.
     */
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libraries.
     */
    cursor?: LibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libraries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libraries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libraries.
     */
    distinct?: LibraryScalarFieldEnum | LibraryScalarFieldEnum[]
  }

  /**
   * Library findMany
   */
  export type LibraryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter, which Libraries to fetch.
     */
    where?: LibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libraries to fetch.
     */
    orderBy?: LibraryOrderByWithRelationInput | LibraryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Libraries.
     */
    cursor?: LibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libraries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libraries.
     */
    skip?: number
    distinct?: LibraryScalarFieldEnum | LibraryScalarFieldEnum[]
  }

  /**
   * Library create
   */
  export type LibraryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * The data needed to create a Library.
     */
    data: XOR<LibraryCreateInput, LibraryUncheckedCreateInput>
  }

  /**
   * Library createMany
   */
  export type LibraryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Libraries.
     */
    data: LibraryCreateManyInput | LibraryCreateManyInput[]
  }

  /**
   * Library createManyAndReturn
   */
  export type LibraryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Libraries.
     */
    data: LibraryCreateManyInput | LibraryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Library update
   */
  export type LibraryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * The data needed to update a Library.
     */
    data: XOR<LibraryUpdateInput, LibraryUncheckedUpdateInput>
    /**
     * Choose, which Library to update.
     */
    where: LibraryWhereUniqueInput
  }

  /**
   * Library updateMany
   */
  export type LibraryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Libraries.
     */
    data: XOR<LibraryUpdateManyMutationInput, LibraryUncheckedUpdateManyInput>
    /**
     * Filter which Libraries to update
     */
    where?: LibraryWhereInput
  }

  /**
   * Library upsert
   */
  export type LibraryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * The filter to search for the Library to update in case it exists.
     */
    where: LibraryWhereUniqueInput
    /**
     * In case the Library found by the `where` argument doesn't exist, create a new Library with this data.
     */
    create: XOR<LibraryCreateInput, LibraryUncheckedCreateInput>
    /**
     * In case the Library was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryUpdateInput, LibraryUncheckedUpdateInput>
  }

  /**
   * Library delete
   */
  export type LibraryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
    /**
     * Filter which Library to delete.
     */
    where: LibraryWhereUniqueInput
  }

  /**
   * Library deleteMany
   */
  export type LibraryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Libraries to delete
     */
    where?: LibraryWhereInput
  }

  /**
   * Library.members
   */
  export type Library$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    where?: LibraryMemberWhereInput
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    cursor?: LibraryMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibraryMemberScalarFieldEnum | LibraryMemberScalarFieldEnum[]
  }

  /**
   * Library without action
   */
  export type LibraryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Library
     */
    select?: LibrarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryInclude<ExtArgs> | null
  }


  /**
   * Model LibraryMember
   */

  export type AggregateLibraryMember = {
    _count: LibraryMemberCountAggregateOutputType | null
    _min: LibraryMemberMinAggregateOutputType | null
    _max: LibraryMemberMaxAggregateOutputType | null
  }

  export type LibraryMemberMinAggregateOutputType = {
    id: string | null
    libraryId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LibraryMemberMaxAggregateOutputType = {
    id: string | null
    libraryId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LibraryMemberCountAggregateOutputType = {
    id: number
    libraryId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LibraryMemberMinAggregateInputType = {
    id?: true
    libraryId?: true
    userId?: true
    createdAt?: true
  }

  export type LibraryMemberMaxAggregateInputType = {
    id?: true
    libraryId?: true
    userId?: true
    createdAt?: true
  }

  export type LibraryMemberCountAggregateInputType = {
    id?: true
    libraryId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LibraryMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LibraryMember to aggregate.
     */
    where?: LibraryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryMembers to fetch.
     */
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryMembers
    **/
    _count?: true | LibraryMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryMemberMaxAggregateInputType
  }

  export type GetLibraryMemberAggregateType<T extends LibraryMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryMember[P]>
      : GetScalarType<T[P], AggregateLibraryMember[P]>
  }




  export type LibraryMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryMemberWhereInput
    orderBy?: LibraryMemberOrderByWithAggregationInput | LibraryMemberOrderByWithAggregationInput[]
    by: LibraryMemberScalarFieldEnum[] | LibraryMemberScalarFieldEnum
    having?: LibraryMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryMemberCountAggregateInputType | true
    _min?: LibraryMemberMinAggregateInputType
    _max?: LibraryMemberMaxAggregateInputType
  }

  export type LibraryMemberGroupByOutputType = {
    id: string
    libraryId: string
    userId: string
    createdAt: Date
    _count: LibraryMemberCountAggregateOutputType | null
    _min: LibraryMemberMinAggregateOutputType | null
    _max: LibraryMemberMaxAggregateOutputType | null
  }

  type GetLibraryMemberGroupByPayload<T extends LibraryMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LibraryMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryMemberGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryMemberGroupByOutputType[P]>
        }
      >
    >


  export type LibraryMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libraryId?: boolean
    userId?: boolean
    createdAt?: boolean
    library?: boolean | LibraryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libraryMember"]>

  export type LibraryMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libraryId?: boolean
    userId?: boolean
    createdAt?: boolean
    library?: boolean | LibraryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libraryMember"]>

  export type LibraryMemberSelectScalar = {
    id?: boolean
    libraryId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LibraryMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    library?: boolean | LibraryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LibraryMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    library?: boolean | LibraryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LibraryMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LibraryMember"
    objects: {
      library: Prisma.$LibraryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      libraryId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["libraryMember"]>
    composites: {}
  }

  type LibraryMemberGetPayload<S extends boolean | null | undefined | LibraryMemberDefaultArgs> = $Result.GetResult<Prisma.$LibraryMemberPayload, S>

  type LibraryMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LibraryMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LibraryMemberCountAggregateInputType | true
    }

  export interface LibraryMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LibraryMember'], meta: { name: 'LibraryMember' } }
    /**
     * Find zero or one LibraryMember that matches the filter.
     * @param {LibraryMemberFindUniqueArgs} args - Arguments to find a LibraryMember
     * @example
     * // Get one LibraryMember
     * const libraryMember = await prisma.libraryMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LibraryMemberFindUniqueArgs>(args: SelectSubset<T, LibraryMemberFindUniqueArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LibraryMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LibraryMemberFindUniqueOrThrowArgs} args - Arguments to find a LibraryMember
     * @example
     * // Get one LibraryMember
     * const libraryMember = await prisma.libraryMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LibraryMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, LibraryMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LibraryMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberFindFirstArgs} args - Arguments to find a LibraryMember
     * @example
     * // Get one LibraryMember
     * const libraryMember = await prisma.libraryMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LibraryMemberFindFirstArgs>(args?: SelectSubset<T, LibraryMemberFindFirstArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LibraryMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberFindFirstOrThrowArgs} args - Arguments to find a LibraryMember
     * @example
     * // Get one LibraryMember
     * const libraryMember = await prisma.libraryMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LibraryMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, LibraryMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LibraryMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryMembers
     * const libraryMembers = await prisma.libraryMember.findMany()
     * 
     * // Get first 10 LibraryMembers
     * const libraryMembers = await prisma.libraryMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryMemberWithIdOnly = await prisma.libraryMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LibraryMemberFindManyArgs>(args?: SelectSubset<T, LibraryMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LibraryMember.
     * @param {LibraryMemberCreateArgs} args - Arguments to create a LibraryMember.
     * @example
     * // Create one LibraryMember
     * const LibraryMember = await prisma.libraryMember.create({
     *   data: {
     *     // ... data to create a LibraryMember
     *   }
     * })
     * 
     */
    create<T extends LibraryMemberCreateArgs>(args: SelectSubset<T, LibraryMemberCreateArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LibraryMembers.
     * @param {LibraryMemberCreateManyArgs} args - Arguments to create many LibraryMembers.
     * @example
     * // Create many LibraryMembers
     * const libraryMember = await prisma.libraryMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LibraryMemberCreateManyArgs>(args?: SelectSubset<T, LibraryMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LibraryMembers and returns the data saved in the database.
     * @param {LibraryMemberCreateManyAndReturnArgs} args - Arguments to create many LibraryMembers.
     * @example
     * // Create many LibraryMembers
     * const libraryMember = await prisma.libraryMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LibraryMembers and only return the `id`
     * const libraryMemberWithIdOnly = await prisma.libraryMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LibraryMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, LibraryMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LibraryMember.
     * @param {LibraryMemberDeleteArgs} args - Arguments to delete one LibraryMember.
     * @example
     * // Delete one LibraryMember
     * const LibraryMember = await prisma.libraryMember.delete({
     *   where: {
     *     // ... filter to delete one LibraryMember
     *   }
     * })
     * 
     */
    delete<T extends LibraryMemberDeleteArgs>(args: SelectSubset<T, LibraryMemberDeleteArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LibraryMember.
     * @param {LibraryMemberUpdateArgs} args - Arguments to update one LibraryMember.
     * @example
     * // Update one LibraryMember
     * const libraryMember = await prisma.libraryMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LibraryMemberUpdateArgs>(args: SelectSubset<T, LibraryMemberUpdateArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LibraryMembers.
     * @param {LibraryMemberDeleteManyArgs} args - Arguments to filter LibraryMembers to delete.
     * @example
     * // Delete a few LibraryMembers
     * const { count } = await prisma.libraryMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LibraryMemberDeleteManyArgs>(args?: SelectSubset<T, LibraryMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryMembers
     * const libraryMember = await prisma.libraryMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LibraryMemberUpdateManyArgs>(args: SelectSubset<T, LibraryMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryMember.
     * @param {LibraryMemberUpsertArgs} args - Arguments to update or create a LibraryMember.
     * @example
     * // Update or create a LibraryMember
     * const libraryMember = await prisma.libraryMember.upsert({
     *   create: {
     *     // ... data to create a LibraryMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryMember we want to update
     *   }
     * })
     */
    upsert<T extends LibraryMemberUpsertArgs>(args: SelectSubset<T, LibraryMemberUpsertArgs<ExtArgs>>): Prisma__LibraryMemberClient<$Result.GetResult<Prisma.$LibraryMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LibraryMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberCountArgs} args - Arguments to filter LibraryMembers to count.
     * @example
     * // Count the number of LibraryMembers
     * const count = await prisma.libraryMember.count({
     *   where: {
     *     // ... the filter for the LibraryMembers we want to count
     *   }
     * })
    **/
    count<T extends LibraryMemberCountArgs>(
      args?: Subset<T, LibraryMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryMemberAggregateArgs>(args: Subset<T, LibraryMemberAggregateArgs>): Prisma.PrismaPromise<GetLibraryMemberAggregateType<T>>

    /**
     * Group by LibraryMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryMemberGroupByArgs['orderBy'] }
        : { orderBy?: LibraryMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LibraryMember model
   */
  readonly fields: LibraryMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LibraryMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    library<T extends LibraryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LibraryDefaultArgs<ExtArgs>>): Prisma__LibraryClient<$Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LibraryMember model
   */ 
  interface LibraryMemberFieldRefs {
    readonly id: FieldRef<"LibraryMember", 'String'>
    readonly libraryId: FieldRef<"LibraryMember", 'String'>
    readonly userId: FieldRef<"LibraryMember", 'String'>
    readonly createdAt: FieldRef<"LibraryMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LibraryMember findUnique
   */
  export type LibraryMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter, which LibraryMember to fetch.
     */
    where: LibraryMemberWhereUniqueInput
  }

  /**
   * LibraryMember findUniqueOrThrow
   */
  export type LibraryMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter, which LibraryMember to fetch.
     */
    where: LibraryMemberWhereUniqueInput
  }

  /**
   * LibraryMember findFirst
   */
  export type LibraryMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter, which LibraryMember to fetch.
     */
    where?: LibraryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryMembers to fetch.
     */
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryMembers.
     */
    cursor?: LibraryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryMembers.
     */
    distinct?: LibraryMemberScalarFieldEnum | LibraryMemberScalarFieldEnum[]
  }

  /**
   * LibraryMember findFirstOrThrow
   */
  export type LibraryMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter, which LibraryMember to fetch.
     */
    where?: LibraryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryMembers to fetch.
     */
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryMembers.
     */
    cursor?: LibraryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryMembers.
     */
    distinct?: LibraryMemberScalarFieldEnum | LibraryMemberScalarFieldEnum[]
  }

  /**
   * LibraryMember findMany
   */
  export type LibraryMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter, which LibraryMembers to fetch.
     */
    where?: LibraryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryMembers to fetch.
     */
    orderBy?: LibraryMemberOrderByWithRelationInput | LibraryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryMembers.
     */
    cursor?: LibraryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryMembers.
     */
    skip?: number
    distinct?: LibraryMemberScalarFieldEnum | LibraryMemberScalarFieldEnum[]
  }

  /**
   * LibraryMember create
   */
  export type LibraryMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a LibraryMember.
     */
    data: XOR<LibraryMemberCreateInput, LibraryMemberUncheckedCreateInput>
  }

  /**
   * LibraryMember createMany
   */
  export type LibraryMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LibraryMembers.
     */
    data: LibraryMemberCreateManyInput | LibraryMemberCreateManyInput[]
  }

  /**
   * LibraryMember createManyAndReturn
   */
  export type LibraryMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LibraryMembers.
     */
    data: LibraryMemberCreateManyInput | LibraryMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LibraryMember update
   */
  export type LibraryMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a LibraryMember.
     */
    data: XOR<LibraryMemberUpdateInput, LibraryMemberUncheckedUpdateInput>
    /**
     * Choose, which LibraryMember to update.
     */
    where: LibraryMemberWhereUniqueInput
  }

  /**
   * LibraryMember updateMany
   */
  export type LibraryMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LibraryMembers.
     */
    data: XOR<LibraryMemberUpdateManyMutationInput, LibraryMemberUncheckedUpdateManyInput>
    /**
     * Filter which LibraryMembers to update
     */
    where?: LibraryMemberWhereInput
  }

  /**
   * LibraryMember upsert
   */
  export type LibraryMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the LibraryMember to update in case it exists.
     */
    where: LibraryMemberWhereUniqueInput
    /**
     * In case the LibraryMember found by the `where` argument doesn't exist, create a new LibraryMember with this data.
     */
    create: XOR<LibraryMemberCreateInput, LibraryMemberUncheckedCreateInput>
    /**
     * In case the LibraryMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryMemberUpdateInput, LibraryMemberUncheckedUpdateInput>
  }

  /**
   * LibraryMember delete
   */
  export type LibraryMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
    /**
     * Filter which LibraryMember to delete.
     */
    where: LibraryMemberWhereUniqueInput
  }

  /**
   * LibraryMember deleteMany
   */
  export type LibraryMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LibraryMembers to delete
     */
    where?: LibraryMemberWhereInput
  }

  /**
   * LibraryMember without action
   */
  export type LibraryMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryMember
     */
    select?: LibraryMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryMemberInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    progress: number | null
  }

  export type GoalSumAggregateOutputType = {
    progress: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    priority: string | null
    progress: number | null
    departmentId: string | null
    createdById: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    priority: string | null
    progress: number | null
    departmentId: string | null
    createdById: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    status: number
    priority: number
    progress: number
    departmentId: number
    createdById: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    progress?: true
  }

  export type GoalSumAggregateInputType = {
    progress?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    priority?: true
    progress?: true
    departmentId?: true
    createdById?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    priority?: true
    progress?: true
    departmentId?: true
    createdById?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    priority?: true
    progress?: true
    departmentId?: true
    createdById?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    status: string
    priority: string
    progress: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    departmentId?: boolean
    createdById?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    assignments?: boolean | Goal$assignmentsArgs<ExtArgs>
    reports?: boolean | Goal$reportsArgs<ExtArgs>
    generalReports?: boolean | Goal$generalReportsArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    departmentId?: boolean
    createdById?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    departmentId?: boolean
    createdById?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    assignments?: boolean | Goal$assignmentsArgs<ExtArgs>
    reports?: boolean | Goal$reportsArgs<ExtArgs>
    generalReports?: boolean | Goal$generalReportsArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      assignments: Prisma.$GoalAssignmentPayload<ExtArgs>[]
      reports: Prisma.$GoalReportPayload<ExtArgs>[]
      generalReports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      status: string
      priority: string
      progress: number
      departmentId: string
      createdById: string
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignments<T extends Goal$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Goal$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Goal$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Goal$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findMany"> | Null>
    generalReports<T extends Goal$generalReportsArgs<ExtArgs> = {}>(args?: Subset<T, Goal$generalReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */ 
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly name: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly startDate: FieldRef<"Goal", 'DateTime'>
    readonly endDate: FieldRef<"Goal", 'DateTime'>
    readonly status: FieldRef<"Goal", 'String'>
    readonly priority: FieldRef<"Goal", 'String'>
    readonly progress: FieldRef<"Goal", 'Int'>
    readonly departmentId: FieldRef<"Goal", 'String'>
    readonly createdById: FieldRef<"Goal", 'String'>
    readonly sucursalId: FieldRef<"Goal", 'String'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
  }

  /**
   * Goal.assignments
   */
  export type Goal$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    where?: GoalAssignmentWhereInput
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    cursor?: GoalAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalAssignmentScalarFieldEnum | GoalAssignmentScalarFieldEnum[]
  }

  /**
   * Goal.reports
   */
  export type Goal$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    where?: GoalReportWhereInput
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    cursor?: GoalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReportScalarFieldEnum | GoalReportScalarFieldEnum[]
  }

  /**
   * Goal.generalReports
   */
  export type Goal$generalReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model GoalReport
   */

  export type AggregateGoalReport = {
    _count: GoalReportCountAggregateOutputType | null
    _min: GoalReportMinAggregateOutputType | null
    _max: GoalReportMaxAggregateOutputType | null
  }

  export type GoalReportMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    goalId: string | null
    submittedById: string | null
    isCompletion: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalReportMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    goalId: string | null
    submittedById: string | null
    isCompletion: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalReportCountAggregateOutputType = {
    id: number
    title: number
    description: number
    goalId: number
    submittedById: number
    isCompletion: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoalReportMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    submittedById?: true
    isCompletion?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalReportMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    submittedById?: true
    isCompletion?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalReportCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    submittedById?: true
    isCompletion?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoalReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReport to aggregate.
     */
    where?: GoalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReports to fetch.
     */
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalReports
    **/
    _count?: true | GoalReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalReportMaxAggregateInputType
  }

  export type GetGoalReportAggregateType<T extends GoalReportAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalReport[P]>
      : GetScalarType<T[P], AggregateGoalReport[P]>
  }




  export type GoalReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportWhereInput
    orderBy?: GoalReportOrderByWithAggregationInput | GoalReportOrderByWithAggregationInput[]
    by: GoalReportScalarFieldEnum[] | GoalReportScalarFieldEnum
    having?: GoalReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalReportCountAggregateInputType | true
    _min?: GoalReportMinAggregateInputType
    _max?: GoalReportMaxAggregateInputType
  }

  export type GoalReportGroupByOutputType = {
    id: string
    title: string
    description: string
    goalId: string
    submittedById: string
    isCompletion: boolean
    status: string
    createdAt: Date
    updatedAt: Date
    _count: GoalReportCountAggregateOutputType | null
    _min: GoalReportMinAggregateOutputType | null
    _max: GoalReportMaxAggregateOutputType | null
  }

  type GetGoalReportGroupByPayload<T extends GoalReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalReportGroupByOutputType[P]>
            : GetScalarType<T[P], GoalReportGroupByOutputType[P]>
        }
      >
    >


  export type GoalReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    submittedById?: boolean
    isCompletion?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | GoalReport$filesArgs<ExtArgs>
    _count?: boolean | GoalReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReport"]>

  export type GoalReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    submittedById?: boolean
    isCompletion?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReport"]>

  export type GoalReportSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    submittedById?: boolean
    isCompletion?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoalReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | GoalReport$filesArgs<ExtArgs>
    _count?: boolean | GoalReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoalReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalReport"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs>
      submittedBy: Prisma.$UserPayload<ExtArgs>
      files: Prisma.$GoalReportFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      goalId: string
      submittedById: string
      isCompletion: boolean
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["goalReport"]>
    composites: {}
  }

  type GoalReportGetPayload<S extends boolean | null | undefined | GoalReportDefaultArgs> = $Result.GetResult<Prisma.$GoalReportPayload, S>

  type GoalReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalReportCountAggregateInputType | true
    }

  export interface GoalReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalReport'], meta: { name: 'GoalReport' } }
    /**
     * Find zero or one GoalReport that matches the filter.
     * @param {GoalReportFindUniqueArgs} args - Arguments to find a GoalReport
     * @example
     * // Get one GoalReport
     * const goalReport = await prisma.goalReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalReportFindUniqueArgs>(args: SelectSubset<T, GoalReportFindUniqueArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GoalReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalReportFindUniqueOrThrowArgs} args - Arguments to find a GoalReport
     * @example
     * // Get one GoalReport
     * const goalReport = await prisma.goalReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalReportFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GoalReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFindFirstArgs} args - Arguments to find a GoalReport
     * @example
     * // Get one GoalReport
     * const goalReport = await prisma.goalReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalReportFindFirstArgs>(args?: SelectSubset<T, GoalReportFindFirstArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GoalReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFindFirstOrThrowArgs} args - Arguments to find a GoalReport
     * @example
     * // Get one GoalReport
     * const goalReport = await prisma.goalReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalReportFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GoalReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalReports
     * const goalReports = await prisma.goalReport.findMany()
     * 
     * // Get first 10 GoalReports
     * const goalReports = await prisma.goalReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalReportWithIdOnly = await prisma.goalReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalReportFindManyArgs>(args?: SelectSubset<T, GoalReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GoalReport.
     * @param {GoalReportCreateArgs} args - Arguments to create a GoalReport.
     * @example
     * // Create one GoalReport
     * const GoalReport = await prisma.goalReport.create({
     *   data: {
     *     // ... data to create a GoalReport
     *   }
     * })
     * 
     */
    create<T extends GoalReportCreateArgs>(args: SelectSubset<T, GoalReportCreateArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GoalReports.
     * @param {GoalReportCreateManyArgs} args - Arguments to create many GoalReports.
     * @example
     * // Create many GoalReports
     * const goalReport = await prisma.goalReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalReportCreateManyArgs>(args?: SelectSubset<T, GoalReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalReports and returns the data saved in the database.
     * @param {GoalReportCreateManyAndReturnArgs} args - Arguments to create many GoalReports.
     * @example
     * // Create many GoalReports
     * const goalReport = await prisma.goalReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalReports and only return the `id`
     * const goalReportWithIdOnly = await prisma.goalReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalReportCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GoalReport.
     * @param {GoalReportDeleteArgs} args - Arguments to delete one GoalReport.
     * @example
     * // Delete one GoalReport
     * const GoalReport = await prisma.goalReport.delete({
     *   where: {
     *     // ... filter to delete one GoalReport
     *   }
     * })
     * 
     */
    delete<T extends GoalReportDeleteArgs>(args: SelectSubset<T, GoalReportDeleteArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GoalReport.
     * @param {GoalReportUpdateArgs} args - Arguments to update one GoalReport.
     * @example
     * // Update one GoalReport
     * const goalReport = await prisma.goalReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalReportUpdateArgs>(args: SelectSubset<T, GoalReportUpdateArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GoalReports.
     * @param {GoalReportDeleteManyArgs} args - Arguments to filter GoalReports to delete.
     * @example
     * // Delete a few GoalReports
     * const { count } = await prisma.goalReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalReportDeleteManyArgs>(args?: SelectSubset<T, GoalReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalReports
     * const goalReport = await prisma.goalReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalReportUpdateManyArgs>(args: SelectSubset<T, GoalReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GoalReport.
     * @param {GoalReportUpsertArgs} args - Arguments to update or create a GoalReport.
     * @example
     * // Update or create a GoalReport
     * const goalReport = await prisma.goalReport.upsert({
     *   create: {
     *     // ... data to create a GoalReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalReport we want to update
     *   }
     * })
     */
    upsert<T extends GoalReportUpsertArgs>(args: SelectSubset<T, GoalReportUpsertArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GoalReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportCountArgs} args - Arguments to filter GoalReports to count.
     * @example
     * // Count the number of GoalReports
     * const count = await prisma.goalReport.count({
     *   where: {
     *     // ... the filter for the GoalReports we want to count
     *   }
     * })
    **/
    count<T extends GoalReportCountArgs>(
      args?: Subset<T, GoalReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalReportAggregateArgs>(args: Subset<T, GoalReportAggregateArgs>): Prisma.PrismaPromise<GetGoalReportAggregateType<T>>

    /**
     * Group by GoalReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalReportGroupByArgs['orderBy'] }
        : { orderBy?: GoalReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalReport model
   */
  readonly fields: GoalReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    submittedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    files<T extends GoalReport$filesArgs<ExtArgs> = {}>(args?: Subset<T, GoalReport$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalReport model
   */ 
  interface GoalReportFieldRefs {
    readonly id: FieldRef<"GoalReport", 'String'>
    readonly title: FieldRef<"GoalReport", 'String'>
    readonly description: FieldRef<"GoalReport", 'String'>
    readonly goalId: FieldRef<"GoalReport", 'String'>
    readonly submittedById: FieldRef<"GoalReport", 'String'>
    readonly isCompletion: FieldRef<"GoalReport", 'Boolean'>
    readonly status: FieldRef<"GoalReport", 'String'>
    readonly createdAt: FieldRef<"GoalReport", 'DateTime'>
    readonly updatedAt: FieldRef<"GoalReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GoalReport findUnique
   */
  export type GoalReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter, which GoalReport to fetch.
     */
    where: GoalReportWhereUniqueInput
  }

  /**
   * GoalReport findUniqueOrThrow
   */
  export type GoalReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter, which GoalReport to fetch.
     */
    where: GoalReportWhereUniqueInput
  }

  /**
   * GoalReport findFirst
   */
  export type GoalReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter, which GoalReport to fetch.
     */
    where?: GoalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReports to fetch.
     */
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReports.
     */
    cursor?: GoalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReports.
     */
    distinct?: GoalReportScalarFieldEnum | GoalReportScalarFieldEnum[]
  }

  /**
   * GoalReport findFirstOrThrow
   */
  export type GoalReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter, which GoalReport to fetch.
     */
    where?: GoalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReports to fetch.
     */
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReports.
     */
    cursor?: GoalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReports.
     */
    distinct?: GoalReportScalarFieldEnum | GoalReportScalarFieldEnum[]
  }

  /**
   * GoalReport findMany
   */
  export type GoalReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter, which GoalReports to fetch.
     */
    where?: GoalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReports to fetch.
     */
    orderBy?: GoalReportOrderByWithRelationInput | GoalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalReports.
     */
    cursor?: GoalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReports.
     */
    skip?: number
    distinct?: GoalReportScalarFieldEnum | GoalReportScalarFieldEnum[]
  }

  /**
   * GoalReport create
   */
  export type GoalReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * The data needed to create a GoalReport.
     */
    data: XOR<GoalReportCreateInput, GoalReportUncheckedCreateInput>
  }

  /**
   * GoalReport createMany
   */
  export type GoalReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalReports.
     */
    data: GoalReportCreateManyInput | GoalReportCreateManyInput[]
  }

  /**
   * GoalReport createManyAndReturn
   */
  export type GoalReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GoalReports.
     */
    data: GoalReportCreateManyInput | GoalReportCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalReport update
   */
  export type GoalReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * The data needed to update a GoalReport.
     */
    data: XOR<GoalReportUpdateInput, GoalReportUncheckedUpdateInput>
    /**
     * Choose, which GoalReport to update.
     */
    where: GoalReportWhereUniqueInput
  }

  /**
   * GoalReport updateMany
   */
  export type GoalReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalReports.
     */
    data: XOR<GoalReportUpdateManyMutationInput, GoalReportUncheckedUpdateManyInput>
    /**
     * Filter which GoalReports to update
     */
    where?: GoalReportWhereInput
  }

  /**
   * GoalReport upsert
   */
  export type GoalReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * The filter to search for the GoalReport to update in case it exists.
     */
    where: GoalReportWhereUniqueInput
    /**
     * In case the GoalReport found by the `where` argument doesn't exist, create a new GoalReport with this data.
     */
    create: XOR<GoalReportCreateInput, GoalReportUncheckedCreateInput>
    /**
     * In case the GoalReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalReportUpdateInput, GoalReportUncheckedUpdateInput>
  }

  /**
   * GoalReport delete
   */
  export type GoalReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
    /**
     * Filter which GoalReport to delete.
     */
    where: GoalReportWhereUniqueInput
  }

  /**
   * GoalReport deleteMany
   */
  export type GoalReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReports to delete
     */
    where?: GoalReportWhereInput
  }

  /**
   * GoalReport.files
   */
  export type GoalReport$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    where?: GoalReportFileWhereInput
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    cursor?: GoalReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalReportFileScalarFieldEnum | GoalReportFileScalarFieldEnum[]
  }

  /**
   * GoalReport without action
   */
  export type GoalReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReport
     */
    select?: GoalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportInclude<ExtArgs> | null
  }


  /**
   * Model GoalReportFile
   */

  export type AggregateGoalReportFile = {
    _count: GoalReportFileCountAggregateOutputType | null
    _min: GoalReportFileMinAggregateOutputType | null
    _max: GoalReportFileMaxAggregateOutputType | null
  }

  export type GoalReportFileMinAggregateOutputType = {
    id: string | null
    goalReportId: string | null
    fileId: string | null
  }

  export type GoalReportFileMaxAggregateOutputType = {
    id: string | null
    goalReportId: string | null
    fileId: string | null
  }

  export type GoalReportFileCountAggregateOutputType = {
    id: number
    goalReportId: number
    fileId: number
    _all: number
  }


  export type GoalReportFileMinAggregateInputType = {
    id?: true
    goalReportId?: true
    fileId?: true
  }

  export type GoalReportFileMaxAggregateInputType = {
    id?: true
    goalReportId?: true
    fileId?: true
  }

  export type GoalReportFileCountAggregateInputType = {
    id?: true
    goalReportId?: true
    fileId?: true
    _all?: true
  }

  export type GoalReportFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReportFile to aggregate.
     */
    where?: GoalReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReportFiles to fetch.
     */
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalReportFiles
    **/
    _count?: true | GoalReportFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalReportFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalReportFileMaxAggregateInputType
  }

  export type GetGoalReportFileAggregateType<T extends GoalReportFileAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalReportFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalReportFile[P]>
      : GetScalarType<T[P], AggregateGoalReportFile[P]>
  }




  export type GoalReportFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalReportFileWhereInput
    orderBy?: GoalReportFileOrderByWithAggregationInput | GoalReportFileOrderByWithAggregationInput[]
    by: GoalReportFileScalarFieldEnum[] | GoalReportFileScalarFieldEnum
    having?: GoalReportFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalReportFileCountAggregateInputType | true
    _min?: GoalReportFileMinAggregateInputType
    _max?: GoalReportFileMaxAggregateInputType
  }

  export type GoalReportFileGroupByOutputType = {
    id: string
    goalReportId: string
    fileId: string
    _count: GoalReportFileCountAggregateOutputType | null
    _min: GoalReportFileMinAggregateOutputType | null
    _max: GoalReportFileMaxAggregateOutputType | null
  }

  type GetGoalReportFileGroupByPayload<T extends GoalReportFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalReportFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalReportFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalReportFileGroupByOutputType[P]>
            : GetScalarType<T[P], GoalReportFileGroupByOutputType[P]>
        }
      >
    >


  export type GoalReportFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalReportId?: boolean
    fileId?: boolean
    goalReport?: boolean | GoalReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReportFile"]>

  export type GoalReportFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalReportId?: boolean
    fileId?: boolean
    goalReport?: boolean | GoalReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalReportFile"]>

  export type GoalReportFileSelectScalar = {
    id?: boolean
    goalReportId?: boolean
    fileId?: boolean
  }

  export type GoalReportFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goalReport?: boolean | GoalReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }
  export type GoalReportFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goalReport?: boolean | GoalReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }

  export type $GoalReportFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalReportFile"
    objects: {
      goalReport: Prisma.$GoalReportPayload<ExtArgs>
      file: Prisma.$FilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      goalReportId: string
      fileId: string
    }, ExtArgs["result"]["goalReportFile"]>
    composites: {}
  }

  type GoalReportFileGetPayload<S extends boolean | null | undefined | GoalReportFileDefaultArgs> = $Result.GetResult<Prisma.$GoalReportFilePayload, S>

  type GoalReportFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalReportFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalReportFileCountAggregateInputType | true
    }

  export interface GoalReportFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalReportFile'], meta: { name: 'GoalReportFile' } }
    /**
     * Find zero or one GoalReportFile that matches the filter.
     * @param {GoalReportFileFindUniqueArgs} args - Arguments to find a GoalReportFile
     * @example
     * // Get one GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalReportFileFindUniqueArgs>(args: SelectSubset<T, GoalReportFileFindUniqueArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GoalReportFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalReportFileFindUniqueOrThrowArgs} args - Arguments to find a GoalReportFile
     * @example
     * // Get one GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalReportFileFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalReportFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GoalReportFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileFindFirstArgs} args - Arguments to find a GoalReportFile
     * @example
     * // Get one GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalReportFileFindFirstArgs>(args?: SelectSubset<T, GoalReportFileFindFirstArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GoalReportFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileFindFirstOrThrowArgs} args - Arguments to find a GoalReportFile
     * @example
     * // Get one GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalReportFileFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalReportFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GoalReportFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalReportFiles
     * const goalReportFiles = await prisma.goalReportFile.findMany()
     * 
     * // Get first 10 GoalReportFiles
     * const goalReportFiles = await prisma.goalReportFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalReportFileWithIdOnly = await prisma.goalReportFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalReportFileFindManyArgs>(args?: SelectSubset<T, GoalReportFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GoalReportFile.
     * @param {GoalReportFileCreateArgs} args - Arguments to create a GoalReportFile.
     * @example
     * // Create one GoalReportFile
     * const GoalReportFile = await prisma.goalReportFile.create({
     *   data: {
     *     // ... data to create a GoalReportFile
     *   }
     * })
     * 
     */
    create<T extends GoalReportFileCreateArgs>(args: SelectSubset<T, GoalReportFileCreateArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GoalReportFiles.
     * @param {GoalReportFileCreateManyArgs} args - Arguments to create many GoalReportFiles.
     * @example
     * // Create many GoalReportFiles
     * const goalReportFile = await prisma.goalReportFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalReportFileCreateManyArgs>(args?: SelectSubset<T, GoalReportFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalReportFiles and returns the data saved in the database.
     * @param {GoalReportFileCreateManyAndReturnArgs} args - Arguments to create many GoalReportFiles.
     * @example
     * // Create many GoalReportFiles
     * const goalReportFile = await prisma.goalReportFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalReportFiles and only return the `id`
     * const goalReportFileWithIdOnly = await prisma.goalReportFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalReportFileCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalReportFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GoalReportFile.
     * @param {GoalReportFileDeleteArgs} args - Arguments to delete one GoalReportFile.
     * @example
     * // Delete one GoalReportFile
     * const GoalReportFile = await prisma.goalReportFile.delete({
     *   where: {
     *     // ... filter to delete one GoalReportFile
     *   }
     * })
     * 
     */
    delete<T extends GoalReportFileDeleteArgs>(args: SelectSubset<T, GoalReportFileDeleteArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GoalReportFile.
     * @param {GoalReportFileUpdateArgs} args - Arguments to update one GoalReportFile.
     * @example
     * // Update one GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalReportFileUpdateArgs>(args: SelectSubset<T, GoalReportFileUpdateArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GoalReportFiles.
     * @param {GoalReportFileDeleteManyArgs} args - Arguments to filter GoalReportFiles to delete.
     * @example
     * // Delete a few GoalReportFiles
     * const { count } = await prisma.goalReportFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalReportFileDeleteManyArgs>(args?: SelectSubset<T, GoalReportFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalReportFiles
     * const goalReportFile = await prisma.goalReportFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalReportFileUpdateManyArgs>(args: SelectSubset<T, GoalReportFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GoalReportFile.
     * @param {GoalReportFileUpsertArgs} args - Arguments to update or create a GoalReportFile.
     * @example
     * // Update or create a GoalReportFile
     * const goalReportFile = await prisma.goalReportFile.upsert({
     *   create: {
     *     // ... data to create a GoalReportFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalReportFile we want to update
     *   }
     * })
     */
    upsert<T extends GoalReportFileUpsertArgs>(args: SelectSubset<T, GoalReportFileUpsertArgs<ExtArgs>>): Prisma__GoalReportFileClient<$Result.GetResult<Prisma.$GoalReportFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GoalReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileCountArgs} args - Arguments to filter GoalReportFiles to count.
     * @example
     * // Count the number of GoalReportFiles
     * const count = await prisma.goalReportFile.count({
     *   where: {
     *     // ... the filter for the GoalReportFiles we want to count
     *   }
     * })
    **/
    count<T extends GoalReportFileCountArgs>(
      args?: Subset<T, GoalReportFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalReportFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalReportFileAggregateArgs>(args: Subset<T, GoalReportFileAggregateArgs>): Prisma.PrismaPromise<GetGoalReportFileAggregateType<T>>

    /**
     * Group by GoalReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalReportFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalReportFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalReportFileGroupByArgs['orderBy'] }
        : { orderBy?: GoalReportFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalReportFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalReportFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalReportFile model
   */
  readonly fields: GoalReportFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalReportFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalReportFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goalReport<T extends GoalReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalReportDefaultArgs<ExtArgs>>): Prisma__GoalReportClient<$Result.GetResult<Prisma.$GoalReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    file<T extends FileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FileDefaultArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalReportFile model
   */ 
  interface GoalReportFileFieldRefs {
    readonly id: FieldRef<"GoalReportFile", 'String'>
    readonly goalReportId: FieldRef<"GoalReportFile", 'String'>
    readonly fileId: FieldRef<"GoalReportFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GoalReportFile findUnique
   */
  export type GoalReportFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GoalReportFile to fetch.
     */
    where: GoalReportFileWhereUniqueInput
  }

  /**
   * GoalReportFile findUniqueOrThrow
   */
  export type GoalReportFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GoalReportFile to fetch.
     */
    where: GoalReportFileWhereUniqueInput
  }

  /**
   * GoalReportFile findFirst
   */
  export type GoalReportFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GoalReportFile to fetch.
     */
    where?: GoalReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReportFiles to fetch.
     */
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReportFiles.
     */
    cursor?: GoalReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReportFiles.
     */
    distinct?: GoalReportFileScalarFieldEnum | GoalReportFileScalarFieldEnum[]
  }

  /**
   * GoalReportFile findFirstOrThrow
   */
  export type GoalReportFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GoalReportFile to fetch.
     */
    where?: GoalReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReportFiles to fetch.
     */
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalReportFiles.
     */
    cursor?: GoalReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalReportFiles.
     */
    distinct?: GoalReportFileScalarFieldEnum | GoalReportFileScalarFieldEnum[]
  }

  /**
   * GoalReportFile findMany
   */
  export type GoalReportFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GoalReportFiles to fetch.
     */
    where?: GoalReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalReportFiles to fetch.
     */
    orderBy?: GoalReportFileOrderByWithRelationInput | GoalReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalReportFiles.
     */
    cursor?: GoalReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalReportFiles.
     */
    skip?: number
    distinct?: GoalReportFileScalarFieldEnum | GoalReportFileScalarFieldEnum[]
  }

  /**
   * GoalReportFile create
   */
  export type GoalReportFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * The data needed to create a GoalReportFile.
     */
    data: XOR<GoalReportFileCreateInput, GoalReportFileUncheckedCreateInput>
  }

  /**
   * GoalReportFile createMany
   */
  export type GoalReportFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalReportFiles.
     */
    data: GoalReportFileCreateManyInput | GoalReportFileCreateManyInput[]
  }

  /**
   * GoalReportFile createManyAndReturn
   */
  export type GoalReportFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GoalReportFiles.
     */
    data: GoalReportFileCreateManyInput | GoalReportFileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalReportFile update
   */
  export type GoalReportFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * The data needed to update a GoalReportFile.
     */
    data: XOR<GoalReportFileUpdateInput, GoalReportFileUncheckedUpdateInput>
    /**
     * Choose, which GoalReportFile to update.
     */
    where: GoalReportFileWhereUniqueInput
  }

  /**
   * GoalReportFile updateMany
   */
  export type GoalReportFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalReportFiles.
     */
    data: XOR<GoalReportFileUpdateManyMutationInput, GoalReportFileUncheckedUpdateManyInput>
    /**
     * Filter which GoalReportFiles to update
     */
    where?: GoalReportFileWhereInput
  }

  /**
   * GoalReportFile upsert
   */
  export type GoalReportFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * The filter to search for the GoalReportFile to update in case it exists.
     */
    where: GoalReportFileWhereUniqueInput
    /**
     * In case the GoalReportFile found by the `where` argument doesn't exist, create a new GoalReportFile with this data.
     */
    create: XOR<GoalReportFileCreateInput, GoalReportFileUncheckedCreateInput>
    /**
     * In case the GoalReportFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalReportFileUpdateInput, GoalReportFileUncheckedUpdateInput>
  }

  /**
   * GoalReportFile delete
   */
  export type GoalReportFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
    /**
     * Filter which GoalReportFile to delete.
     */
    where: GoalReportFileWhereUniqueInput
  }

  /**
   * GoalReportFile deleteMany
   */
  export type GoalReportFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalReportFiles to delete
     */
    where?: GoalReportFileWhereInput
  }

  /**
   * GoalReportFile without action
   */
  export type GoalReportFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalReportFile
     */
    select?: GoalReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalReportFileInclude<ExtArgs> | null
  }


  /**
   * Model GoalAssignment
   */

  export type AggregateGoalAssignment = {
    _count: GoalAssignmentCountAggregateOutputType | null
    _min: GoalAssignmentMinAggregateOutputType | null
    _max: GoalAssignmentMaxAggregateOutputType | null
  }

  export type GoalAssignmentMinAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type GoalAssignmentMaxAggregateOutputType = {
    id: string | null
    goalId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type GoalAssignmentCountAggregateOutputType = {
    id: number
    goalId: number
    userId: number
    assignedAt: number
    _all: number
  }


  export type GoalAssignmentMinAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    assignedAt?: true
  }

  export type GoalAssignmentMaxAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    assignedAt?: true
  }

  export type GoalAssignmentCountAggregateInputType = {
    id?: true
    goalId?: true
    userId?: true
    assignedAt?: true
    _all?: true
  }

  export type GoalAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalAssignment to aggregate.
     */
    where?: GoalAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalAssignments to fetch.
     */
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalAssignments
    **/
    _count?: true | GoalAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalAssignmentMaxAggregateInputType
  }

  export type GetGoalAssignmentAggregateType<T extends GoalAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalAssignment[P]>
      : GetScalarType<T[P], AggregateGoalAssignment[P]>
  }




  export type GoalAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalAssignmentWhereInput
    orderBy?: GoalAssignmentOrderByWithAggregationInput | GoalAssignmentOrderByWithAggregationInput[]
    by: GoalAssignmentScalarFieldEnum[] | GoalAssignmentScalarFieldEnum
    having?: GoalAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalAssignmentCountAggregateInputType | true
    _min?: GoalAssignmentMinAggregateInputType
    _max?: GoalAssignmentMaxAggregateInputType
  }

  export type GoalAssignmentGroupByOutputType = {
    id: string
    goalId: string
    userId: string
    assignedAt: Date
    _count: GoalAssignmentCountAggregateOutputType | null
    _min: GoalAssignmentMinAggregateOutputType | null
    _max: GoalAssignmentMaxAggregateOutputType | null
  }

  type GetGoalAssignmentGroupByPayload<T extends GoalAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], GoalAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type GoalAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    assignedAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalAssignment"]>

  export type GoalAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goalId?: boolean
    userId?: boolean
    assignedAt?: boolean
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goalAssignment"]>

  export type GoalAssignmentSelectScalar = {
    id?: boolean
    goalId?: boolean
    userId?: boolean
    assignedAt?: boolean
  }

  export type GoalAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalAssignment"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      goalId: string
      userId: string
      assignedAt: Date
    }, ExtArgs["result"]["goalAssignment"]>
    composites: {}
  }

  type GoalAssignmentGetPayload<S extends boolean | null | undefined | GoalAssignmentDefaultArgs> = $Result.GetResult<Prisma.$GoalAssignmentPayload, S>

  type GoalAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalAssignmentCountAggregateInputType | true
    }

  export interface GoalAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalAssignment'], meta: { name: 'GoalAssignment' } }
    /**
     * Find zero or one GoalAssignment that matches the filter.
     * @param {GoalAssignmentFindUniqueArgs} args - Arguments to find a GoalAssignment
     * @example
     * // Get one GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalAssignmentFindUniqueArgs>(args: SelectSubset<T, GoalAssignmentFindUniqueArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GoalAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalAssignmentFindUniqueOrThrowArgs} args - Arguments to find a GoalAssignment
     * @example
     * // Get one GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GoalAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentFindFirstArgs} args - Arguments to find a GoalAssignment
     * @example
     * // Get one GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalAssignmentFindFirstArgs>(args?: SelectSubset<T, GoalAssignmentFindFirstArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GoalAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentFindFirstOrThrowArgs} args - Arguments to find a GoalAssignment
     * @example
     * // Get one GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GoalAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalAssignments
     * const goalAssignments = await prisma.goalAssignment.findMany()
     * 
     * // Get first 10 GoalAssignments
     * const goalAssignments = await prisma.goalAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalAssignmentWithIdOnly = await prisma.goalAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalAssignmentFindManyArgs>(args?: SelectSubset<T, GoalAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GoalAssignment.
     * @param {GoalAssignmentCreateArgs} args - Arguments to create a GoalAssignment.
     * @example
     * // Create one GoalAssignment
     * const GoalAssignment = await prisma.goalAssignment.create({
     *   data: {
     *     // ... data to create a GoalAssignment
     *   }
     * })
     * 
     */
    create<T extends GoalAssignmentCreateArgs>(args: SelectSubset<T, GoalAssignmentCreateArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GoalAssignments.
     * @param {GoalAssignmentCreateManyArgs} args - Arguments to create many GoalAssignments.
     * @example
     * // Create many GoalAssignments
     * const goalAssignment = await prisma.goalAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalAssignmentCreateManyArgs>(args?: SelectSubset<T, GoalAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalAssignments and returns the data saved in the database.
     * @param {GoalAssignmentCreateManyAndReturnArgs} args - Arguments to create many GoalAssignments.
     * @example
     * // Create many GoalAssignments
     * const goalAssignment = await prisma.goalAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalAssignments and only return the `id`
     * const goalAssignmentWithIdOnly = await prisma.goalAssignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GoalAssignment.
     * @param {GoalAssignmentDeleteArgs} args - Arguments to delete one GoalAssignment.
     * @example
     * // Delete one GoalAssignment
     * const GoalAssignment = await prisma.goalAssignment.delete({
     *   where: {
     *     // ... filter to delete one GoalAssignment
     *   }
     * })
     * 
     */
    delete<T extends GoalAssignmentDeleteArgs>(args: SelectSubset<T, GoalAssignmentDeleteArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GoalAssignment.
     * @param {GoalAssignmentUpdateArgs} args - Arguments to update one GoalAssignment.
     * @example
     * // Update one GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalAssignmentUpdateArgs>(args: SelectSubset<T, GoalAssignmentUpdateArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GoalAssignments.
     * @param {GoalAssignmentDeleteManyArgs} args - Arguments to filter GoalAssignments to delete.
     * @example
     * // Delete a few GoalAssignments
     * const { count } = await prisma.goalAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalAssignmentDeleteManyArgs>(args?: SelectSubset<T, GoalAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalAssignments
     * const goalAssignment = await prisma.goalAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalAssignmentUpdateManyArgs>(args: SelectSubset<T, GoalAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GoalAssignment.
     * @param {GoalAssignmentUpsertArgs} args - Arguments to update or create a GoalAssignment.
     * @example
     * // Update or create a GoalAssignment
     * const goalAssignment = await prisma.goalAssignment.upsert({
     *   create: {
     *     // ... data to create a GoalAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalAssignment we want to update
     *   }
     * })
     */
    upsert<T extends GoalAssignmentUpsertArgs>(args: SelectSubset<T, GoalAssignmentUpsertArgs<ExtArgs>>): Prisma__GoalAssignmentClient<$Result.GetResult<Prisma.$GoalAssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GoalAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentCountArgs} args - Arguments to filter GoalAssignments to count.
     * @example
     * // Count the number of GoalAssignments
     * const count = await prisma.goalAssignment.count({
     *   where: {
     *     // ... the filter for the GoalAssignments we want to count
     *   }
     * })
    **/
    count<T extends GoalAssignmentCountArgs>(
      args?: Subset<T, GoalAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAssignmentAggregateArgs>(args: Subset<T, GoalAssignmentAggregateArgs>): Prisma.PrismaPromise<GetGoalAssignmentAggregateType<T>>

    /**
     * Group by GoalAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: GoalAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalAssignment model
   */
  readonly fields: GoalAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalAssignment model
   */ 
  interface GoalAssignmentFieldRefs {
    readonly id: FieldRef<"GoalAssignment", 'String'>
    readonly goalId: FieldRef<"GoalAssignment", 'String'>
    readonly userId: FieldRef<"GoalAssignment", 'String'>
    readonly assignedAt: FieldRef<"GoalAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GoalAssignment findUnique
   */
  export type GoalAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GoalAssignment to fetch.
     */
    where: GoalAssignmentWhereUniqueInput
  }

  /**
   * GoalAssignment findUniqueOrThrow
   */
  export type GoalAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GoalAssignment to fetch.
     */
    where: GoalAssignmentWhereUniqueInput
  }

  /**
   * GoalAssignment findFirst
   */
  export type GoalAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GoalAssignment to fetch.
     */
    where?: GoalAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalAssignments to fetch.
     */
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalAssignments.
     */
    cursor?: GoalAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalAssignments.
     */
    distinct?: GoalAssignmentScalarFieldEnum | GoalAssignmentScalarFieldEnum[]
  }

  /**
   * GoalAssignment findFirstOrThrow
   */
  export type GoalAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GoalAssignment to fetch.
     */
    where?: GoalAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalAssignments to fetch.
     */
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalAssignments.
     */
    cursor?: GoalAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalAssignments.
     */
    distinct?: GoalAssignmentScalarFieldEnum | GoalAssignmentScalarFieldEnum[]
  }

  /**
   * GoalAssignment findMany
   */
  export type GoalAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GoalAssignments to fetch.
     */
    where?: GoalAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalAssignments to fetch.
     */
    orderBy?: GoalAssignmentOrderByWithRelationInput | GoalAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalAssignments.
     */
    cursor?: GoalAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalAssignments.
     */
    skip?: number
    distinct?: GoalAssignmentScalarFieldEnum | GoalAssignmentScalarFieldEnum[]
  }

  /**
   * GoalAssignment create
   */
  export type GoalAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a GoalAssignment.
     */
    data: XOR<GoalAssignmentCreateInput, GoalAssignmentUncheckedCreateInput>
  }

  /**
   * GoalAssignment createMany
   */
  export type GoalAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalAssignments.
     */
    data: GoalAssignmentCreateManyInput | GoalAssignmentCreateManyInput[]
  }

  /**
   * GoalAssignment createManyAndReturn
   */
  export type GoalAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GoalAssignments.
     */
    data: GoalAssignmentCreateManyInput | GoalAssignmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoalAssignment update
   */
  export type GoalAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a GoalAssignment.
     */
    data: XOR<GoalAssignmentUpdateInput, GoalAssignmentUncheckedUpdateInput>
    /**
     * Choose, which GoalAssignment to update.
     */
    where: GoalAssignmentWhereUniqueInput
  }

  /**
   * GoalAssignment updateMany
   */
  export type GoalAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalAssignments.
     */
    data: XOR<GoalAssignmentUpdateManyMutationInput, GoalAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which GoalAssignments to update
     */
    where?: GoalAssignmentWhereInput
  }

  /**
   * GoalAssignment upsert
   */
  export type GoalAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the GoalAssignment to update in case it exists.
     */
    where: GoalAssignmentWhereUniqueInput
    /**
     * In case the GoalAssignment found by the `where` argument doesn't exist, create a new GoalAssignment with this data.
     */
    create: XOR<GoalAssignmentCreateInput, GoalAssignmentUncheckedCreateInput>
    /**
     * In case the GoalAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalAssignmentUpdateInput, GoalAssignmentUncheckedUpdateInput>
  }

  /**
   * GoalAssignment delete
   */
  export type GoalAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
    /**
     * Filter which GoalAssignment to delete.
     */
    where: GoalAssignmentWhereUniqueInput
  }

  /**
   * GoalAssignment deleteMany
   */
  export type GoalAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalAssignments to delete
     */
    where?: GoalAssignmentWhereInput
  }

  /**
   * GoalAssignment without action
   */
  export type GoalAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalAssignment
     */
    select?: GoalAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    goalId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    goalId: string | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    title: number
    description: number
    goalId: number
    userId: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    goalId?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    title: string
    description: string | null
    goalId: string | null
    userId: string
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    goal?: boolean | Report$goalArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    files?: boolean | Report$filesArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    goal?: boolean | Report$goalArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    goalId?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | Report$goalArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    files?: boolean | Report$filesArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goal?: boolean | Report$goalArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      goal: Prisma.$GoalPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      files: Prisma.$ReportFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      goalId: string | null
      userId: string
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goal<T extends Report$goalArgs<ExtArgs> = {}>(args?: Subset<T, Report$goalArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    files<T extends Report$filesArgs<ExtArgs> = {}>(args?: Subset<T, Report$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly title: FieldRef<"Report", 'String'>
    readonly description: FieldRef<"Report", 'String'>
    readonly goalId: FieldRef<"Report", 'String'>
    readonly userId: FieldRef<"Report", 'String'>
    readonly sucursalId: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report.goal
   */
  export type Report$goalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
  }

  /**
   * Report.files
   */
  export type Report$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    where?: ReportFileWhereInput
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    cursor?: ReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model GeneralReport
   */

  export type AggregateGeneralReport = {
    _count: GeneralReportCountAggregateOutputType | null
    _min: GeneralReportMinAggregateOutputType | null
    _max: GeneralReportMaxAggregateOutputType | null
  }

  export type GeneralReportMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    status: string | null
    submittedById: string | null
    submittedToId: string | null
    respondedById: string | null
    response: string | null
    submittedAt: Date | null
    respondedAt: Date | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralReportMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    status: string | null
    submittedById: string | null
    submittedToId: string | null
    respondedById: string | null
    response: string | null
    submittedAt: Date | null
    respondedAt: Date | null
    sucursalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralReportCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    status: number
    submittedById: number
    submittedToId: number
    respondedById: number
    response: number
    submittedAt: number
    respondedAt: number
    sucursalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GeneralReportMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    submittedById?: true
    submittedToId?: true
    respondedById?: true
    response?: true
    submittedAt?: true
    respondedAt?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralReportMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    submittedById?: true
    submittedToId?: true
    respondedById?: true
    response?: true
    submittedAt?: true
    respondedAt?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralReportCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    status?: true
    submittedById?: true
    submittedToId?: true
    respondedById?: true
    response?: true
    submittedAt?: true
    respondedAt?: true
    sucursalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GeneralReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralReport to aggregate.
     */
    where?: GeneralReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReports to fetch.
     */
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralReports
    **/
    _count?: true | GeneralReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralReportMaxAggregateInputType
  }

  export type GetGeneralReportAggregateType<T extends GeneralReportAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralReport[P]>
      : GetScalarType<T[P], AggregateGeneralReport[P]>
  }




  export type GeneralReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportWhereInput
    orderBy?: GeneralReportOrderByWithAggregationInput | GeneralReportOrderByWithAggregationInput[]
    by: GeneralReportScalarFieldEnum[] | GeneralReportScalarFieldEnum
    having?: GeneralReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralReportCountAggregateInputType | true
    _min?: GeneralReportMinAggregateInputType
    _max?: GeneralReportMaxAggregateInputType
  }

  export type GeneralReportGroupByOutputType = {
    id: string
    title: string
    description: string
    type: string
    status: string
    submittedById: string
    submittedToId: string | null
    respondedById: string | null
    response: string | null
    submittedAt: Date
    respondedAt: Date | null
    sucursalId: string
    createdAt: Date
    updatedAt: Date
    _count: GeneralReportCountAggregateOutputType | null
    _min: GeneralReportMinAggregateOutputType | null
    _max: GeneralReportMaxAggregateOutputType | null
  }

  type GetGeneralReportGroupByPayload<T extends GeneralReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralReportGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralReportGroupByOutputType[P]>
        }
      >
    >


  export type GeneralReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    submittedById?: boolean
    submittedToId?: boolean
    respondedById?: boolean
    response?: boolean
    submittedAt?: boolean
    respondedAt?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    submittedTo?: boolean | GeneralReport$submittedToArgs<ExtArgs>
    respondedBy?: boolean | GeneralReport$respondedByArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    attachments?: boolean | GeneralReport$attachmentsArgs<ExtArgs>
    _count?: boolean | GeneralReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalReport"]>

  export type GeneralReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    submittedById?: boolean
    submittedToId?: boolean
    respondedById?: boolean
    response?: boolean
    submittedAt?: boolean
    respondedAt?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    submittedTo?: boolean | GeneralReport$submittedToArgs<ExtArgs>
    respondedBy?: boolean | GeneralReport$respondedByArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalReport"]>

  export type GeneralReportSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    submittedById?: boolean
    submittedToId?: boolean
    respondedById?: boolean
    response?: boolean
    submittedAt?: boolean
    respondedAt?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GeneralReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    submittedTo?: boolean | GeneralReport$submittedToArgs<ExtArgs>
    respondedBy?: boolean | GeneralReport$respondedByArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
    attachments?: boolean | GeneralReport$attachmentsArgs<ExtArgs>
    _count?: boolean | GeneralReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GeneralReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    submittedTo?: boolean | GeneralReport$submittedToArgs<ExtArgs>
    respondedBy?: boolean | GeneralReport$respondedByArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $GeneralReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralReport"
    objects: {
      submittedBy: Prisma.$UserPayload<ExtArgs>
      submittedTo: Prisma.$UserPayload<ExtArgs> | null
      respondedBy: Prisma.$UserPayload<ExtArgs> | null
      sucursal: Prisma.$SucursalPayload<ExtArgs>
      attachments: Prisma.$GeneralReportFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      type: string
      status: string
      submittedById: string
      submittedToId: string | null
      respondedById: string | null
      response: string | null
      submittedAt: Date
      respondedAt: Date | null
      sucursalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["generalReport"]>
    composites: {}
  }

  type GeneralReportGetPayload<S extends boolean | null | undefined | GeneralReportDefaultArgs> = $Result.GetResult<Prisma.$GeneralReportPayload, S>

  type GeneralReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneralReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneralReportCountAggregateInputType | true
    }

  export interface GeneralReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralReport'], meta: { name: 'GeneralReport' } }
    /**
     * Find zero or one GeneralReport that matches the filter.
     * @param {GeneralReportFindUniqueArgs} args - Arguments to find a GeneralReport
     * @example
     * // Get one GeneralReport
     * const generalReport = await prisma.generalReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralReportFindUniqueArgs>(args: SelectSubset<T, GeneralReportFindUniqueArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GeneralReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GeneralReportFindUniqueOrThrowArgs} args - Arguments to find a GeneralReport
     * @example
     * // Get one GeneralReport
     * const generalReport = await prisma.generalReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralReportFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GeneralReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFindFirstArgs} args - Arguments to find a GeneralReport
     * @example
     * // Get one GeneralReport
     * const generalReport = await prisma.generalReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralReportFindFirstArgs>(args?: SelectSubset<T, GeneralReportFindFirstArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GeneralReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFindFirstOrThrowArgs} args - Arguments to find a GeneralReport
     * @example
     * // Get one GeneralReport
     * const generalReport = await prisma.generalReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralReportFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GeneralReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralReports
     * const generalReports = await prisma.generalReport.findMany()
     * 
     * // Get first 10 GeneralReports
     * const generalReports = await prisma.generalReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalReportWithIdOnly = await prisma.generalReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralReportFindManyArgs>(args?: SelectSubset<T, GeneralReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GeneralReport.
     * @param {GeneralReportCreateArgs} args - Arguments to create a GeneralReport.
     * @example
     * // Create one GeneralReport
     * const GeneralReport = await prisma.generalReport.create({
     *   data: {
     *     // ... data to create a GeneralReport
     *   }
     * })
     * 
     */
    create<T extends GeneralReportCreateArgs>(args: SelectSubset<T, GeneralReportCreateArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GeneralReports.
     * @param {GeneralReportCreateManyArgs} args - Arguments to create many GeneralReports.
     * @example
     * // Create many GeneralReports
     * const generalReport = await prisma.generalReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralReportCreateManyArgs>(args?: SelectSubset<T, GeneralReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralReports and returns the data saved in the database.
     * @param {GeneralReportCreateManyAndReturnArgs} args - Arguments to create many GeneralReports.
     * @example
     * // Create many GeneralReports
     * const generalReport = await prisma.generalReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralReports and only return the `id`
     * const generalReportWithIdOnly = await prisma.generalReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneralReportCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneralReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GeneralReport.
     * @param {GeneralReportDeleteArgs} args - Arguments to delete one GeneralReport.
     * @example
     * // Delete one GeneralReport
     * const GeneralReport = await prisma.generalReport.delete({
     *   where: {
     *     // ... filter to delete one GeneralReport
     *   }
     * })
     * 
     */
    delete<T extends GeneralReportDeleteArgs>(args: SelectSubset<T, GeneralReportDeleteArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GeneralReport.
     * @param {GeneralReportUpdateArgs} args - Arguments to update one GeneralReport.
     * @example
     * // Update one GeneralReport
     * const generalReport = await prisma.generalReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralReportUpdateArgs>(args: SelectSubset<T, GeneralReportUpdateArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GeneralReports.
     * @param {GeneralReportDeleteManyArgs} args - Arguments to filter GeneralReports to delete.
     * @example
     * // Delete a few GeneralReports
     * const { count } = await prisma.generalReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralReportDeleteManyArgs>(args?: SelectSubset<T, GeneralReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralReports
     * const generalReport = await prisma.generalReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralReportUpdateManyArgs>(args: SelectSubset<T, GeneralReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneralReport.
     * @param {GeneralReportUpsertArgs} args - Arguments to update or create a GeneralReport.
     * @example
     * // Update or create a GeneralReport
     * const generalReport = await prisma.generalReport.upsert({
     *   create: {
     *     // ... data to create a GeneralReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralReport we want to update
     *   }
     * })
     */
    upsert<T extends GeneralReportUpsertArgs>(args: SelectSubset<T, GeneralReportUpsertArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GeneralReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportCountArgs} args - Arguments to filter GeneralReports to count.
     * @example
     * // Count the number of GeneralReports
     * const count = await prisma.generalReport.count({
     *   where: {
     *     // ... the filter for the GeneralReports we want to count
     *   }
     * })
    **/
    count<T extends GeneralReportCountArgs>(
      args?: Subset<T, GeneralReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralReportAggregateArgs>(args: Subset<T, GeneralReportAggregateArgs>): Prisma.PrismaPromise<GetGeneralReportAggregateType<T>>

    /**
     * Group by GeneralReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralReportGroupByArgs['orderBy'] }
        : { orderBy?: GeneralReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralReport model
   */
  readonly fields: GeneralReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submittedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    submittedTo<T extends GeneralReport$submittedToArgs<ExtArgs> = {}>(args?: Subset<T, GeneralReport$submittedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    respondedBy<T extends GeneralReport$respondedByArgs<ExtArgs> = {}>(args?: Subset<T, GeneralReport$respondedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    attachments<T extends GeneralReport$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, GeneralReport$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralReport model
   */ 
  interface GeneralReportFieldRefs {
    readonly id: FieldRef<"GeneralReport", 'String'>
    readonly title: FieldRef<"GeneralReport", 'String'>
    readonly description: FieldRef<"GeneralReport", 'String'>
    readonly type: FieldRef<"GeneralReport", 'String'>
    readonly status: FieldRef<"GeneralReport", 'String'>
    readonly submittedById: FieldRef<"GeneralReport", 'String'>
    readonly submittedToId: FieldRef<"GeneralReport", 'String'>
    readonly respondedById: FieldRef<"GeneralReport", 'String'>
    readonly response: FieldRef<"GeneralReport", 'String'>
    readonly submittedAt: FieldRef<"GeneralReport", 'DateTime'>
    readonly respondedAt: FieldRef<"GeneralReport", 'DateTime'>
    readonly sucursalId: FieldRef<"GeneralReport", 'String'>
    readonly createdAt: FieldRef<"GeneralReport", 'DateTime'>
    readonly updatedAt: FieldRef<"GeneralReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeneralReport findUnique
   */
  export type GeneralReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReport to fetch.
     */
    where: GeneralReportWhereUniqueInput
  }

  /**
   * GeneralReport findUniqueOrThrow
   */
  export type GeneralReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReport to fetch.
     */
    where: GeneralReportWhereUniqueInput
  }

  /**
   * GeneralReport findFirst
   */
  export type GeneralReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReport to fetch.
     */
    where?: GeneralReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReports to fetch.
     */
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralReports.
     */
    cursor?: GeneralReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralReports.
     */
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * GeneralReport findFirstOrThrow
   */
  export type GeneralReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReport to fetch.
     */
    where?: GeneralReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReports to fetch.
     */
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralReports.
     */
    cursor?: GeneralReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralReports.
     */
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * GeneralReport findMany
   */
  export type GeneralReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReports to fetch.
     */
    where?: GeneralReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReports to fetch.
     */
    orderBy?: GeneralReportOrderByWithRelationInput | GeneralReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralReports.
     */
    cursor?: GeneralReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReports.
     */
    skip?: number
    distinct?: GeneralReportScalarFieldEnum | GeneralReportScalarFieldEnum[]
  }

  /**
   * GeneralReport create
   */
  export type GeneralReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * The data needed to create a GeneralReport.
     */
    data: XOR<GeneralReportCreateInput, GeneralReportUncheckedCreateInput>
  }

  /**
   * GeneralReport createMany
   */
  export type GeneralReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralReports.
     */
    data: GeneralReportCreateManyInput | GeneralReportCreateManyInput[]
  }

  /**
   * GeneralReport createManyAndReturn
   */
  export type GeneralReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GeneralReports.
     */
    data: GeneralReportCreateManyInput | GeneralReportCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeneralReport update
   */
  export type GeneralReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * The data needed to update a GeneralReport.
     */
    data: XOR<GeneralReportUpdateInput, GeneralReportUncheckedUpdateInput>
    /**
     * Choose, which GeneralReport to update.
     */
    where: GeneralReportWhereUniqueInput
  }

  /**
   * GeneralReport updateMany
   */
  export type GeneralReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralReports.
     */
    data: XOR<GeneralReportUpdateManyMutationInput, GeneralReportUncheckedUpdateManyInput>
    /**
     * Filter which GeneralReports to update
     */
    where?: GeneralReportWhereInput
  }

  /**
   * GeneralReport upsert
   */
  export type GeneralReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * The filter to search for the GeneralReport to update in case it exists.
     */
    where: GeneralReportWhereUniqueInput
    /**
     * In case the GeneralReport found by the `where` argument doesn't exist, create a new GeneralReport with this data.
     */
    create: XOR<GeneralReportCreateInput, GeneralReportUncheckedCreateInput>
    /**
     * In case the GeneralReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralReportUpdateInput, GeneralReportUncheckedUpdateInput>
  }

  /**
   * GeneralReport delete
   */
  export type GeneralReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
    /**
     * Filter which GeneralReport to delete.
     */
    where: GeneralReportWhereUniqueInput
  }

  /**
   * GeneralReport deleteMany
   */
  export type GeneralReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralReports to delete
     */
    where?: GeneralReportWhereInput
  }

  /**
   * GeneralReport.submittedTo
   */
  export type GeneralReport$submittedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * GeneralReport.respondedBy
   */
  export type GeneralReport$respondedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * GeneralReport.attachments
   */
  export type GeneralReport$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    where?: GeneralReportFileWhereInput
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    cursor?: GeneralReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralReportFileScalarFieldEnum | GeneralReportFileScalarFieldEnum[]
  }

  /**
   * GeneralReport without action
   */
  export type GeneralReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReport
     */
    select?: GeneralReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportInclude<ExtArgs> | null
  }


  /**
   * Model GeneralReportFile
   */

  export type AggregateGeneralReportFile = {
    _count: GeneralReportFileCountAggregateOutputType | null
    _min: GeneralReportFileMinAggregateOutputType | null
    _max: GeneralReportFileMaxAggregateOutputType | null
  }

  export type GeneralReportFileMinAggregateOutputType = {
    id: string | null
    generalReportId: string | null
    fileId: string | null
  }

  export type GeneralReportFileMaxAggregateOutputType = {
    id: string | null
    generalReportId: string | null
    fileId: string | null
  }

  export type GeneralReportFileCountAggregateOutputType = {
    id: number
    generalReportId: number
    fileId: number
    _all: number
  }


  export type GeneralReportFileMinAggregateInputType = {
    id?: true
    generalReportId?: true
    fileId?: true
  }

  export type GeneralReportFileMaxAggregateInputType = {
    id?: true
    generalReportId?: true
    fileId?: true
  }

  export type GeneralReportFileCountAggregateInputType = {
    id?: true
    generalReportId?: true
    fileId?: true
    _all?: true
  }

  export type GeneralReportFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralReportFile to aggregate.
     */
    where?: GeneralReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReportFiles to fetch.
     */
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralReportFiles
    **/
    _count?: true | GeneralReportFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralReportFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralReportFileMaxAggregateInputType
  }

  export type GetGeneralReportFileAggregateType<T extends GeneralReportFileAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralReportFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralReportFile[P]>
      : GetScalarType<T[P], AggregateGeneralReportFile[P]>
  }




  export type GeneralReportFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralReportFileWhereInput
    orderBy?: GeneralReportFileOrderByWithAggregationInput | GeneralReportFileOrderByWithAggregationInput[]
    by: GeneralReportFileScalarFieldEnum[] | GeneralReportFileScalarFieldEnum
    having?: GeneralReportFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralReportFileCountAggregateInputType | true
    _min?: GeneralReportFileMinAggregateInputType
    _max?: GeneralReportFileMaxAggregateInputType
  }

  export type GeneralReportFileGroupByOutputType = {
    id: string
    generalReportId: string
    fileId: string
    _count: GeneralReportFileCountAggregateOutputType | null
    _min: GeneralReportFileMinAggregateOutputType | null
    _max: GeneralReportFileMaxAggregateOutputType | null
  }

  type GetGeneralReportFileGroupByPayload<T extends GeneralReportFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralReportFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralReportFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralReportFileGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralReportFileGroupByOutputType[P]>
        }
      >
    >


  export type GeneralReportFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    generalReportId?: boolean
    fileId?: boolean
    generalReport?: boolean | GeneralReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalReportFile"]>

  export type GeneralReportFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    generalReportId?: boolean
    fileId?: boolean
    generalReport?: boolean | GeneralReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalReportFile"]>

  export type GeneralReportFileSelectScalar = {
    id?: boolean
    generalReportId?: boolean
    fileId?: boolean
  }

  export type GeneralReportFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generalReport?: boolean | GeneralReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }
  export type GeneralReportFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generalReport?: boolean | GeneralReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }

  export type $GeneralReportFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralReportFile"
    objects: {
      generalReport: Prisma.$GeneralReportPayload<ExtArgs>
      file: Prisma.$FilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      generalReportId: string
      fileId: string
    }, ExtArgs["result"]["generalReportFile"]>
    composites: {}
  }

  type GeneralReportFileGetPayload<S extends boolean | null | undefined | GeneralReportFileDefaultArgs> = $Result.GetResult<Prisma.$GeneralReportFilePayload, S>

  type GeneralReportFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneralReportFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneralReportFileCountAggregateInputType | true
    }

  export interface GeneralReportFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralReportFile'], meta: { name: 'GeneralReportFile' } }
    /**
     * Find zero or one GeneralReportFile that matches the filter.
     * @param {GeneralReportFileFindUniqueArgs} args - Arguments to find a GeneralReportFile
     * @example
     * // Get one GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralReportFileFindUniqueArgs>(args: SelectSubset<T, GeneralReportFileFindUniqueArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GeneralReportFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GeneralReportFileFindUniqueOrThrowArgs} args - Arguments to find a GeneralReportFile
     * @example
     * // Get one GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralReportFileFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralReportFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GeneralReportFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileFindFirstArgs} args - Arguments to find a GeneralReportFile
     * @example
     * // Get one GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralReportFileFindFirstArgs>(args?: SelectSubset<T, GeneralReportFileFindFirstArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GeneralReportFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileFindFirstOrThrowArgs} args - Arguments to find a GeneralReportFile
     * @example
     * // Get one GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralReportFileFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralReportFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GeneralReportFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralReportFiles
     * const generalReportFiles = await prisma.generalReportFile.findMany()
     * 
     * // Get first 10 GeneralReportFiles
     * const generalReportFiles = await prisma.generalReportFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalReportFileWithIdOnly = await prisma.generalReportFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralReportFileFindManyArgs>(args?: SelectSubset<T, GeneralReportFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GeneralReportFile.
     * @param {GeneralReportFileCreateArgs} args - Arguments to create a GeneralReportFile.
     * @example
     * // Create one GeneralReportFile
     * const GeneralReportFile = await prisma.generalReportFile.create({
     *   data: {
     *     // ... data to create a GeneralReportFile
     *   }
     * })
     * 
     */
    create<T extends GeneralReportFileCreateArgs>(args: SelectSubset<T, GeneralReportFileCreateArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GeneralReportFiles.
     * @param {GeneralReportFileCreateManyArgs} args - Arguments to create many GeneralReportFiles.
     * @example
     * // Create many GeneralReportFiles
     * const generalReportFile = await prisma.generalReportFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralReportFileCreateManyArgs>(args?: SelectSubset<T, GeneralReportFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralReportFiles and returns the data saved in the database.
     * @param {GeneralReportFileCreateManyAndReturnArgs} args - Arguments to create many GeneralReportFiles.
     * @example
     * // Create many GeneralReportFiles
     * const generalReportFile = await prisma.generalReportFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralReportFiles and only return the `id`
     * const generalReportFileWithIdOnly = await prisma.generalReportFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneralReportFileCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneralReportFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GeneralReportFile.
     * @param {GeneralReportFileDeleteArgs} args - Arguments to delete one GeneralReportFile.
     * @example
     * // Delete one GeneralReportFile
     * const GeneralReportFile = await prisma.generalReportFile.delete({
     *   where: {
     *     // ... filter to delete one GeneralReportFile
     *   }
     * })
     * 
     */
    delete<T extends GeneralReportFileDeleteArgs>(args: SelectSubset<T, GeneralReportFileDeleteArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GeneralReportFile.
     * @param {GeneralReportFileUpdateArgs} args - Arguments to update one GeneralReportFile.
     * @example
     * // Update one GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralReportFileUpdateArgs>(args: SelectSubset<T, GeneralReportFileUpdateArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GeneralReportFiles.
     * @param {GeneralReportFileDeleteManyArgs} args - Arguments to filter GeneralReportFiles to delete.
     * @example
     * // Delete a few GeneralReportFiles
     * const { count } = await prisma.generalReportFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralReportFileDeleteManyArgs>(args?: SelectSubset<T, GeneralReportFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralReportFiles
     * const generalReportFile = await prisma.generalReportFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralReportFileUpdateManyArgs>(args: SelectSubset<T, GeneralReportFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneralReportFile.
     * @param {GeneralReportFileUpsertArgs} args - Arguments to update or create a GeneralReportFile.
     * @example
     * // Update or create a GeneralReportFile
     * const generalReportFile = await prisma.generalReportFile.upsert({
     *   create: {
     *     // ... data to create a GeneralReportFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralReportFile we want to update
     *   }
     * })
     */
    upsert<T extends GeneralReportFileUpsertArgs>(args: SelectSubset<T, GeneralReportFileUpsertArgs<ExtArgs>>): Prisma__GeneralReportFileClient<$Result.GetResult<Prisma.$GeneralReportFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GeneralReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileCountArgs} args - Arguments to filter GeneralReportFiles to count.
     * @example
     * // Count the number of GeneralReportFiles
     * const count = await prisma.generalReportFile.count({
     *   where: {
     *     // ... the filter for the GeneralReportFiles we want to count
     *   }
     * })
    **/
    count<T extends GeneralReportFileCountArgs>(
      args?: Subset<T, GeneralReportFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralReportFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralReportFileAggregateArgs>(args: Subset<T, GeneralReportFileAggregateArgs>): Prisma.PrismaPromise<GetGeneralReportFileAggregateType<T>>

    /**
     * Group by GeneralReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralReportFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralReportFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralReportFileGroupByArgs['orderBy'] }
        : { orderBy?: GeneralReportFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralReportFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralReportFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralReportFile model
   */
  readonly fields: GeneralReportFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralReportFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralReportFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    generalReport<T extends GeneralReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GeneralReportDefaultArgs<ExtArgs>>): Prisma__GeneralReportClient<$Result.GetResult<Prisma.$GeneralReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    file<T extends FileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FileDefaultArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralReportFile model
   */ 
  interface GeneralReportFileFieldRefs {
    readonly id: FieldRef<"GeneralReportFile", 'String'>
    readonly generalReportId: FieldRef<"GeneralReportFile", 'String'>
    readonly fileId: FieldRef<"GeneralReportFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GeneralReportFile findUnique
   */
  export type GeneralReportFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReportFile to fetch.
     */
    where: GeneralReportFileWhereUniqueInput
  }

  /**
   * GeneralReportFile findUniqueOrThrow
   */
  export type GeneralReportFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReportFile to fetch.
     */
    where: GeneralReportFileWhereUniqueInput
  }

  /**
   * GeneralReportFile findFirst
   */
  export type GeneralReportFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReportFile to fetch.
     */
    where?: GeneralReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReportFiles to fetch.
     */
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralReportFiles.
     */
    cursor?: GeneralReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralReportFiles.
     */
    distinct?: GeneralReportFileScalarFieldEnum | GeneralReportFileScalarFieldEnum[]
  }

  /**
   * GeneralReportFile findFirstOrThrow
   */
  export type GeneralReportFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReportFile to fetch.
     */
    where?: GeneralReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReportFiles to fetch.
     */
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralReportFiles.
     */
    cursor?: GeneralReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralReportFiles.
     */
    distinct?: GeneralReportFileScalarFieldEnum | GeneralReportFileScalarFieldEnum[]
  }

  /**
   * GeneralReportFile findMany
   */
  export type GeneralReportFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter, which GeneralReportFiles to fetch.
     */
    where?: GeneralReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralReportFiles to fetch.
     */
    orderBy?: GeneralReportFileOrderByWithRelationInput | GeneralReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralReportFiles.
     */
    cursor?: GeneralReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralReportFiles.
     */
    skip?: number
    distinct?: GeneralReportFileScalarFieldEnum | GeneralReportFileScalarFieldEnum[]
  }

  /**
   * GeneralReportFile create
   */
  export type GeneralReportFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * The data needed to create a GeneralReportFile.
     */
    data: XOR<GeneralReportFileCreateInput, GeneralReportFileUncheckedCreateInput>
  }

  /**
   * GeneralReportFile createMany
   */
  export type GeneralReportFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralReportFiles.
     */
    data: GeneralReportFileCreateManyInput | GeneralReportFileCreateManyInput[]
  }

  /**
   * GeneralReportFile createManyAndReturn
   */
  export type GeneralReportFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GeneralReportFiles.
     */
    data: GeneralReportFileCreateManyInput | GeneralReportFileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeneralReportFile update
   */
  export type GeneralReportFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * The data needed to update a GeneralReportFile.
     */
    data: XOR<GeneralReportFileUpdateInput, GeneralReportFileUncheckedUpdateInput>
    /**
     * Choose, which GeneralReportFile to update.
     */
    where: GeneralReportFileWhereUniqueInput
  }

  /**
   * GeneralReportFile updateMany
   */
  export type GeneralReportFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralReportFiles.
     */
    data: XOR<GeneralReportFileUpdateManyMutationInput, GeneralReportFileUncheckedUpdateManyInput>
    /**
     * Filter which GeneralReportFiles to update
     */
    where?: GeneralReportFileWhereInput
  }

  /**
   * GeneralReportFile upsert
   */
  export type GeneralReportFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * The filter to search for the GeneralReportFile to update in case it exists.
     */
    where: GeneralReportFileWhereUniqueInput
    /**
     * In case the GeneralReportFile found by the `where` argument doesn't exist, create a new GeneralReportFile with this data.
     */
    create: XOR<GeneralReportFileCreateInput, GeneralReportFileUncheckedCreateInput>
    /**
     * In case the GeneralReportFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralReportFileUpdateInput, GeneralReportFileUncheckedUpdateInput>
  }

  /**
   * GeneralReportFile delete
   */
  export type GeneralReportFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
    /**
     * Filter which GeneralReportFile to delete.
     */
    where: GeneralReportFileWhereUniqueInput
  }

  /**
   * GeneralReportFile deleteMany
   */
  export type GeneralReportFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralReportFiles to delete
     */
    where?: GeneralReportFileWhereInput
  }

  /**
   * GeneralReportFile without action
   */
  export type GeneralReportFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralReportFile
     */
    select?: GeneralReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralReportFileInclude<ExtArgs> | null
  }


  /**
   * Model ReportFile
   */

  export type AggregateReportFile = {
    _count: ReportFileCountAggregateOutputType | null
    _min: ReportFileMinAggregateOutputType | null
    _max: ReportFileMaxAggregateOutputType | null
  }

  export type ReportFileMinAggregateOutputType = {
    id: string | null
    reportId: string | null
    fileId: string | null
  }

  export type ReportFileMaxAggregateOutputType = {
    id: string | null
    reportId: string | null
    fileId: string | null
  }

  export type ReportFileCountAggregateOutputType = {
    id: number
    reportId: number
    fileId: number
    _all: number
  }


  export type ReportFileMinAggregateInputType = {
    id?: true
    reportId?: true
    fileId?: true
  }

  export type ReportFileMaxAggregateInputType = {
    id?: true
    reportId?: true
    fileId?: true
  }

  export type ReportFileCountAggregateInputType = {
    id?: true
    reportId?: true
    fileId?: true
    _all?: true
  }

  export type ReportFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportFile to aggregate.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportFiles
    **/
    _count?: true | ReportFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportFileMaxAggregateInputType
  }

  export type GetReportFileAggregateType<T extends ReportFileAggregateArgs> = {
        [P in keyof T & keyof AggregateReportFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportFile[P]>
      : GetScalarType<T[P], AggregateReportFile[P]>
  }




  export type ReportFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportFileWhereInput
    orderBy?: ReportFileOrderByWithAggregationInput | ReportFileOrderByWithAggregationInput[]
    by: ReportFileScalarFieldEnum[] | ReportFileScalarFieldEnum
    having?: ReportFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportFileCountAggregateInputType | true
    _min?: ReportFileMinAggregateInputType
    _max?: ReportFileMaxAggregateInputType
  }

  export type ReportFileGroupByOutputType = {
    id: string
    reportId: string
    fileId: string
    _count: ReportFileCountAggregateOutputType | null
    _min: ReportFileMinAggregateOutputType | null
    _max: ReportFileMaxAggregateOutputType | null
  }

  type GetReportFileGroupByPayload<T extends ReportFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportFileGroupByOutputType[P]>
            : GetScalarType<T[P], ReportFileGroupByOutputType[P]>
        }
      >
    >


  export type ReportFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    fileId?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportFile"]>

  export type ReportFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    fileId?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportFile"]>

  export type ReportFileSelectScalar = {
    id?: boolean
    reportId?: boolean
    fileId?: boolean
  }

  export type ReportFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }
  export type ReportFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    file?: boolean | FileDefaultArgs<ExtArgs>
  }

  export type $ReportFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportFile"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
      file: Prisma.$FilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportId: string
      fileId: string
    }, ExtArgs["result"]["reportFile"]>
    composites: {}
  }

  type ReportFileGetPayload<S extends boolean | null | undefined | ReportFileDefaultArgs> = $Result.GetResult<Prisma.$ReportFilePayload, S>

  type ReportFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportFileCountAggregateInputType | true
    }

  export interface ReportFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportFile'], meta: { name: 'ReportFile' } }
    /**
     * Find zero or one ReportFile that matches the filter.
     * @param {ReportFileFindUniqueArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFileFindUniqueArgs>(args: SelectSubset<T, ReportFileFindUniqueArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReportFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFileFindUniqueOrThrowArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFileFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReportFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindFirstArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFileFindFirstArgs>(args?: SelectSubset<T, ReportFileFindFirstArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReportFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindFirstOrThrowArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFileFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReportFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportFiles
     * const reportFiles = await prisma.reportFile.findMany()
     * 
     * // Get first 10 ReportFiles
     * const reportFiles = await prisma.reportFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportFileWithIdOnly = await prisma.reportFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFileFindManyArgs>(args?: SelectSubset<T, ReportFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReportFile.
     * @param {ReportFileCreateArgs} args - Arguments to create a ReportFile.
     * @example
     * // Create one ReportFile
     * const ReportFile = await prisma.reportFile.create({
     *   data: {
     *     // ... data to create a ReportFile
     *   }
     * })
     * 
     */
    create<T extends ReportFileCreateArgs>(args: SelectSubset<T, ReportFileCreateArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReportFiles.
     * @param {ReportFileCreateManyArgs} args - Arguments to create many ReportFiles.
     * @example
     * // Create many ReportFiles
     * const reportFile = await prisma.reportFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportFileCreateManyArgs>(args?: SelectSubset<T, ReportFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportFiles and returns the data saved in the database.
     * @param {ReportFileCreateManyAndReturnArgs} args - Arguments to create many ReportFiles.
     * @example
     * // Create many ReportFiles
     * const reportFile = await prisma.reportFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportFiles and only return the `id`
     * const reportFileWithIdOnly = await prisma.reportFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportFileCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReportFile.
     * @param {ReportFileDeleteArgs} args - Arguments to delete one ReportFile.
     * @example
     * // Delete one ReportFile
     * const ReportFile = await prisma.reportFile.delete({
     *   where: {
     *     // ... filter to delete one ReportFile
     *   }
     * })
     * 
     */
    delete<T extends ReportFileDeleteArgs>(args: SelectSubset<T, ReportFileDeleteArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReportFile.
     * @param {ReportFileUpdateArgs} args - Arguments to update one ReportFile.
     * @example
     * // Update one ReportFile
     * const reportFile = await prisma.reportFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportFileUpdateArgs>(args: SelectSubset<T, ReportFileUpdateArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReportFiles.
     * @param {ReportFileDeleteManyArgs} args - Arguments to filter ReportFiles to delete.
     * @example
     * // Delete a few ReportFiles
     * const { count } = await prisma.reportFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportFileDeleteManyArgs>(args?: SelectSubset<T, ReportFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportFiles
     * const reportFile = await prisma.reportFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportFileUpdateManyArgs>(args: SelectSubset<T, ReportFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReportFile.
     * @param {ReportFileUpsertArgs} args - Arguments to update or create a ReportFile.
     * @example
     * // Update or create a ReportFile
     * const reportFile = await prisma.reportFile.upsert({
     *   create: {
     *     // ... data to create a ReportFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportFile we want to update
     *   }
     * })
     */
    upsert<T extends ReportFileUpsertArgs>(args: SelectSubset<T, ReportFileUpsertArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileCountArgs} args - Arguments to filter ReportFiles to count.
     * @example
     * // Count the number of ReportFiles
     * const count = await prisma.reportFile.count({
     *   where: {
     *     // ... the filter for the ReportFiles we want to count
     *   }
     * })
    **/
    count<T extends ReportFileCountArgs>(
      args?: Subset<T, ReportFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportFileAggregateArgs>(args: Subset<T, ReportFileAggregateArgs>): Prisma.PrismaPromise<GetReportFileAggregateType<T>>

    /**
     * Group by ReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportFileGroupByArgs['orderBy'] }
        : { orderBy?: ReportFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportFile model
   */
  readonly fields: ReportFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    file<T extends FileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FileDefaultArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportFile model
   */ 
  interface ReportFileFieldRefs {
    readonly id: FieldRef<"ReportFile", 'String'>
    readonly reportId: FieldRef<"ReportFile", 'String'>
    readonly fileId: FieldRef<"ReportFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportFile findUnique
   */
  export type ReportFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile findUniqueOrThrow
   */
  export type ReportFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile findFirst
   */
  export type ReportFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportFiles.
     */
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile findFirstOrThrow
   */
  export type ReportFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportFiles.
     */
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile findMany
   */
  export type ReportFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFiles to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile create
   */
  export type ReportFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportFile.
     */
    data: XOR<ReportFileCreateInput, ReportFileUncheckedCreateInput>
  }

  /**
   * ReportFile createMany
   */
  export type ReportFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportFiles.
     */
    data: ReportFileCreateManyInput | ReportFileCreateManyInput[]
  }

  /**
   * ReportFile createManyAndReturn
   */
  export type ReportFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReportFiles.
     */
    data: ReportFileCreateManyInput | ReportFileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportFile update
   */
  export type ReportFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportFile.
     */
    data: XOR<ReportFileUpdateInput, ReportFileUncheckedUpdateInput>
    /**
     * Choose, which ReportFile to update.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile updateMany
   */
  export type ReportFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportFiles.
     */
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyInput>
    /**
     * Filter which ReportFiles to update
     */
    where?: ReportFileWhereInput
  }

  /**
   * ReportFile upsert
   */
  export type ReportFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportFile to update in case it exists.
     */
    where: ReportFileWhereUniqueInput
    /**
     * In case the ReportFile found by the `where` argument doesn't exist, create a new ReportFile with this data.
     */
    create: XOR<ReportFileCreateInput, ReportFileUncheckedCreateInput>
    /**
     * In case the ReportFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportFileUpdateInput, ReportFileUncheckedUpdateInput>
  }

  /**
   * ReportFile delete
   */
  export type ReportFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter which ReportFile to delete.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile deleteMany
   */
  export type ReportFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportFiles to delete
     */
    where?: ReportFileWhereInput
  }

  /**
   * ReportFile without action
   */
  export type ReportFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
  }


  /**
   * Model Scan
   */

  export type AggregateScan = {
    _count: ScanCountAggregateOutputType | null
    _min: ScanMinAggregateOutputType | null
    _max: ScanMaxAggregateOutputType | null
  }

  export type ScanMinAggregateOutputType = {
    id: string | null
    title: string | null
    userId: string | null
    sucursalId: string | null
    images: string | null
    pdfUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScanMaxAggregateOutputType = {
    id: string | null
    title: string | null
    userId: string | null
    sucursalId: string | null
    images: string | null
    pdfUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScanCountAggregateOutputType = {
    id: number
    title: number
    userId: number
    sucursalId: number
    images: number
    pdfUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScanMinAggregateInputType = {
    id?: true
    title?: true
    userId?: true
    sucursalId?: true
    images?: true
    pdfUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScanMaxAggregateInputType = {
    id?: true
    title?: true
    userId?: true
    sucursalId?: true
    images?: true
    pdfUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScanCountAggregateInputType = {
    id?: true
    title?: true
    userId?: true
    sucursalId?: true
    images?: true
    pdfUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scan to aggregate.
     */
    where?: ScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scans to fetch.
     */
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scans
    **/
    _count?: true | ScanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScanMaxAggregateInputType
  }

  export type GetScanAggregateType<T extends ScanAggregateArgs> = {
        [P in keyof T & keyof AggregateScan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScan[P]>
      : GetScalarType<T[P], AggregateScan[P]>
  }




  export type ScanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScanWhereInput
    orderBy?: ScanOrderByWithAggregationInput | ScanOrderByWithAggregationInput[]
    by: ScanScalarFieldEnum[] | ScanScalarFieldEnum
    having?: ScanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScanCountAggregateInputType | true
    _min?: ScanMinAggregateInputType
    _max?: ScanMaxAggregateInputType
  }

  export type ScanGroupByOutputType = {
    id: string
    title: string
    userId: string
    sucursalId: string
    images: string
    pdfUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ScanCountAggregateOutputType | null
    _min: ScanMinAggregateOutputType | null
    _max: ScanMaxAggregateOutputType | null
  }

  type GetScanGroupByPayload<T extends ScanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScanGroupByOutputType[P]>
            : GetScalarType<T[P], ScanGroupByOutputType[P]>
        }
      >
    >


  export type ScanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    userId?: boolean
    sucursalId?: boolean
    images?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scan"]>

  export type ScanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    userId?: boolean
    sucursalId?: boolean
    images?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scan"]>

  export type ScanSelectScalar = {
    id?: boolean
    title?: boolean
    userId?: boolean
    sucursalId?: boolean
    images?: boolean
    pdfUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }
  export type ScanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $ScanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Scan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      userId: string
      sucursalId: string
      images: string
      pdfUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scan"]>
    composites: {}
  }

  type ScanGetPayload<S extends boolean | null | undefined | ScanDefaultArgs> = $Result.GetResult<Prisma.$ScanPayload, S>

  type ScanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScanCountAggregateInputType | true
    }

  export interface ScanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scan'], meta: { name: 'Scan' } }
    /**
     * Find zero or one Scan that matches the filter.
     * @param {ScanFindUniqueArgs} args - Arguments to find a Scan
     * @example
     * // Get one Scan
     * const scan = await prisma.scan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScanFindUniqueArgs>(args: SelectSubset<T, ScanFindUniqueArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Scan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScanFindUniqueOrThrowArgs} args - Arguments to find a Scan
     * @example
     * // Get one Scan
     * const scan = await prisma.scan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScanFindUniqueOrThrowArgs>(args: SelectSubset<T, ScanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Scan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanFindFirstArgs} args - Arguments to find a Scan
     * @example
     * // Get one Scan
     * const scan = await prisma.scan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScanFindFirstArgs>(args?: SelectSubset<T, ScanFindFirstArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Scan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanFindFirstOrThrowArgs} args - Arguments to find a Scan
     * @example
     * // Get one Scan
     * const scan = await prisma.scan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScanFindFirstOrThrowArgs>(args?: SelectSubset<T, ScanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Scans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scans
     * const scans = await prisma.scan.findMany()
     * 
     * // Get first 10 Scans
     * const scans = await prisma.scan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scanWithIdOnly = await prisma.scan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScanFindManyArgs>(args?: SelectSubset<T, ScanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Scan.
     * @param {ScanCreateArgs} args - Arguments to create a Scan.
     * @example
     * // Create one Scan
     * const Scan = await prisma.scan.create({
     *   data: {
     *     // ... data to create a Scan
     *   }
     * })
     * 
     */
    create<T extends ScanCreateArgs>(args: SelectSubset<T, ScanCreateArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Scans.
     * @param {ScanCreateManyArgs} args - Arguments to create many Scans.
     * @example
     * // Create many Scans
     * const scan = await prisma.scan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScanCreateManyArgs>(args?: SelectSubset<T, ScanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scans and returns the data saved in the database.
     * @param {ScanCreateManyAndReturnArgs} args - Arguments to create many Scans.
     * @example
     * // Create many Scans
     * const scan = await prisma.scan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scans and only return the `id`
     * const scanWithIdOnly = await prisma.scan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScanCreateManyAndReturnArgs>(args?: SelectSubset<T, ScanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Scan.
     * @param {ScanDeleteArgs} args - Arguments to delete one Scan.
     * @example
     * // Delete one Scan
     * const Scan = await prisma.scan.delete({
     *   where: {
     *     // ... filter to delete one Scan
     *   }
     * })
     * 
     */
    delete<T extends ScanDeleteArgs>(args: SelectSubset<T, ScanDeleteArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Scan.
     * @param {ScanUpdateArgs} args - Arguments to update one Scan.
     * @example
     * // Update one Scan
     * const scan = await prisma.scan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScanUpdateArgs>(args: SelectSubset<T, ScanUpdateArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Scans.
     * @param {ScanDeleteManyArgs} args - Arguments to filter Scans to delete.
     * @example
     * // Delete a few Scans
     * const { count } = await prisma.scan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScanDeleteManyArgs>(args?: SelectSubset<T, ScanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scans
     * const scan = await prisma.scan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScanUpdateManyArgs>(args: SelectSubset<T, ScanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Scan.
     * @param {ScanUpsertArgs} args - Arguments to update or create a Scan.
     * @example
     * // Update or create a Scan
     * const scan = await prisma.scan.upsert({
     *   create: {
     *     // ... data to create a Scan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scan we want to update
     *   }
     * })
     */
    upsert<T extends ScanUpsertArgs>(args: SelectSubset<T, ScanUpsertArgs<ExtArgs>>): Prisma__ScanClient<$Result.GetResult<Prisma.$ScanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Scans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanCountArgs} args - Arguments to filter Scans to count.
     * @example
     * // Count the number of Scans
     * const count = await prisma.scan.count({
     *   where: {
     *     // ... the filter for the Scans we want to count
     *   }
     * })
    **/
    count<T extends ScanCountArgs>(
      args?: Subset<T, ScanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScanAggregateArgs>(args: Subset<T, ScanAggregateArgs>): Prisma.PrismaPromise<GetScanAggregateType<T>>

    /**
     * Group by Scan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScanGroupByArgs['orderBy'] }
        : { orderBy?: ScanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Scan model
   */
  readonly fields: ScanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Scan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Scan model
   */ 
  interface ScanFieldRefs {
    readonly id: FieldRef<"Scan", 'String'>
    readonly title: FieldRef<"Scan", 'String'>
    readonly userId: FieldRef<"Scan", 'String'>
    readonly sucursalId: FieldRef<"Scan", 'String'>
    readonly images: FieldRef<"Scan", 'String'>
    readonly pdfUrl: FieldRef<"Scan", 'String'>
    readonly createdAt: FieldRef<"Scan", 'DateTime'>
    readonly updatedAt: FieldRef<"Scan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Scan findUnique
   */
  export type ScanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter, which Scan to fetch.
     */
    where: ScanWhereUniqueInput
  }

  /**
   * Scan findUniqueOrThrow
   */
  export type ScanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter, which Scan to fetch.
     */
    where: ScanWhereUniqueInput
  }

  /**
   * Scan findFirst
   */
  export type ScanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter, which Scan to fetch.
     */
    where?: ScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scans to fetch.
     */
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scans.
     */
    cursor?: ScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scans.
     */
    distinct?: ScanScalarFieldEnum | ScanScalarFieldEnum[]
  }

  /**
   * Scan findFirstOrThrow
   */
  export type ScanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter, which Scan to fetch.
     */
    where?: ScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scans to fetch.
     */
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scans.
     */
    cursor?: ScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scans.
     */
    distinct?: ScanScalarFieldEnum | ScanScalarFieldEnum[]
  }

  /**
   * Scan findMany
   */
  export type ScanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter, which Scans to fetch.
     */
    where?: ScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scans to fetch.
     */
    orderBy?: ScanOrderByWithRelationInput | ScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scans.
     */
    cursor?: ScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scans.
     */
    skip?: number
    distinct?: ScanScalarFieldEnum | ScanScalarFieldEnum[]
  }

  /**
   * Scan create
   */
  export type ScanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * The data needed to create a Scan.
     */
    data: XOR<ScanCreateInput, ScanUncheckedCreateInput>
  }

  /**
   * Scan createMany
   */
  export type ScanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scans.
     */
    data: ScanCreateManyInput | ScanCreateManyInput[]
  }

  /**
   * Scan createManyAndReturn
   */
  export type ScanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Scans.
     */
    data: ScanCreateManyInput | ScanCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scan update
   */
  export type ScanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * The data needed to update a Scan.
     */
    data: XOR<ScanUpdateInput, ScanUncheckedUpdateInput>
    /**
     * Choose, which Scan to update.
     */
    where: ScanWhereUniqueInput
  }

  /**
   * Scan updateMany
   */
  export type ScanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scans.
     */
    data: XOR<ScanUpdateManyMutationInput, ScanUncheckedUpdateManyInput>
    /**
     * Filter which Scans to update
     */
    where?: ScanWhereInput
  }

  /**
   * Scan upsert
   */
  export type ScanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * The filter to search for the Scan to update in case it exists.
     */
    where: ScanWhereUniqueInput
    /**
     * In case the Scan found by the `where` argument doesn't exist, create a new Scan with this data.
     */
    create: XOR<ScanCreateInput, ScanUncheckedCreateInput>
    /**
     * In case the Scan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScanUpdateInput, ScanUncheckedUpdateInput>
  }

  /**
   * Scan delete
   */
  export type ScanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
    /**
     * Filter which Scan to delete.
     */
    where: ScanWhereUniqueInput
  }

  /**
   * Scan deleteMany
   */
  export type ScanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scans to delete
     */
    where?: ScanWhereInput
  }

  /**
   * Scan without action
   */
  export type ScanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scan
     */
    select?: ScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    isRead: boolean | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    isRead: boolean | null
    userId: string | null
    sucursalId: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    isRead: number
    userId: number
    sucursalId: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    isRead?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    isRead?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    isRead?: true
    userId?: true
    sucursalId?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: string
    title: string
    description: string
    isRead: boolean
    userId: string
    sucursalId: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    isRead?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    isRead?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    isRead?: boolean
    userId?: boolean
    sucursalId?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sucursal: Prisma.$SucursalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      description: string
      isRead: boolean
      userId: string
      sucursalId: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly description: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly sucursalId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ErrorLog
   */

  export type AggregateErrorLog = {
    _count: ErrorLogCountAggregateOutputType | null
    _min: ErrorLogMinAggregateOutputType | null
    _max: ErrorLogMaxAggregateOutputType | null
  }

  export type ErrorLogMinAggregateOutputType = {
    id: string | null
    sucursalId: string | null
    errorType: string | null
    description: string | null
    errorDetails: string | null
    createdAt: Date | null
  }

  export type ErrorLogMaxAggregateOutputType = {
    id: string | null
    sucursalId: string | null
    errorType: string | null
    description: string | null
    errorDetails: string | null
    createdAt: Date | null
  }

  export type ErrorLogCountAggregateOutputType = {
    id: number
    sucursalId: number
    errorType: number
    description: number
    errorDetails: number
    createdAt: number
    _all: number
  }


  export type ErrorLogMinAggregateInputType = {
    id?: true
    sucursalId?: true
    errorType?: true
    description?: true
    errorDetails?: true
    createdAt?: true
  }

  export type ErrorLogMaxAggregateInputType = {
    id?: true
    sucursalId?: true
    errorType?: true
    description?: true
    errorDetails?: true
    createdAt?: true
  }

  export type ErrorLogCountAggregateInputType = {
    id?: true
    sucursalId?: true
    errorType?: true
    description?: true
    errorDetails?: true
    createdAt?: true
    _all?: true
  }

  export type ErrorLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ErrorLog to aggregate.
     */
    where?: ErrorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorLogs to fetch.
     */
    orderBy?: ErrorLogOrderByWithRelationInput | ErrorLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ErrorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ErrorLogs
    **/
    _count?: true | ErrorLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ErrorLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ErrorLogMaxAggregateInputType
  }

  export type GetErrorLogAggregateType<T extends ErrorLogAggregateArgs> = {
        [P in keyof T & keyof AggregateErrorLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateErrorLog[P]>
      : GetScalarType<T[P], AggregateErrorLog[P]>
  }




  export type ErrorLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ErrorLogWhereInput
    orderBy?: ErrorLogOrderByWithAggregationInput | ErrorLogOrderByWithAggregationInput[]
    by: ErrorLogScalarFieldEnum[] | ErrorLogScalarFieldEnum
    having?: ErrorLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ErrorLogCountAggregateInputType | true
    _min?: ErrorLogMinAggregateInputType
    _max?: ErrorLogMaxAggregateInputType
  }

  export type ErrorLogGroupByOutputType = {
    id: string
    sucursalId: string
    errorType: string
    description: string
    errorDetails: string | null
    createdAt: Date
    _count: ErrorLogCountAggregateOutputType | null
    _min: ErrorLogMinAggregateOutputType | null
    _max: ErrorLogMaxAggregateOutputType | null
  }

  type GetErrorLogGroupByPayload<T extends ErrorLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ErrorLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ErrorLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ErrorLogGroupByOutputType[P]>
            : GetScalarType<T[P], ErrorLogGroupByOutputType[P]>
        }
      >
    >


  export type ErrorLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sucursalId?: boolean
    errorType?: boolean
    description?: boolean
    errorDetails?: boolean
    createdAt?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["errorLog"]>

  export type ErrorLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sucursalId?: boolean
    errorType?: boolean
    description?: boolean
    errorDetails?: boolean
    createdAt?: boolean
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["errorLog"]>

  export type ErrorLogSelectScalar = {
    id?: boolean
    sucursalId?: boolean
    errorType?: boolean
    description?: boolean
    errorDetails?: boolean
    createdAt?: boolean
  }

  export type ErrorLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }
  export type ErrorLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sucursal?: boolean | SucursalDefaultArgs<ExtArgs>
  }

  export type $ErrorLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ErrorLog"
    objects: {
      sucursal: Prisma.$SucursalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sucursalId: string
      errorType: string
      description: string
      errorDetails: string | null
      createdAt: Date
    }, ExtArgs["result"]["errorLog"]>
    composites: {}
  }

  type ErrorLogGetPayload<S extends boolean | null | undefined | ErrorLogDefaultArgs> = $Result.GetResult<Prisma.$ErrorLogPayload, S>

  type ErrorLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ErrorLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ErrorLogCountAggregateInputType | true
    }

  export interface ErrorLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ErrorLog'], meta: { name: 'ErrorLog' } }
    /**
     * Find zero or one ErrorLog that matches the filter.
     * @param {ErrorLogFindUniqueArgs} args - Arguments to find a ErrorLog
     * @example
     * // Get one ErrorLog
     * const errorLog = await prisma.errorLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ErrorLogFindUniqueArgs>(args: SelectSubset<T, ErrorLogFindUniqueArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ErrorLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ErrorLogFindUniqueOrThrowArgs} args - Arguments to find a ErrorLog
     * @example
     * // Get one ErrorLog
     * const errorLog = await prisma.errorLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ErrorLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ErrorLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ErrorLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogFindFirstArgs} args - Arguments to find a ErrorLog
     * @example
     * // Get one ErrorLog
     * const errorLog = await prisma.errorLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ErrorLogFindFirstArgs>(args?: SelectSubset<T, ErrorLogFindFirstArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ErrorLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogFindFirstOrThrowArgs} args - Arguments to find a ErrorLog
     * @example
     * // Get one ErrorLog
     * const errorLog = await prisma.errorLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ErrorLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ErrorLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ErrorLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ErrorLogs
     * const errorLogs = await prisma.errorLog.findMany()
     * 
     * // Get first 10 ErrorLogs
     * const errorLogs = await prisma.errorLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const errorLogWithIdOnly = await prisma.errorLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ErrorLogFindManyArgs>(args?: SelectSubset<T, ErrorLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ErrorLog.
     * @param {ErrorLogCreateArgs} args - Arguments to create a ErrorLog.
     * @example
     * // Create one ErrorLog
     * const ErrorLog = await prisma.errorLog.create({
     *   data: {
     *     // ... data to create a ErrorLog
     *   }
     * })
     * 
     */
    create<T extends ErrorLogCreateArgs>(args: SelectSubset<T, ErrorLogCreateArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ErrorLogs.
     * @param {ErrorLogCreateManyArgs} args - Arguments to create many ErrorLogs.
     * @example
     * // Create many ErrorLogs
     * const errorLog = await prisma.errorLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ErrorLogCreateManyArgs>(args?: SelectSubset<T, ErrorLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ErrorLogs and returns the data saved in the database.
     * @param {ErrorLogCreateManyAndReturnArgs} args - Arguments to create many ErrorLogs.
     * @example
     * // Create many ErrorLogs
     * const errorLog = await prisma.errorLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ErrorLogs and only return the `id`
     * const errorLogWithIdOnly = await prisma.errorLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ErrorLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ErrorLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ErrorLog.
     * @param {ErrorLogDeleteArgs} args - Arguments to delete one ErrorLog.
     * @example
     * // Delete one ErrorLog
     * const ErrorLog = await prisma.errorLog.delete({
     *   where: {
     *     // ... filter to delete one ErrorLog
     *   }
     * })
     * 
     */
    delete<T extends ErrorLogDeleteArgs>(args: SelectSubset<T, ErrorLogDeleteArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ErrorLog.
     * @param {ErrorLogUpdateArgs} args - Arguments to update one ErrorLog.
     * @example
     * // Update one ErrorLog
     * const errorLog = await prisma.errorLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ErrorLogUpdateArgs>(args: SelectSubset<T, ErrorLogUpdateArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ErrorLogs.
     * @param {ErrorLogDeleteManyArgs} args - Arguments to filter ErrorLogs to delete.
     * @example
     * // Delete a few ErrorLogs
     * const { count } = await prisma.errorLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ErrorLogDeleteManyArgs>(args?: SelectSubset<T, ErrorLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ErrorLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ErrorLogs
     * const errorLog = await prisma.errorLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ErrorLogUpdateManyArgs>(args: SelectSubset<T, ErrorLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ErrorLog.
     * @param {ErrorLogUpsertArgs} args - Arguments to update or create a ErrorLog.
     * @example
     * // Update or create a ErrorLog
     * const errorLog = await prisma.errorLog.upsert({
     *   create: {
     *     // ... data to create a ErrorLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ErrorLog we want to update
     *   }
     * })
     */
    upsert<T extends ErrorLogUpsertArgs>(args: SelectSubset<T, ErrorLogUpsertArgs<ExtArgs>>): Prisma__ErrorLogClient<$Result.GetResult<Prisma.$ErrorLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ErrorLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogCountArgs} args - Arguments to filter ErrorLogs to count.
     * @example
     * // Count the number of ErrorLogs
     * const count = await prisma.errorLog.count({
     *   where: {
     *     // ... the filter for the ErrorLogs we want to count
     *   }
     * })
    **/
    count<T extends ErrorLogCountArgs>(
      args?: Subset<T, ErrorLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ErrorLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ErrorLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ErrorLogAggregateArgs>(args: Subset<T, ErrorLogAggregateArgs>): Prisma.PrismaPromise<GetErrorLogAggregateType<T>>

    /**
     * Group by ErrorLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ErrorLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ErrorLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ErrorLogGroupByArgs['orderBy'] }
        : { orderBy?: ErrorLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ErrorLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetErrorLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ErrorLog model
   */
  readonly fields: ErrorLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ErrorLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ErrorLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sucursal<T extends SucursalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SucursalDefaultArgs<ExtArgs>>): Prisma__SucursalClient<$Result.GetResult<Prisma.$SucursalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ErrorLog model
   */ 
  interface ErrorLogFieldRefs {
    readonly id: FieldRef<"ErrorLog", 'String'>
    readonly sucursalId: FieldRef<"ErrorLog", 'String'>
    readonly errorType: FieldRef<"ErrorLog", 'String'>
    readonly description: FieldRef<"ErrorLog", 'String'>
    readonly errorDetails: FieldRef<"ErrorLog", 'String'>
    readonly createdAt: FieldRef<"ErrorLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ErrorLog findUnique
   */
  export type ErrorLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter, which ErrorLog to fetch.
     */
    where: ErrorLogWhereUniqueInput
  }

  /**
   * ErrorLog findUniqueOrThrow
   */
  export type ErrorLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter, which ErrorLog to fetch.
     */
    where: ErrorLogWhereUniqueInput
  }

  /**
   * ErrorLog findFirst
   */
  export type ErrorLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter, which ErrorLog to fetch.
     */
    where?: ErrorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorLogs to fetch.
     */
    orderBy?: ErrorLogOrderByWithRelationInput | ErrorLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ErrorLogs.
     */
    cursor?: ErrorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ErrorLogs.
     */
    distinct?: ErrorLogScalarFieldEnum | ErrorLogScalarFieldEnum[]
  }

  /**
   * ErrorLog findFirstOrThrow
   */
  export type ErrorLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter, which ErrorLog to fetch.
     */
    where?: ErrorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorLogs to fetch.
     */
    orderBy?: ErrorLogOrderByWithRelationInput | ErrorLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ErrorLogs.
     */
    cursor?: ErrorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ErrorLogs.
     */
    distinct?: ErrorLogScalarFieldEnum | ErrorLogScalarFieldEnum[]
  }

  /**
   * ErrorLog findMany
   */
  export type ErrorLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter, which ErrorLogs to fetch.
     */
    where?: ErrorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ErrorLogs to fetch.
     */
    orderBy?: ErrorLogOrderByWithRelationInput | ErrorLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ErrorLogs.
     */
    cursor?: ErrorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ErrorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ErrorLogs.
     */
    skip?: number
    distinct?: ErrorLogScalarFieldEnum | ErrorLogScalarFieldEnum[]
  }

  /**
   * ErrorLog create
   */
  export type ErrorLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ErrorLog.
     */
    data: XOR<ErrorLogCreateInput, ErrorLogUncheckedCreateInput>
  }

  /**
   * ErrorLog createMany
   */
  export type ErrorLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ErrorLogs.
     */
    data: ErrorLogCreateManyInput | ErrorLogCreateManyInput[]
  }

  /**
   * ErrorLog createManyAndReturn
   */
  export type ErrorLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ErrorLogs.
     */
    data: ErrorLogCreateManyInput | ErrorLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ErrorLog update
   */
  export type ErrorLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ErrorLog.
     */
    data: XOR<ErrorLogUpdateInput, ErrorLogUncheckedUpdateInput>
    /**
     * Choose, which ErrorLog to update.
     */
    where: ErrorLogWhereUniqueInput
  }

  /**
   * ErrorLog updateMany
   */
  export type ErrorLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ErrorLogs.
     */
    data: XOR<ErrorLogUpdateManyMutationInput, ErrorLogUncheckedUpdateManyInput>
    /**
     * Filter which ErrorLogs to update
     */
    where?: ErrorLogWhereInput
  }

  /**
   * ErrorLog upsert
   */
  export type ErrorLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ErrorLog to update in case it exists.
     */
    where: ErrorLogWhereUniqueInput
    /**
     * In case the ErrorLog found by the `where` argument doesn't exist, create a new ErrorLog with this data.
     */
    create: XOR<ErrorLogCreateInput, ErrorLogUncheckedCreateInput>
    /**
     * In case the ErrorLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ErrorLogUpdateInput, ErrorLogUncheckedUpdateInput>
  }

  /**
   * ErrorLog delete
   */
  export type ErrorLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
    /**
     * Filter which ErrorLog to delete.
     */
    where: ErrorLogWhereUniqueInput
  }

  /**
   * ErrorLog deleteMany
   */
  export type ErrorLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ErrorLogs to delete
     */
    where?: ErrorLogWhereInput
  }

  /**
   * ErrorLog without action
   */
  export type ErrorLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ErrorLog
     */
    select?: ErrorLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ErrorLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SucursalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    location: 'location',
    serverUrl: 'serverUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SucursalScalarFieldEnum = (typeof SucursalScalarFieldEnum)[keyof typeof SucursalScalarFieldEnum]


  export const SucursalConnectionScalarFieldEnum: {
    id: 'id',
    sourceSucursalId: 'sourceSucursalId',
    targetSucursalId: 'targetSucursalId',
    createdAt: 'createdAt'
  };

  export type SucursalConnectionScalarFieldEnum = (typeof SucursalConnectionScalarFieldEnum)[keyof typeof SucursalConnectionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    sucursalId: 'sucursalId',
    supervisorId: 'supervisorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    status: 'status',
    profilePicture: 'profilePicture',
    sucursalId: 'sucursalId',
    departmentId: 'departmentId',
    supervisorId: 'supervisorId',
    phone: 'phone',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    parentId: 'parentId',
    userId: 'userId',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    originalName: 'originalName',
    description: 'description',
    url: 'url',
    size: 'size',
    type: 'type',
    mimeType: 'mimeType',
    isPublic: 'isPublic',
    folderId: 'folderId',
    userId: 'userId',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const LibraryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryScalarFieldEnum = (typeof LibraryScalarFieldEnum)[keyof typeof LibraryScalarFieldEnum]


  export const LibraryMemberScalarFieldEnum: {
    id: 'id',
    libraryId: 'libraryId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LibraryMemberScalarFieldEnum = (typeof LibraryMemberScalarFieldEnum)[keyof typeof LibraryMemberScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    priority: 'priority',
    progress: 'progress',
    departmentId: 'departmentId',
    createdById: 'createdById',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const GoalReportScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    goalId: 'goalId',
    submittedById: 'submittedById',
    isCompletion: 'isCompletion',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoalReportScalarFieldEnum = (typeof GoalReportScalarFieldEnum)[keyof typeof GoalReportScalarFieldEnum]


  export const GoalReportFileScalarFieldEnum: {
    id: 'id',
    goalReportId: 'goalReportId',
    fileId: 'fileId'
  };

  export type GoalReportFileScalarFieldEnum = (typeof GoalReportFileScalarFieldEnum)[keyof typeof GoalReportFileScalarFieldEnum]


  export const GoalAssignmentScalarFieldEnum: {
    id: 'id',
    goalId: 'goalId',
    userId: 'userId',
    assignedAt: 'assignedAt'
  };

  export type GoalAssignmentScalarFieldEnum = (typeof GoalAssignmentScalarFieldEnum)[keyof typeof GoalAssignmentScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    goalId: 'goalId',
    userId: 'userId',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const GeneralReportScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    submittedById: 'submittedById',
    submittedToId: 'submittedToId',
    respondedById: 'respondedById',
    response: 'response',
    submittedAt: 'submittedAt',
    respondedAt: 'respondedAt',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GeneralReportScalarFieldEnum = (typeof GeneralReportScalarFieldEnum)[keyof typeof GeneralReportScalarFieldEnum]


  export const GeneralReportFileScalarFieldEnum: {
    id: 'id',
    generalReportId: 'generalReportId',
    fileId: 'fileId'
  };

  export type GeneralReportFileScalarFieldEnum = (typeof GeneralReportFileScalarFieldEnum)[keyof typeof GeneralReportFileScalarFieldEnum]


  export const ReportFileScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    fileId: 'fileId'
  };

  export type ReportFileScalarFieldEnum = (typeof ReportFileScalarFieldEnum)[keyof typeof ReportFileScalarFieldEnum]


  export const ScanScalarFieldEnum: {
    id: 'id',
    title: 'title',
    userId: 'userId',
    sucursalId: 'sucursalId',
    images: 'images',
    pdfUrl: 'pdfUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScanScalarFieldEnum = (typeof ScanScalarFieldEnum)[keyof typeof ScanScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    isRead: 'isRead',
    userId: 'userId',
    sucursalId: 'sucursalId',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ErrorLogScalarFieldEnum: {
    id: 'id',
    sucursalId: 'sucursalId',
    errorType: 'errorType',
    description: 'description',
    errorDetails: 'errorDetails',
    createdAt: 'createdAt'
  };

  export type ErrorLogScalarFieldEnum = (typeof ErrorLogScalarFieldEnum)[keyof typeof ErrorLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SucursalWhereInput = {
    AND?: SucursalWhereInput | SucursalWhereInput[]
    OR?: SucursalWhereInput[]
    NOT?: SucursalWhereInput | SucursalWhereInput[]
    id?: StringFilter<"Sucursal"> | string
    name?: StringFilter<"Sucursal"> | string
    description?: StringNullableFilter<"Sucursal"> | string | null
    location?: StringNullableFilter<"Sucursal"> | string | null
    serverUrl?: StringFilter<"Sucursal"> | string
    createdAt?: DateTimeFilter<"Sucursal"> | Date | string
    updatedAt?: DateTimeFilter<"Sucursal"> | Date | string
    users?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    libraries?: LibraryListRelationFilter
    goals?: GoalListRelationFilter
    reports?: ReportListRelationFilter
    generalReports?: GeneralReportListRelationFilter
    folders?: FolderListRelationFilter
    files?: FileListRelationFilter
    notifications?: NotificationListRelationFilter
    errorLogs?: ErrorLogListRelationFilter
    scans?: ScanListRelationFilter
    sourceConnections?: SucursalConnectionListRelationFilter
    targetConnections?: SucursalConnectionListRelationFilter
  }

  export type SucursalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    serverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    libraries?: LibraryOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    generalReports?: GeneralReportOrderByRelationAggregateInput
    folders?: FolderOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    errorLogs?: ErrorLogOrderByRelationAggregateInput
    scans?: ScanOrderByRelationAggregateInput
    sourceConnections?: SucursalConnectionOrderByRelationAggregateInput
    targetConnections?: SucursalConnectionOrderByRelationAggregateInput
  }

  export type SucursalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    serverUrl?: string
    AND?: SucursalWhereInput | SucursalWhereInput[]
    OR?: SucursalWhereInput[]
    NOT?: SucursalWhereInput | SucursalWhereInput[]
    description?: StringNullableFilter<"Sucursal"> | string | null
    location?: StringNullableFilter<"Sucursal"> | string | null
    createdAt?: DateTimeFilter<"Sucursal"> | Date | string
    updatedAt?: DateTimeFilter<"Sucursal"> | Date | string
    users?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    libraries?: LibraryListRelationFilter
    goals?: GoalListRelationFilter
    reports?: ReportListRelationFilter
    generalReports?: GeneralReportListRelationFilter
    folders?: FolderListRelationFilter
    files?: FileListRelationFilter
    notifications?: NotificationListRelationFilter
    errorLogs?: ErrorLogListRelationFilter
    scans?: ScanListRelationFilter
    sourceConnections?: SucursalConnectionListRelationFilter
    targetConnections?: SucursalConnectionListRelationFilter
  }, "id" | "name" | "serverUrl">

  export type SucursalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    serverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SucursalCountOrderByAggregateInput
    _max?: SucursalMaxOrderByAggregateInput
    _min?: SucursalMinOrderByAggregateInput
  }

  export type SucursalScalarWhereWithAggregatesInput = {
    AND?: SucursalScalarWhereWithAggregatesInput | SucursalScalarWhereWithAggregatesInput[]
    OR?: SucursalScalarWhereWithAggregatesInput[]
    NOT?: SucursalScalarWhereWithAggregatesInput | SucursalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sucursal"> | string
    name?: StringWithAggregatesFilter<"Sucursal"> | string
    description?: StringNullableWithAggregatesFilter<"Sucursal"> | string | null
    location?: StringNullableWithAggregatesFilter<"Sucursal"> | string | null
    serverUrl?: StringWithAggregatesFilter<"Sucursal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sucursal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sucursal"> | Date | string
  }

  export type SucursalConnectionWhereInput = {
    AND?: SucursalConnectionWhereInput | SucursalConnectionWhereInput[]
    OR?: SucursalConnectionWhereInput[]
    NOT?: SucursalConnectionWhereInput | SucursalConnectionWhereInput[]
    id?: StringFilter<"SucursalConnection"> | string
    sourceSucursalId?: StringFilter<"SucursalConnection"> | string
    targetSucursalId?: StringFilter<"SucursalConnection"> | string
    createdAt?: DateTimeFilter<"SucursalConnection"> | Date | string
    sourceSucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    targetSucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }

  export type SucursalConnectionOrderByWithRelationInput = {
    id?: SortOrder
    sourceSucursalId?: SortOrder
    targetSucursalId?: SortOrder
    createdAt?: SortOrder
    sourceSucursal?: SucursalOrderByWithRelationInput
    targetSucursal?: SucursalOrderByWithRelationInput
  }

  export type SucursalConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sourceSucursalId_targetSucursalId?: SucursalConnectionSourceSucursalIdTargetSucursalIdCompoundUniqueInput
    AND?: SucursalConnectionWhereInput | SucursalConnectionWhereInput[]
    OR?: SucursalConnectionWhereInput[]
    NOT?: SucursalConnectionWhereInput | SucursalConnectionWhereInput[]
    sourceSucursalId?: StringFilter<"SucursalConnection"> | string
    targetSucursalId?: StringFilter<"SucursalConnection"> | string
    createdAt?: DateTimeFilter<"SucursalConnection"> | Date | string
    sourceSucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    targetSucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }, "id" | "sourceSucursalId_targetSucursalId">

  export type SucursalConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    sourceSucursalId?: SortOrder
    targetSucursalId?: SortOrder
    createdAt?: SortOrder
    _count?: SucursalConnectionCountOrderByAggregateInput
    _max?: SucursalConnectionMaxOrderByAggregateInput
    _min?: SucursalConnectionMinOrderByAggregateInput
  }

  export type SucursalConnectionScalarWhereWithAggregatesInput = {
    AND?: SucursalConnectionScalarWhereWithAggregatesInput | SucursalConnectionScalarWhereWithAggregatesInput[]
    OR?: SucursalConnectionScalarWhereWithAggregatesInput[]
    NOT?: SucursalConnectionScalarWhereWithAggregatesInput | SucursalConnectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SucursalConnection"> | string
    sourceSucursalId?: StringWithAggregatesFilter<"SucursalConnection"> | string
    targetSucursalId?: StringWithAggregatesFilter<"SucursalConnection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SucursalConnection"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    sucursalId?: StringFilter<"Department"> | string
    supervisorId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    supervisor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    supervisors?: UserListRelationFilter
    goals?: GoalListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    supervisorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sucursal?: SucursalOrderByWithRelationInput
    supervisor?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    supervisors?: UserOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_sucursalId?: DepartmentNameSucursalIdCompoundUniqueInput
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    sucursalId?: StringFilter<"Department"> | string
    supervisorId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    supervisor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    supervisors?: UserListRelationFilter
    goals?: GoalListRelationFilter
  }, "id" | "name_sucursalId">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    supervisorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    sucursalId?: StringWithAggregatesFilter<"Department"> | string
    supervisorId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    sucursalId?: StringFilter<"User"> | string
    departmentId?: StringNullableFilter<"User"> | string | null
    supervisorId?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    supervisor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    subordinates?: UserListRelationFilter
    supervisedDepartments?: DepartmentListRelationFilter
    departmentSupervisors?: DepartmentListRelationFilter
    folders?: FolderListRelationFilter
    files?: FileListRelationFilter
    libraries?: LibraryListRelationFilter
    libraryMembers?: LibraryMemberListRelationFilter
    goals?: GoalAssignmentListRelationFilter
    notifications?: NotificationListRelationFilter
    scans?: ScanListRelationFilter
    createdGoals?: GoalListRelationFilter
    submittedReports?: GeneralReportListRelationFilter
    receivedReports?: GeneralReportListRelationFilter
    respondedReports?: GeneralReportListRelationFilter
    goalReports?: GoalReportListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    supervisorId?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    sucursal?: SucursalOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    supervisor?: UserOrderByWithRelationInput
    subordinates?: UserOrderByRelationAggregateInput
    supervisedDepartments?: DepartmentOrderByRelationAggregateInput
    departmentSupervisors?: DepartmentOrderByRelationAggregateInput
    folders?: FolderOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    libraries?: LibraryOrderByRelationAggregateInput
    libraryMembers?: LibraryMemberOrderByRelationAggregateInput
    goals?: GoalAssignmentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    scans?: ScanOrderByRelationAggregateInput
    createdGoals?: GoalOrderByRelationAggregateInput
    submittedReports?: GeneralReportOrderByRelationAggregateInput
    receivedReports?: GeneralReportOrderByRelationAggregateInput
    respondedReports?: GeneralReportOrderByRelationAggregateInput
    goalReports?: GoalReportOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    sucursalId?: StringFilter<"User"> | string
    departmentId?: StringNullableFilter<"User"> | string | null
    supervisorId?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    supervisor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    subordinates?: UserListRelationFilter
    supervisedDepartments?: DepartmentListRelationFilter
    departmentSupervisors?: DepartmentListRelationFilter
    folders?: FolderListRelationFilter
    files?: FileListRelationFilter
    libraries?: LibraryListRelationFilter
    libraryMembers?: LibraryMemberListRelationFilter
    goals?: GoalAssignmentListRelationFilter
    notifications?: NotificationListRelationFilter
    scans?: ScanListRelationFilter
    createdGoals?: GoalListRelationFilter
    submittedReports?: GeneralReportListRelationFilter
    receivedReports?: GeneralReportListRelationFilter
    respondedReports?: GeneralReportListRelationFilter
    goalReports?: GoalReportListRelationFilter
    reports?: ReportListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    supervisorId?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    profilePicture?: StringNullableWithAggregatesFilter<"User"> | string | null
    sucursalId?: StringWithAggregatesFilter<"User"> | string
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    supervisorId?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type FolderWhereInput = {
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    parentId?: StringNullableFilter<"Folder"> | string | null
    userId?: StringFilter<"Folder"> | string
    sucursalId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    parent?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
    files?: FileListRelationFilter
  }

  export type FolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    parent?: FolderOrderByWithRelationInput
    children?: FolderOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
  }

  export type FolderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    parentId?: StringNullableFilter<"Folder"> | string | null
    userId?: StringFilter<"Folder"> | string
    sucursalId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    parent?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
    files?: FileListRelationFilter
  }, "id">

  export type FolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FolderCountOrderByAggregateInput
    _max?: FolderMaxOrderByAggregateInput
    _min?: FolderMinOrderByAggregateInput
  }

  export type FolderScalarWhereWithAggregatesInput = {
    AND?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    OR?: FolderScalarWhereWithAggregatesInput[]
    NOT?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Folder"> | string
    name?: StringWithAggregatesFilter<"Folder"> | string
    description?: StringNullableWithAggregatesFilter<"Folder"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Folder"> | string | null
    userId?: StringWithAggregatesFilter<"Folder"> | string
    sucursalId?: StringWithAggregatesFilter<"Folder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    originalName?: StringNullableFilter<"File"> | string | null
    description?: StringNullableFilter<"File"> | string | null
    url?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    type?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    isPublic?: BoolFilter<"File"> | boolean
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringFilter<"File"> | string
    sucursalId?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    folder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    reports?: ReportFileListRelationFilter
    generalReports?: GeneralReportFileListRelationFilter
    goalReports?: GoalReportFileListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    size?: SortOrder
    type?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    folderId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    folder?: FolderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    reports?: ReportFileOrderByRelationAggregateInput
    generalReports?: GeneralReportFileOrderByRelationAggregateInput
    goalReports?: GoalReportFileOrderByRelationAggregateInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    originalName?: StringNullableFilter<"File"> | string | null
    description?: StringNullableFilter<"File"> | string | null
    url?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    type?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    isPublic?: BoolFilter<"File"> | boolean
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringFilter<"File"> | string
    sucursalId?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    folder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    reports?: ReportFileListRelationFilter
    generalReports?: GeneralReportFileListRelationFilter
    goalReports?: GoalReportFileListRelationFilter
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    size?: SortOrder
    type?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    folderId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    originalName?: StringNullableWithAggregatesFilter<"File"> | string | null
    description?: StringNullableWithAggregatesFilter<"File"> | string | null
    url?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    type?: StringWithAggregatesFilter<"File"> | string
    mimeType?: StringNullableWithAggregatesFilter<"File"> | string | null
    isPublic?: BoolWithAggregatesFilter<"File"> | boolean
    folderId?: StringNullableWithAggregatesFilter<"File"> | string | null
    userId?: StringWithAggregatesFilter<"File"> | string
    sucursalId?: StringWithAggregatesFilter<"File"> | string
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type LibraryWhereInput = {
    AND?: LibraryWhereInput | LibraryWhereInput[]
    OR?: LibraryWhereInput[]
    NOT?: LibraryWhereInput | LibraryWhereInput[]
    id?: StringFilter<"Library"> | string
    name?: StringFilter<"Library"> | string
    description?: StringNullableFilter<"Library"> | string | null
    userId?: StringFilter<"Library"> | string
    sucursalId?: StringFilter<"Library"> | string
    createdAt?: DateTimeFilter<"Library"> | Date | string
    updatedAt?: DateTimeFilter<"Library"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    members?: LibraryMemberListRelationFilter
  }

  export type LibraryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    members?: LibraryMemberOrderByRelationAggregateInput
  }

  export type LibraryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LibraryWhereInput | LibraryWhereInput[]
    OR?: LibraryWhereInput[]
    NOT?: LibraryWhereInput | LibraryWhereInput[]
    name?: StringFilter<"Library"> | string
    description?: StringNullableFilter<"Library"> | string | null
    userId?: StringFilter<"Library"> | string
    sucursalId?: StringFilter<"Library"> | string
    createdAt?: DateTimeFilter<"Library"> | Date | string
    updatedAt?: DateTimeFilter<"Library"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    members?: LibraryMemberListRelationFilter
  }, "id">

  export type LibraryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryCountOrderByAggregateInput
    _max?: LibraryMaxOrderByAggregateInput
    _min?: LibraryMinOrderByAggregateInput
  }

  export type LibraryScalarWhereWithAggregatesInput = {
    AND?: LibraryScalarWhereWithAggregatesInput | LibraryScalarWhereWithAggregatesInput[]
    OR?: LibraryScalarWhereWithAggregatesInput[]
    NOT?: LibraryScalarWhereWithAggregatesInput | LibraryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Library"> | string
    name?: StringWithAggregatesFilter<"Library"> | string
    description?: StringNullableWithAggregatesFilter<"Library"> | string | null
    userId?: StringWithAggregatesFilter<"Library"> | string
    sucursalId?: StringWithAggregatesFilter<"Library"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Library"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Library"> | Date | string
  }

  export type LibraryMemberWhereInput = {
    AND?: LibraryMemberWhereInput | LibraryMemberWhereInput[]
    OR?: LibraryMemberWhereInput[]
    NOT?: LibraryMemberWhereInput | LibraryMemberWhereInput[]
    id?: StringFilter<"LibraryMember"> | string
    libraryId?: StringFilter<"LibraryMember"> | string
    userId?: StringFilter<"LibraryMember"> | string
    createdAt?: DateTimeFilter<"LibraryMember"> | Date | string
    library?: XOR<LibraryRelationFilter, LibraryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LibraryMemberOrderByWithRelationInput = {
    id?: SortOrder
    libraryId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    library?: LibraryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LibraryMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    libraryId_userId?: LibraryMemberLibraryIdUserIdCompoundUniqueInput
    AND?: LibraryMemberWhereInput | LibraryMemberWhereInput[]
    OR?: LibraryMemberWhereInput[]
    NOT?: LibraryMemberWhereInput | LibraryMemberWhereInput[]
    libraryId?: StringFilter<"LibraryMember"> | string
    userId?: StringFilter<"LibraryMember"> | string
    createdAt?: DateTimeFilter<"LibraryMember"> | Date | string
    library?: XOR<LibraryRelationFilter, LibraryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "libraryId_userId">

  export type LibraryMemberOrderByWithAggregationInput = {
    id?: SortOrder
    libraryId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LibraryMemberCountOrderByAggregateInput
    _max?: LibraryMemberMaxOrderByAggregateInput
    _min?: LibraryMemberMinOrderByAggregateInput
  }

  export type LibraryMemberScalarWhereWithAggregatesInput = {
    AND?: LibraryMemberScalarWhereWithAggregatesInput | LibraryMemberScalarWhereWithAggregatesInput[]
    OR?: LibraryMemberScalarWhereWithAggregatesInput[]
    NOT?: LibraryMemberScalarWhereWithAggregatesInput | LibraryMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LibraryMember"> | string
    libraryId?: StringWithAggregatesFilter<"LibraryMember"> | string
    userId?: StringWithAggregatesFilter<"LibraryMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LibraryMember"> | Date | string
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    progress?: IntFilter<"Goal"> | number
    departmentId?: StringFilter<"Goal"> | string
    createdById?: StringFilter<"Goal"> | string
    sucursalId?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    assignments?: GoalAssignmentListRelationFilter
    reports?: GoalReportListRelationFilter
    generalReports?: ReportListRelationFilter
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    departmentId?: SortOrder
    createdById?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    assignments?: GoalAssignmentOrderByRelationAggregateInput
    reports?: GoalReportOrderByRelationAggregateInput
    generalReports?: ReportOrderByRelationAggregateInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    progress?: IntFilter<"Goal"> | number
    departmentId?: StringFilter<"Goal"> | string
    createdById?: StringFilter<"Goal"> | string
    sucursalId?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    assignments?: GoalAssignmentListRelationFilter
    reports?: GoalReportListRelationFilter
    generalReports?: ReportListRelationFilter
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    departmentId?: SortOrder
    createdById?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    name?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    status?: StringWithAggregatesFilter<"Goal"> | string
    priority?: StringWithAggregatesFilter<"Goal"> | string
    progress?: IntWithAggregatesFilter<"Goal"> | number
    departmentId?: StringWithAggregatesFilter<"Goal"> | string
    createdById?: StringWithAggregatesFilter<"Goal"> | string
    sucursalId?: StringWithAggregatesFilter<"Goal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
  }

  export type GoalReportWhereInput = {
    AND?: GoalReportWhereInput | GoalReportWhereInput[]
    OR?: GoalReportWhereInput[]
    NOT?: GoalReportWhereInput | GoalReportWhereInput[]
    id?: StringFilter<"GoalReport"> | string
    title?: StringFilter<"GoalReport"> | string
    description?: StringFilter<"GoalReport"> | string
    goalId?: StringFilter<"GoalReport"> | string
    submittedById?: StringFilter<"GoalReport"> | string
    isCompletion?: BoolFilter<"GoalReport"> | boolean
    status?: StringFilter<"GoalReport"> | string
    createdAt?: DateTimeFilter<"GoalReport"> | Date | string
    updatedAt?: DateTimeFilter<"GoalReport"> | Date | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    submittedBy?: XOR<UserRelationFilter, UserWhereInput>
    files?: GoalReportFileListRelationFilter
  }

  export type GoalReportOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    submittedById?: SortOrder
    isCompletion?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    goal?: GoalOrderByWithRelationInput
    submittedBy?: UserOrderByWithRelationInput
    files?: GoalReportFileOrderByRelationAggregateInput
  }

  export type GoalReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalReportWhereInput | GoalReportWhereInput[]
    OR?: GoalReportWhereInput[]
    NOT?: GoalReportWhereInput | GoalReportWhereInput[]
    title?: StringFilter<"GoalReport"> | string
    description?: StringFilter<"GoalReport"> | string
    goalId?: StringFilter<"GoalReport"> | string
    submittedById?: StringFilter<"GoalReport"> | string
    isCompletion?: BoolFilter<"GoalReport"> | boolean
    status?: StringFilter<"GoalReport"> | string
    createdAt?: DateTimeFilter<"GoalReport"> | Date | string
    updatedAt?: DateTimeFilter<"GoalReport"> | Date | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    submittedBy?: XOR<UserRelationFilter, UserWhereInput>
    files?: GoalReportFileListRelationFilter
  }, "id">

  export type GoalReportOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    submittedById?: SortOrder
    isCompletion?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoalReportCountOrderByAggregateInput
    _max?: GoalReportMaxOrderByAggregateInput
    _min?: GoalReportMinOrderByAggregateInput
  }

  export type GoalReportScalarWhereWithAggregatesInput = {
    AND?: GoalReportScalarWhereWithAggregatesInput | GoalReportScalarWhereWithAggregatesInput[]
    OR?: GoalReportScalarWhereWithAggregatesInput[]
    NOT?: GoalReportScalarWhereWithAggregatesInput | GoalReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalReport"> | string
    title?: StringWithAggregatesFilter<"GoalReport"> | string
    description?: StringWithAggregatesFilter<"GoalReport"> | string
    goalId?: StringWithAggregatesFilter<"GoalReport"> | string
    submittedById?: StringWithAggregatesFilter<"GoalReport"> | string
    isCompletion?: BoolWithAggregatesFilter<"GoalReport"> | boolean
    status?: StringWithAggregatesFilter<"GoalReport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GoalReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GoalReport"> | Date | string
  }

  export type GoalReportFileWhereInput = {
    AND?: GoalReportFileWhereInput | GoalReportFileWhereInput[]
    OR?: GoalReportFileWhereInput[]
    NOT?: GoalReportFileWhereInput | GoalReportFileWhereInput[]
    id?: StringFilter<"GoalReportFile"> | string
    goalReportId?: StringFilter<"GoalReportFile"> | string
    fileId?: StringFilter<"GoalReportFile"> | string
    goalReport?: XOR<GoalReportRelationFilter, GoalReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }

  export type GoalReportFileOrderByWithRelationInput = {
    id?: SortOrder
    goalReportId?: SortOrder
    fileId?: SortOrder
    goalReport?: GoalReportOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
  }

  export type GoalReportFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    goalReportId_fileId?: GoalReportFileGoalReportIdFileIdCompoundUniqueInput
    AND?: GoalReportFileWhereInput | GoalReportFileWhereInput[]
    OR?: GoalReportFileWhereInput[]
    NOT?: GoalReportFileWhereInput | GoalReportFileWhereInput[]
    goalReportId?: StringFilter<"GoalReportFile"> | string
    fileId?: StringFilter<"GoalReportFile"> | string
    goalReport?: XOR<GoalReportRelationFilter, GoalReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }, "id" | "goalReportId_fileId">

  export type GoalReportFileOrderByWithAggregationInput = {
    id?: SortOrder
    goalReportId?: SortOrder
    fileId?: SortOrder
    _count?: GoalReportFileCountOrderByAggregateInput
    _max?: GoalReportFileMaxOrderByAggregateInput
    _min?: GoalReportFileMinOrderByAggregateInput
  }

  export type GoalReportFileScalarWhereWithAggregatesInput = {
    AND?: GoalReportFileScalarWhereWithAggregatesInput | GoalReportFileScalarWhereWithAggregatesInput[]
    OR?: GoalReportFileScalarWhereWithAggregatesInput[]
    NOT?: GoalReportFileScalarWhereWithAggregatesInput | GoalReportFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalReportFile"> | string
    goalReportId?: StringWithAggregatesFilter<"GoalReportFile"> | string
    fileId?: StringWithAggregatesFilter<"GoalReportFile"> | string
  }

  export type GoalAssignmentWhereInput = {
    AND?: GoalAssignmentWhereInput | GoalAssignmentWhereInput[]
    OR?: GoalAssignmentWhereInput[]
    NOT?: GoalAssignmentWhereInput | GoalAssignmentWhereInput[]
    id?: StringFilter<"GoalAssignment"> | string
    goalId?: StringFilter<"GoalAssignment"> | string
    userId?: StringFilter<"GoalAssignment"> | string
    assignedAt?: DateTimeFilter<"GoalAssignment"> | Date | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GoalAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    goal?: GoalOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GoalAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    goalId_userId?: GoalAssignmentGoalIdUserIdCompoundUniqueInput
    AND?: GoalAssignmentWhereInput | GoalAssignmentWhereInput[]
    OR?: GoalAssignmentWhereInput[]
    NOT?: GoalAssignmentWhereInput | GoalAssignmentWhereInput[]
    goalId?: StringFilter<"GoalAssignment"> | string
    userId?: StringFilter<"GoalAssignment"> | string
    assignedAt?: DateTimeFilter<"GoalAssignment"> | Date | string
    goal?: XOR<GoalRelationFilter, GoalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "goalId_userId">

  export type GoalAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    _count?: GoalAssignmentCountOrderByAggregateInput
    _max?: GoalAssignmentMaxOrderByAggregateInput
    _min?: GoalAssignmentMinOrderByAggregateInput
  }

  export type GoalAssignmentScalarWhereWithAggregatesInput = {
    AND?: GoalAssignmentScalarWhereWithAggregatesInput | GoalAssignmentScalarWhereWithAggregatesInput[]
    OR?: GoalAssignmentScalarWhereWithAggregatesInput[]
    NOT?: GoalAssignmentScalarWhereWithAggregatesInput | GoalAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalAssignment"> | string
    goalId?: StringWithAggregatesFilter<"GoalAssignment"> | string
    userId?: StringWithAggregatesFilter<"GoalAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"GoalAssignment"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    title?: StringFilter<"Report"> | string
    description?: StringNullableFilter<"Report"> | string | null
    goalId?: StringNullableFilter<"Report"> | string | null
    userId?: StringFilter<"Report"> | string
    sucursalId?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    goal?: XOR<GoalNullableRelationFilter, GoalWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    files?: ReportFileListRelationFilter
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    goalId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    goal?: GoalOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    files?: ReportFileOrderByRelationAggregateInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    title?: StringFilter<"Report"> | string
    description?: StringNullableFilter<"Report"> | string | null
    goalId?: StringNullableFilter<"Report"> | string | null
    userId?: StringFilter<"Report"> | string
    sucursalId?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    goal?: XOR<GoalNullableRelationFilter, GoalWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    files?: ReportFileListRelationFilter
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    goalId?: SortOrderInput | SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    title?: StringWithAggregatesFilter<"Report"> | string
    description?: StringNullableWithAggregatesFilter<"Report"> | string | null
    goalId?: StringNullableWithAggregatesFilter<"Report"> | string | null
    userId?: StringWithAggregatesFilter<"Report"> | string
    sucursalId?: StringWithAggregatesFilter<"Report"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
  }

  export type GeneralReportWhereInput = {
    AND?: GeneralReportWhereInput | GeneralReportWhereInput[]
    OR?: GeneralReportWhereInput[]
    NOT?: GeneralReportWhereInput | GeneralReportWhereInput[]
    id?: StringFilter<"GeneralReport"> | string
    title?: StringFilter<"GeneralReport"> | string
    description?: StringFilter<"GeneralReport"> | string
    type?: StringFilter<"GeneralReport"> | string
    status?: StringFilter<"GeneralReport"> | string
    submittedById?: StringFilter<"GeneralReport"> | string
    submittedToId?: StringNullableFilter<"GeneralReport"> | string | null
    respondedById?: StringNullableFilter<"GeneralReport"> | string | null
    response?: StringNullableFilter<"GeneralReport"> | string | null
    submittedAt?: DateTimeFilter<"GeneralReport"> | Date | string
    respondedAt?: DateTimeNullableFilter<"GeneralReport"> | Date | string | null
    sucursalId?: StringFilter<"GeneralReport"> | string
    createdAt?: DateTimeFilter<"GeneralReport"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralReport"> | Date | string
    submittedBy?: XOR<UserRelationFilter, UserWhereInput>
    submittedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    respondedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    attachments?: GeneralReportFileListRelationFilter
  }

  export type GeneralReportOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    submittedById?: SortOrder
    submittedToId?: SortOrderInput | SortOrder
    respondedById?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submittedBy?: UserOrderByWithRelationInput
    submittedTo?: UserOrderByWithRelationInput
    respondedBy?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
    attachments?: GeneralReportFileOrderByRelationAggregateInput
  }

  export type GeneralReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneralReportWhereInput | GeneralReportWhereInput[]
    OR?: GeneralReportWhereInput[]
    NOT?: GeneralReportWhereInput | GeneralReportWhereInput[]
    title?: StringFilter<"GeneralReport"> | string
    description?: StringFilter<"GeneralReport"> | string
    type?: StringFilter<"GeneralReport"> | string
    status?: StringFilter<"GeneralReport"> | string
    submittedById?: StringFilter<"GeneralReport"> | string
    submittedToId?: StringNullableFilter<"GeneralReport"> | string | null
    respondedById?: StringNullableFilter<"GeneralReport"> | string | null
    response?: StringNullableFilter<"GeneralReport"> | string | null
    submittedAt?: DateTimeFilter<"GeneralReport"> | Date | string
    respondedAt?: DateTimeNullableFilter<"GeneralReport"> | Date | string | null
    sucursalId?: StringFilter<"GeneralReport"> | string
    createdAt?: DateTimeFilter<"GeneralReport"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralReport"> | Date | string
    submittedBy?: XOR<UserRelationFilter, UserWhereInput>
    submittedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    respondedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
    attachments?: GeneralReportFileListRelationFilter
  }, "id">

  export type GeneralReportOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    submittedById?: SortOrder
    submittedToId?: SortOrderInput | SortOrder
    respondedById?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GeneralReportCountOrderByAggregateInput
    _max?: GeneralReportMaxOrderByAggregateInput
    _min?: GeneralReportMinOrderByAggregateInput
  }

  export type GeneralReportScalarWhereWithAggregatesInput = {
    AND?: GeneralReportScalarWhereWithAggregatesInput | GeneralReportScalarWhereWithAggregatesInput[]
    OR?: GeneralReportScalarWhereWithAggregatesInput[]
    NOT?: GeneralReportScalarWhereWithAggregatesInput | GeneralReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneralReport"> | string
    title?: StringWithAggregatesFilter<"GeneralReport"> | string
    description?: StringWithAggregatesFilter<"GeneralReport"> | string
    type?: StringWithAggregatesFilter<"GeneralReport"> | string
    status?: StringWithAggregatesFilter<"GeneralReport"> | string
    submittedById?: StringWithAggregatesFilter<"GeneralReport"> | string
    submittedToId?: StringNullableWithAggregatesFilter<"GeneralReport"> | string | null
    respondedById?: StringNullableWithAggregatesFilter<"GeneralReport"> | string | null
    response?: StringNullableWithAggregatesFilter<"GeneralReport"> | string | null
    submittedAt?: DateTimeWithAggregatesFilter<"GeneralReport"> | Date | string
    respondedAt?: DateTimeNullableWithAggregatesFilter<"GeneralReport"> | Date | string | null
    sucursalId?: StringWithAggregatesFilter<"GeneralReport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneralReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GeneralReport"> | Date | string
  }

  export type GeneralReportFileWhereInput = {
    AND?: GeneralReportFileWhereInput | GeneralReportFileWhereInput[]
    OR?: GeneralReportFileWhereInput[]
    NOT?: GeneralReportFileWhereInput | GeneralReportFileWhereInput[]
    id?: StringFilter<"GeneralReportFile"> | string
    generalReportId?: StringFilter<"GeneralReportFile"> | string
    fileId?: StringFilter<"GeneralReportFile"> | string
    generalReport?: XOR<GeneralReportRelationFilter, GeneralReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }

  export type GeneralReportFileOrderByWithRelationInput = {
    id?: SortOrder
    generalReportId?: SortOrder
    fileId?: SortOrder
    generalReport?: GeneralReportOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
  }

  export type GeneralReportFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    generalReportId_fileId?: GeneralReportFileGeneralReportIdFileIdCompoundUniqueInput
    AND?: GeneralReportFileWhereInput | GeneralReportFileWhereInput[]
    OR?: GeneralReportFileWhereInput[]
    NOT?: GeneralReportFileWhereInput | GeneralReportFileWhereInput[]
    generalReportId?: StringFilter<"GeneralReportFile"> | string
    fileId?: StringFilter<"GeneralReportFile"> | string
    generalReport?: XOR<GeneralReportRelationFilter, GeneralReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }, "id" | "generalReportId_fileId">

  export type GeneralReportFileOrderByWithAggregationInput = {
    id?: SortOrder
    generalReportId?: SortOrder
    fileId?: SortOrder
    _count?: GeneralReportFileCountOrderByAggregateInput
    _max?: GeneralReportFileMaxOrderByAggregateInput
    _min?: GeneralReportFileMinOrderByAggregateInput
  }

  export type GeneralReportFileScalarWhereWithAggregatesInput = {
    AND?: GeneralReportFileScalarWhereWithAggregatesInput | GeneralReportFileScalarWhereWithAggregatesInput[]
    OR?: GeneralReportFileScalarWhereWithAggregatesInput[]
    NOT?: GeneralReportFileScalarWhereWithAggregatesInput | GeneralReportFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneralReportFile"> | string
    generalReportId?: StringWithAggregatesFilter<"GeneralReportFile"> | string
    fileId?: StringWithAggregatesFilter<"GeneralReportFile"> | string
  }

  export type ReportFileWhereInput = {
    AND?: ReportFileWhereInput | ReportFileWhereInput[]
    OR?: ReportFileWhereInput[]
    NOT?: ReportFileWhereInput | ReportFileWhereInput[]
    id?: StringFilter<"ReportFile"> | string
    reportId?: StringFilter<"ReportFile"> | string
    fileId?: StringFilter<"ReportFile"> | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }

  export type ReportFileOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileId?: SortOrder
    report?: ReportOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
  }

  export type ReportFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reportId_fileId?: ReportFileReportIdFileIdCompoundUniqueInput
    AND?: ReportFileWhereInput | ReportFileWhereInput[]
    OR?: ReportFileWhereInput[]
    NOT?: ReportFileWhereInput | ReportFileWhereInput[]
    reportId?: StringFilter<"ReportFile"> | string
    fileId?: StringFilter<"ReportFile"> | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    file?: XOR<FileRelationFilter, FileWhereInput>
  }, "id" | "reportId_fileId">

  export type ReportFileOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileId?: SortOrder
    _count?: ReportFileCountOrderByAggregateInput
    _max?: ReportFileMaxOrderByAggregateInput
    _min?: ReportFileMinOrderByAggregateInput
  }

  export type ReportFileScalarWhereWithAggregatesInput = {
    AND?: ReportFileScalarWhereWithAggregatesInput | ReportFileScalarWhereWithAggregatesInput[]
    OR?: ReportFileScalarWhereWithAggregatesInput[]
    NOT?: ReportFileScalarWhereWithAggregatesInput | ReportFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportFile"> | string
    reportId?: StringWithAggregatesFilter<"ReportFile"> | string
    fileId?: StringWithAggregatesFilter<"ReportFile"> | string
  }

  export type ScanWhereInput = {
    AND?: ScanWhereInput | ScanWhereInput[]
    OR?: ScanWhereInput[]
    NOT?: ScanWhereInput | ScanWhereInput[]
    id?: StringFilter<"Scan"> | string
    title?: StringFilter<"Scan"> | string
    userId?: StringFilter<"Scan"> | string
    sucursalId?: StringFilter<"Scan"> | string
    images?: StringFilter<"Scan"> | string
    pdfUrl?: StringNullableFilter<"Scan"> | string | null
    createdAt?: DateTimeFilter<"Scan"> | Date | string
    updatedAt?: DateTimeFilter<"Scan"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }

  export type ScanOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    images?: SortOrder
    pdfUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
  }

  export type ScanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScanWhereInput | ScanWhereInput[]
    OR?: ScanWhereInput[]
    NOT?: ScanWhereInput | ScanWhereInput[]
    title?: StringFilter<"Scan"> | string
    userId?: StringFilter<"Scan"> | string
    sucursalId?: StringFilter<"Scan"> | string
    images?: StringFilter<"Scan"> | string
    pdfUrl?: StringNullableFilter<"Scan"> | string | null
    createdAt?: DateTimeFilter<"Scan"> | Date | string
    updatedAt?: DateTimeFilter<"Scan"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }, "id">

  export type ScanOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    images?: SortOrder
    pdfUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScanCountOrderByAggregateInput
    _max?: ScanMaxOrderByAggregateInput
    _min?: ScanMinOrderByAggregateInput
  }

  export type ScanScalarWhereWithAggregatesInput = {
    AND?: ScanScalarWhereWithAggregatesInput | ScanScalarWhereWithAggregatesInput[]
    OR?: ScanScalarWhereWithAggregatesInput[]
    NOT?: ScanScalarWhereWithAggregatesInput | ScanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Scan"> | string
    title?: StringWithAggregatesFilter<"Scan"> | string
    userId?: StringWithAggregatesFilter<"Scan"> | string
    sucursalId?: StringWithAggregatesFilter<"Scan"> | string
    images?: StringWithAggregatesFilter<"Scan"> | string
    pdfUrl?: StringNullableWithAggregatesFilter<"Scan"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Scan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Scan"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    description?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    sucursalId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sucursal?: SucursalOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    description?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    sucursalId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    description?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    userId?: StringWithAggregatesFilter<"Notification"> | string
    sucursalId?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ErrorLogWhereInput = {
    AND?: ErrorLogWhereInput | ErrorLogWhereInput[]
    OR?: ErrorLogWhereInput[]
    NOT?: ErrorLogWhereInput | ErrorLogWhereInput[]
    id?: StringFilter<"ErrorLog"> | string
    sucursalId?: StringFilter<"ErrorLog"> | string
    errorType?: StringFilter<"ErrorLog"> | string
    description?: StringFilter<"ErrorLog"> | string
    errorDetails?: StringNullableFilter<"ErrorLog"> | string | null
    createdAt?: DateTimeFilter<"ErrorLog"> | Date | string
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }

  export type ErrorLogOrderByWithRelationInput = {
    id?: SortOrder
    sucursalId?: SortOrder
    errorType?: SortOrder
    description?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sucursal?: SucursalOrderByWithRelationInput
  }

  export type ErrorLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ErrorLogWhereInput | ErrorLogWhereInput[]
    OR?: ErrorLogWhereInput[]
    NOT?: ErrorLogWhereInput | ErrorLogWhereInput[]
    sucursalId?: StringFilter<"ErrorLog"> | string
    errorType?: StringFilter<"ErrorLog"> | string
    description?: StringFilter<"ErrorLog"> | string
    errorDetails?: StringNullableFilter<"ErrorLog"> | string | null
    createdAt?: DateTimeFilter<"ErrorLog"> | Date | string
    sucursal?: XOR<SucursalRelationFilter, SucursalWhereInput>
  }, "id">

  export type ErrorLogOrderByWithAggregationInput = {
    id?: SortOrder
    sucursalId?: SortOrder
    errorType?: SortOrder
    description?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ErrorLogCountOrderByAggregateInput
    _max?: ErrorLogMaxOrderByAggregateInput
    _min?: ErrorLogMinOrderByAggregateInput
  }

  export type ErrorLogScalarWhereWithAggregatesInput = {
    AND?: ErrorLogScalarWhereWithAggregatesInput | ErrorLogScalarWhereWithAggregatesInput[]
    OR?: ErrorLogScalarWhereWithAggregatesInput[]
    NOT?: ErrorLogScalarWhereWithAggregatesInput | ErrorLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ErrorLog"> | string
    sucursalId?: StringWithAggregatesFilter<"ErrorLog"> | string
    errorType?: StringWithAggregatesFilter<"ErrorLog"> | string
    description?: StringWithAggregatesFilter<"ErrorLog"> | string
    errorDetails?: StringNullableWithAggregatesFilter<"ErrorLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ErrorLog"> | Date | string
  }

  export type SucursalCreateInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SucursalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionCreateInput = {
    id?: string
    createdAt?: Date | string
    sourceSucursal: SucursalCreateNestedOneWithoutSourceConnectionsInput
    targetSucursal: SucursalCreateNestedOneWithoutTargetConnectionsInput
  }

  export type SucursalConnectionUncheckedCreateInput = {
    id?: string
    sourceSucursalId: string
    targetSucursalId: string
    createdAt?: Date | string
  }

  export type SucursalConnectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceSucursal?: SucursalUpdateOneRequiredWithoutSourceConnectionsNestedInput
    targetSucursal?: SucursalUpdateOneRequiredWithoutTargetConnectionsNestedInput
  }

  export type SucursalConnectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceSucursalId?: StringFieldUpdateOperationsInput | string
    targetSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionCreateManyInput = {
    id?: string
    sourceSucursalId: string
    targetSucursalId: string
    createdAt?: Date | string
  }

  export type SucursalConnectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceSucursalId?: StringFieldUpdateOperationsInput | string
    targetSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutDepartmentsInput
    supervisor?: UserCreateNestedOneWithoutSupervisedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    supervisors?: UserCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    supervisors?: UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutDepartmentsNestedInput
    supervisor?: UserUpdateOneWithoutSupervisedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FolderCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFoldersInput
    sucursal: SucursalCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    user: UserCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLibrariesInput
    sucursal: SucursalCreateNestedOneWithoutLibrariesInput
    members?: LibraryMemberCreateNestedManyWithoutLibraryInput
  }

  export type LibraryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: LibraryMemberUncheckedCreateNestedManyWithoutLibraryInput
  }

  export type LibraryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLibrariesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutLibrariesNestedInput
    members?: LibraryMemberUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: LibraryMemberUncheckedUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberCreateInput = {
    id?: string
    createdAt?: Date | string
    library: LibraryCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutLibraryMembersInput
  }

  export type LibraryMemberUncheckedCreateInput = {
    id?: string
    libraryId: string
    userId: string
    createdAt?: Date | string
  }

  export type LibraryMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    library?: LibraryUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutLibraryMembersNestedInput
  }

  export type LibraryMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    libraryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberCreateManyInput = {
    id?: string
    libraryId: string
    userId: string
    createdAt?: Date | string
  }

  export type LibraryMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    libraryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportCreateInput = {
    id?: string
    title: string
    description: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    goal: GoalCreateNestedOneWithoutReportsInput
    submittedBy: UserCreateNestedOneWithoutGoalReportsInput
    files?: GoalReportFileCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    goalId: string
    submittedById: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: GoalReportFileUncheckedCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutReportsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutGoalReportsNestedInput
    files?: GoalReportFileUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: GoalReportFileUncheckedUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportCreateManyInput = {
    id?: string
    title: string
    description: string
    goalId: string
    submittedById: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportFileCreateInput = {
    id?: string
    goalReport: GoalReportCreateNestedOneWithoutFilesInput
    file: FileCreateNestedOneWithoutGoalReportsInput
  }

  export type GoalReportFileUncheckedCreateInput = {
    id?: string
    goalReportId: string
    fileId: string
  }

  export type GoalReportFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReport?: GoalReportUpdateOneRequiredWithoutFilesNestedInput
    file?: FileUpdateOneRequiredWithoutGoalReportsNestedInput
  }

  export type GoalReportFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalReportFileCreateManyInput = {
    id?: string
    goalReportId: string
    fileId: string
  }

  export type GoalReportFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GoalReportFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalAssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    goal: GoalCreateNestedOneWithoutAssignmentsInput
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalAssignmentUncheckedCreateInput = {
    id?: string
    goalId: string
    userId: string
    assignedAt?: Date | string
  }

  export type GoalAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutAssignmentsNestedInput
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentCreateManyInput = {
    id?: string
    goalId: string
    userId: string
    assignedAt?: Date | string
  }

  export type GoalAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    id?: string
    title: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: GoalCreateNestedOneWithoutGeneralReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    sucursal: SucursalCreateNestedOneWithoutReportsInput
    files?: ReportFileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: ReportFileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneWithoutGeneralReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutReportsNestedInput
    files?: ReportFileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: ReportFileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportCreateInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedReportsInput
    submittedTo?: UserCreateNestedOneWithoutReceivedReportsInput
    respondedBy?: UserCreateNestedOneWithoutRespondedReportsInput
    sucursal: SucursalCreateNestedOneWithoutGeneralReportsInput
    attachments?: GeneralReportFileCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
    submittedTo?: UserUpdateOneWithoutReceivedReportsNestedInput
    respondedBy?: UserUpdateOneWithoutRespondedReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput
    attachments?: GeneralReportFileUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportCreateManyInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportFileCreateInput = {
    id?: string
    generalReport: GeneralReportCreateNestedOneWithoutAttachmentsInput
    file: FileCreateNestedOneWithoutGeneralReportsInput
  }

  export type GeneralReportFileUncheckedCreateInput = {
    id?: string
    generalReportId: string
    fileId: string
  }

  export type GeneralReportFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReport?: GeneralReportUpdateOneRequiredWithoutAttachmentsNestedInput
    file?: FileUpdateOneRequiredWithoutGeneralReportsNestedInput
  }

  export type GeneralReportFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileCreateManyInput = {
    id?: string
    generalReportId: string
    fileId: string
  }

  export type GeneralReportFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileCreateInput = {
    id?: string
    report: ReportCreateNestedOneWithoutFilesInput
    file: FileCreateNestedOneWithoutReportsInput
  }

  export type ReportFileUncheckedCreateInput = {
    id?: string
    reportId: string
    fileId: string
  }

  export type ReportFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    report?: ReportUpdateOneRequiredWithoutFilesNestedInput
    file?: FileUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileCreateManyInput = {
    id?: string
    reportId: string
    fileId: string
  }

  export type ReportFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type ScanCreateInput = {
    id?: string
    title: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutScansInput
    sucursal: SucursalCreateNestedOneWithoutScansInput
  }

  export type ScanUncheckedCreateInput = {
    id?: string
    title: string
    userId: string
    sucursalId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScansNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutScansNestedInput
  }

  export type ScanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanCreateManyInput = {
    id?: string
    title: string
    userId: string
    sucursalId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    sucursal: SucursalCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    userId: string
    sucursalId: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    userId: string
    sucursalId: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogCreateInput = {
    id?: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutErrorLogsInput
  }

  export type ErrorLogUncheckedCreateInput = {
    id?: string
    sucursalId: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type ErrorLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutErrorLogsNestedInput
  }

  export type ErrorLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogCreateManyInput = {
    id?: string
    sucursalId: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type ErrorLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type LibraryListRelationFilter = {
    every?: LibraryWhereInput
    some?: LibraryWhereInput
    none?: LibraryWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type GeneralReportListRelationFilter = {
    every?: GeneralReportWhereInput
    some?: GeneralReportWhereInput
    none?: GeneralReportWhereInput
  }

  export type FolderListRelationFilter = {
    every?: FolderWhereInput
    some?: FolderWhereInput
    none?: FolderWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ErrorLogListRelationFilter = {
    every?: ErrorLogWhereInput
    some?: ErrorLogWhereInput
    none?: ErrorLogWhereInput
  }

  export type ScanListRelationFilter = {
    every?: ScanWhereInput
    some?: ScanWhereInput
    none?: ScanWhereInput
  }

  export type SucursalConnectionListRelationFilter = {
    every?: SucursalConnectionWhereInput
    some?: SucursalConnectionWhereInput
    none?: SucursalConnectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneralReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ErrorLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SucursalConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SucursalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    serverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SucursalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    serverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SucursalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    serverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SucursalRelationFilter = {
    is?: SucursalWhereInput
    isNot?: SucursalWhereInput
  }

  export type SucursalConnectionSourceSucursalIdTargetSucursalIdCompoundUniqueInput = {
    sourceSucursalId: string
    targetSucursalId: string
  }

  export type SucursalConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    sourceSucursalId?: SortOrder
    targetSucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type SucursalConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceSucursalId?: SortOrder
    targetSucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type SucursalConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    sourceSucursalId?: SortOrder
    targetSucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DepartmentNameSucursalIdCompoundUniqueInput = {
    name: string
    sucursalId: string
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sucursalId?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sucursalId?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sucursalId?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type LibraryMemberListRelationFilter = {
    every?: LibraryMemberWhereInput
    some?: LibraryMemberWhereInput
    none?: LibraryMemberWhereInput
  }

  export type GoalAssignmentListRelationFilter = {
    every?: GoalAssignmentWhereInput
    some?: GoalAssignmentWhereInput
    none?: GoalAssignmentWhereInput
  }

  export type GoalReportListRelationFilter = {
    every?: GoalReportWhereInput
    some?: GoalReportWhereInput
    none?: GoalReportWhereInput
  }

  export type LibraryMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    sucursalId?: SortOrder
    departmentId?: SortOrder
    supervisorId?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    sucursalId?: SortOrder
    departmentId?: SortOrder
    supervisorId?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    sucursalId?: SortOrder
    departmentId?: SortOrder
    supervisorId?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FolderNullableRelationFilter = {
    is?: FolderWhereInput | null
    isNot?: FolderWhereInput | null
  }

  export type FolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ReportFileListRelationFilter = {
    every?: ReportFileWhereInput
    some?: ReportFileWhereInput
    none?: ReportFileWhereInput
  }

  export type GeneralReportFileListRelationFilter = {
    every?: GeneralReportFileWhereInput
    some?: GeneralReportFileWhereInput
    none?: GeneralReportFileWhereInput
  }

  export type GoalReportFileListRelationFilter = {
    every?: GoalReportFileWhereInput
    some?: GoalReportFileWhereInput
    none?: GoalReportFileWhereInput
  }

  export type ReportFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneralReportFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalReportFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    url?: SortOrder
    size?: SortOrder
    type?: SortOrder
    mimeType?: SortOrder
    isPublic?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    url?: SortOrder
    size?: SortOrder
    type?: SortOrder
    mimeType?: SortOrder
    isPublic?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    originalName?: SortOrder
    description?: SortOrder
    url?: SortOrder
    size?: SortOrder
    type?: SortOrder
    mimeType?: SortOrder
    isPublic?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LibraryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryRelationFilter = {
    is?: LibraryWhereInput
    isNot?: LibraryWhereInput
  }

  export type LibraryMemberLibraryIdUserIdCompoundUniqueInput = {
    libraryId: string
    userId: string
  }

  export type LibraryMemberCountOrderByAggregateInput = {
    id?: SortOrder
    libraryId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LibraryMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    libraryId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LibraryMemberMinOrderByAggregateInput = {
    id?: SortOrder
    libraryId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    departmentId?: SortOrder
    createdById?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    departmentId?: SortOrder
    createdById?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    departmentId?: SortOrder
    createdById?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type GoalRelationFilter = {
    is?: GoalWhereInput
    isNot?: GoalWhereInput
  }

  export type GoalReportCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    submittedById?: SortOrder
    isCompletion?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalReportMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    submittedById?: SortOrder
    isCompletion?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalReportMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    submittedById?: SortOrder
    isCompletion?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalReportRelationFilter = {
    is?: GoalReportWhereInput
    isNot?: GoalReportWhereInput
  }

  export type FileRelationFilter = {
    is?: FileWhereInput
    isNot?: FileWhereInput
  }

  export type GoalReportFileGoalReportIdFileIdCompoundUniqueInput = {
    goalReportId: string
    fileId: string
  }

  export type GoalReportFileCountOrderByAggregateInput = {
    id?: SortOrder
    goalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type GoalReportFileMaxOrderByAggregateInput = {
    id?: SortOrder
    goalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type GoalReportFileMinOrderByAggregateInput = {
    id?: SortOrder
    goalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type GoalAssignmentGoalIdUserIdCompoundUniqueInput = {
    goalId: string
    userId: string
  }

  export type GoalAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type GoalAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type GoalAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type GoalNullableRelationFilter = {
    is?: GoalWhereInput | null
    isNot?: GoalWhereInput | null
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    goalId?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralReportCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    submittedById?: SortOrder
    submittedToId?: SortOrder
    respondedById?: SortOrder
    response?: SortOrder
    submittedAt?: SortOrder
    respondedAt?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralReportMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    submittedById?: SortOrder
    submittedToId?: SortOrder
    respondedById?: SortOrder
    response?: SortOrder
    submittedAt?: SortOrder
    respondedAt?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralReportMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    submittedById?: SortOrder
    submittedToId?: SortOrder
    respondedById?: SortOrder
    response?: SortOrder
    submittedAt?: SortOrder
    respondedAt?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralReportRelationFilter = {
    is?: GeneralReportWhereInput
    isNot?: GeneralReportWhereInput
  }

  export type GeneralReportFileGeneralReportIdFileIdCompoundUniqueInput = {
    generalReportId: string
    fileId: string
  }

  export type GeneralReportFileCountOrderByAggregateInput = {
    id?: SortOrder
    generalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type GeneralReportFileMaxOrderByAggregateInput = {
    id?: SortOrder
    generalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type GeneralReportFileMinOrderByAggregateInput = {
    id?: SortOrder
    generalReportId?: SortOrder
    fileId?: SortOrder
  }

  export type ReportRelationFilter = {
    is?: ReportWhereInput
    isNot?: ReportWhereInput
  }

  export type ReportFileReportIdFileIdCompoundUniqueInput = {
    reportId: string
    fileId: string
  }

  export type ReportFileCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileId?: SortOrder
  }

  export type ReportFileMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileId?: SortOrder
  }

  export type ReportFileMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileId?: SortOrder
  }

  export type ScanCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    images?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScanMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    images?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScanMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    images?: SortOrder
    pdfUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    sucursalId?: SortOrder
    createdAt?: SortOrder
  }

  export type ErrorLogCountOrderByAggregateInput = {
    id?: SortOrder
    sucursalId?: SortOrder
    errorType?: SortOrder
    description?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type ErrorLogMaxOrderByAggregateInput = {
    id?: SortOrder
    sucursalId?: SortOrder
    errorType?: SortOrder
    description?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type ErrorLogMinOrderByAggregateInput = {
    id?: SortOrder
    sucursalId?: SortOrder
    errorType?: SortOrder
    description?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreateNestedManyWithoutSucursalInput = {
    create?: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput> | UserCreateWithoutSucursalInput[] | UserUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSucursalInput | UserCreateOrConnectWithoutSucursalInput[]
    createMany?: UserCreateManySucursalInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutSucursalInput = {
    create?: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput> | DepartmentCreateWithoutSucursalInput[] | DepartmentUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSucursalInput | DepartmentCreateOrConnectWithoutSucursalInput[]
    createMany?: DepartmentCreateManySucursalInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type LibraryCreateNestedManyWithoutSucursalInput = {
    create?: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput> | LibraryCreateWithoutSucursalInput[] | LibraryUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutSucursalInput | LibraryCreateOrConnectWithoutSucursalInput[]
    createMany?: LibraryCreateManySucursalInputEnvelope
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutSucursalInput = {
    create?: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput> | GoalCreateWithoutSucursalInput[] | GoalUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutSucursalInput | GoalCreateOrConnectWithoutSucursalInput[]
    createMany?: GoalCreateManySucursalInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput> | ReportCreateWithoutSucursalInput[] | ReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutSucursalInput | ReportCreateOrConnectWithoutSucursalInput[]
    createMany?: ReportCreateManySucursalInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type GeneralReportCreateNestedManyWithoutSucursalInput = {
    create?: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput> | GeneralReportCreateWithoutSucursalInput[] | GeneralReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSucursalInput | GeneralReportCreateOrConnectWithoutSucursalInput[]
    createMany?: GeneralReportCreateManySucursalInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type FolderCreateNestedManyWithoutSucursalInput = {
    create?: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput> | FolderCreateWithoutSucursalInput[] | FolderUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutSucursalInput | FolderCreateOrConnectWithoutSucursalInput[]
    createMany?: FolderCreateManySucursalInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutSucursalInput = {
    create?: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput> | FileCreateWithoutSucursalInput[] | FileUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSucursalInput | FileCreateOrConnectWithoutSucursalInput[]
    createMany?: FileCreateManySucursalInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutSucursalInput = {
    create?: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput> | NotificationCreateWithoutSucursalInput[] | NotificationUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSucursalInput | NotificationCreateOrConnectWithoutSucursalInput[]
    createMany?: NotificationCreateManySucursalInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ErrorLogCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput> | ErrorLogCreateWithoutSucursalInput[] | ErrorLogUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ErrorLogCreateOrConnectWithoutSucursalInput | ErrorLogCreateOrConnectWithoutSucursalInput[]
    createMany?: ErrorLogCreateManySucursalInputEnvelope
    connect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
  }

  export type ScanCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput> | ScanCreateWithoutSucursalInput[] | ScanUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutSucursalInput | ScanCreateOrConnectWithoutSucursalInput[]
    createMany?: ScanCreateManySucursalInputEnvelope
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
  }

  export type SucursalConnectionCreateNestedManyWithoutSourceSucursalInput = {
    create?: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput> | SucursalConnectionCreateWithoutSourceSucursalInput[] | SucursalConnectionUncheckedCreateWithoutSourceSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutSourceSucursalInput | SucursalConnectionCreateOrConnectWithoutSourceSucursalInput[]
    createMany?: SucursalConnectionCreateManySourceSucursalInputEnvelope
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
  }

  export type SucursalConnectionCreateNestedManyWithoutTargetSucursalInput = {
    create?: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput> | SucursalConnectionCreateWithoutTargetSucursalInput[] | SucursalConnectionUncheckedCreateWithoutTargetSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutTargetSucursalInput | SucursalConnectionCreateOrConnectWithoutTargetSucursalInput[]
    createMany?: SucursalConnectionCreateManyTargetSucursalInputEnvelope
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput> | UserCreateWithoutSucursalInput[] | UserUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSucursalInput | UserCreateOrConnectWithoutSucursalInput[]
    createMany?: UserCreateManySucursalInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput> | DepartmentCreateWithoutSucursalInput[] | DepartmentUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSucursalInput | DepartmentCreateOrConnectWithoutSucursalInput[]
    createMany?: DepartmentCreateManySucursalInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type LibraryUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput> | LibraryCreateWithoutSucursalInput[] | LibraryUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutSucursalInput | LibraryCreateOrConnectWithoutSucursalInput[]
    createMany?: LibraryCreateManySucursalInputEnvelope
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput> | GoalCreateWithoutSucursalInput[] | GoalUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutSucursalInput | GoalCreateOrConnectWithoutSucursalInput[]
    createMany?: GoalCreateManySucursalInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput> | ReportCreateWithoutSucursalInput[] | ReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutSucursalInput | ReportCreateOrConnectWithoutSucursalInput[]
    createMany?: ReportCreateManySucursalInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type GeneralReportUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput> | GeneralReportCreateWithoutSucursalInput[] | GeneralReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSucursalInput | GeneralReportCreateOrConnectWithoutSucursalInput[]
    createMany?: GeneralReportCreateManySucursalInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput> | FolderCreateWithoutSucursalInput[] | FolderUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutSucursalInput | FolderCreateOrConnectWithoutSucursalInput[]
    createMany?: FolderCreateManySucursalInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput> | FileCreateWithoutSucursalInput[] | FileUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSucursalInput | FileCreateOrConnectWithoutSucursalInput[]
    createMany?: FileCreateManySucursalInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput> | NotificationCreateWithoutSucursalInput[] | NotificationUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSucursalInput | NotificationCreateOrConnectWithoutSucursalInput[]
    createMany?: NotificationCreateManySucursalInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ErrorLogUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput> | ErrorLogCreateWithoutSucursalInput[] | ErrorLogUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ErrorLogCreateOrConnectWithoutSucursalInput | ErrorLogCreateOrConnectWithoutSucursalInput[]
    createMany?: ErrorLogCreateManySucursalInputEnvelope
    connect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
  }

  export type ScanUncheckedCreateNestedManyWithoutSucursalInput = {
    create?: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput> | ScanCreateWithoutSucursalInput[] | ScanUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutSucursalInput | ScanCreateOrConnectWithoutSucursalInput[]
    createMany?: ScanCreateManySucursalInputEnvelope
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
  }

  export type SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput = {
    create?: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput> | SucursalConnectionCreateWithoutSourceSucursalInput[] | SucursalConnectionUncheckedCreateWithoutSourceSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutSourceSucursalInput | SucursalConnectionCreateOrConnectWithoutSourceSucursalInput[]
    createMany?: SucursalConnectionCreateManySourceSucursalInputEnvelope
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
  }

  export type SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput = {
    create?: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput> | SucursalConnectionCreateWithoutTargetSucursalInput[] | SucursalConnectionUncheckedCreateWithoutTargetSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutTargetSucursalInput | SucursalConnectionCreateOrConnectWithoutTargetSucursalInput[]
    createMany?: SucursalConnectionCreateManyTargetSucursalInputEnvelope
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput> | UserCreateWithoutSucursalInput[] | UserUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSucursalInput | UserCreateOrConnectWithoutSucursalInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSucursalInput | UserUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: UserCreateManySucursalInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSucursalInput | UserUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSucursalInput | UserUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput> | DepartmentCreateWithoutSucursalInput[] | DepartmentUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSucursalInput | DepartmentCreateOrConnectWithoutSucursalInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSucursalInput | DepartmentUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: DepartmentCreateManySucursalInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSucursalInput | DepartmentUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSucursalInput | DepartmentUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type LibraryUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput> | LibraryCreateWithoutSucursalInput[] | LibraryUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutSucursalInput | LibraryCreateOrConnectWithoutSucursalInput[]
    upsert?: LibraryUpsertWithWhereUniqueWithoutSucursalInput | LibraryUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: LibraryCreateManySucursalInputEnvelope
    set?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    disconnect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    delete?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    update?: LibraryUpdateWithWhereUniqueWithoutSucursalInput | LibraryUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: LibraryUpdateManyWithWhereWithoutSucursalInput | LibraryUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput> | GoalCreateWithoutSucursalInput[] | GoalUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutSucursalInput | GoalCreateOrConnectWithoutSucursalInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutSucursalInput | GoalUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: GoalCreateManySucursalInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutSucursalInput | GoalUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutSucursalInput | GoalUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput> | ReportCreateWithoutSucursalInput[] | ReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutSucursalInput | ReportCreateOrConnectWithoutSucursalInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutSucursalInput | ReportUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ReportCreateManySucursalInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutSucursalInput | ReportUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutSucursalInput | ReportUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type GeneralReportUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput> | GeneralReportCreateWithoutSucursalInput[] | GeneralReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSucursalInput | GeneralReportCreateOrConnectWithoutSucursalInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSucursalInput | GeneralReportUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: GeneralReportCreateManySucursalInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSucursalInput | GeneralReportUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSucursalInput | GeneralReportUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type FolderUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput> | FolderCreateWithoutSucursalInput[] | FolderUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutSucursalInput | FolderCreateOrConnectWithoutSucursalInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutSucursalInput | FolderUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: FolderCreateManySucursalInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutSucursalInput | FolderUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutSucursalInput | FolderUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput> | FileCreateWithoutSucursalInput[] | FileUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSucursalInput | FileCreateOrConnectWithoutSucursalInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutSucursalInput | FileUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: FileCreateManySucursalInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutSucursalInput | FileUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: FileUpdateManyWithWhereWithoutSucursalInput | FileUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput> | NotificationCreateWithoutSucursalInput[] | NotificationUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSucursalInput | NotificationCreateOrConnectWithoutSucursalInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSucursalInput | NotificationUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: NotificationCreateManySucursalInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSucursalInput | NotificationUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSucursalInput | NotificationUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ErrorLogUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput> | ErrorLogCreateWithoutSucursalInput[] | ErrorLogUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ErrorLogCreateOrConnectWithoutSucursalInput | ErrorLogCreateOrConnectWithoutSucursalInput[]
    upsert?: ErrorLogUpsertWithWhereUniqueWithoutSucursalInput | ErrorLogUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ErrorLogCreateManySucursalInputEnvelope
    set?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    disconnect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    delete?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    connect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    update?: ErrorLogUpdateWithWhereUniqueWithoutSucursalInput | ErrorLogUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ErrorLogUpdateManyWithWhereWithoutSucursalInput | ErrorLogUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ErrorLogScalarWhereInput | ErrorLogScalarWhereInput[]
  }

  export type ScanUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput> | ScanCreateWithoutSucursalInput[] | ScanUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutSucursalInput | ScanCreateOrConnectWithoutSucursalInput[]
    upsert?: ScanUpsertWithWhereUniqueWithoutSucursalInput | ScanUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ScanCreateManySucursalInputEnvelope
    set?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    disconnect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    delete?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    update?: ScanUpdateWithWhereUniqueWithoutSucursalInput | ScanUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ScanUpdateManyWithWhereWithoutSucursalInput | ScanUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ScanScalarWhereInput | ScanScalarWhereInput[]
  }

  export type SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput = {
    create?: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput> | SucursalConnectionCreateWithoutSourceSucursalInput[] | SucursalConnectionUncheckedCreateWithoutSourceSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutSourceSucursalInput | SucursalConnectionCreateOrConnectWithoutSourceSucursalInput[]
    upsert?: SucursalConnectionUpsertWithWhereUniqueWithoutSourceSucursalInput | SucursalConnectionUpsertWithWhereUniqueWithoutSourceSucursalInput[]
    createMany?: SucursalConnectionCreateManySourceSucursalInputEnvelope
    set?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    disconnect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    delete?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    update?: SucursalConnectionUpdateWithWhereUniqueWithoutSourceSucursalInput | SucursalConnectionUpdateWithWhereUniqueWithoutSourceSucursalInput[]
    updateMany?: SucursalConnectionUpdateManyWithWhereWithoutSourceSucursalInput | SucursalConnectionUpdateManyWithWhereWithoutSourceSucursalInput[]
    deleteMany?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
  }

  export type SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput = {
    create?: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput> | SucursalConnectionCreateWithoutTargetSucursalInput[] | SucursalConnectionUncheckedCreateWithoutTargetSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutTargetSucursalInput | SucursalConnectionCreateOrConnectWithoutTargetSucursalInput[]
    upsert?: SucursalConnectionUpsertWithWhereUniqueWithoutTargetSucursalInput | SucursalConnectionUpsertWithWhereUniqueWithoutTargetSucursalInput[]
    createMany?: SucursalConnectionCreateManyTargetSucursalInputEnvelope
    set?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    disconnect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    delete?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    update?: SucursalConnectionUpdateWithWhereUniqueWithoutTargetSucursalInput | SucursalConnectionUpdateWithWhereUniqueWithoutTargetSucursalInput[]
    updateMany?: SucursalConnectionUpdateManyWithWhereWithoutTargetSucursalInput | SucursalConnectionUpdateManyWithWhereWithoutTargetSucursalInput[]
    deleteMany?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput> | UserCreateWithoutSucursalInput[] | UserUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSucursalInput | UserCreateOrConnectWithoutSucursalInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSucursalInput | UserUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: UserCreateManySucursalInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSucursalInput | UserUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSucursalInput | UserUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput> | DepartmentCreateWithoutSucursalInput[] | DepartmentUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSucursalInput | DepartmentCreateOrConnectWithoutSucursalInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSucursalInput | DepartmentUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: DepartmentCreateManySucursalInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSucursalInput | DepartmentUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSucursalInput | DepartmentUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type LibraryUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput> | LibraryCreateWithoutSucursalInput[] | LibraryUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutSucursalInput | LibraryCreateOrConnectWithoutSucursalInput[]
    upsert?: LibraryUpsertWithWhereUniqueWithoutSucursalInput | LibraryUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: LibraryCreateManySucursalInputEnvelope
    set?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    disconnect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    delete?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    update?: LibraryUpdateWithWhereUniqueWithoutSucursalInput | LibraryUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: LibraryUpdateManyWithWhereWithoutSucursalInput | LibraryUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput> | GoalCreateWithoutSucursalInput[] | GoalUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutSucursalInput | GoalCreateOrConnectWithoutSucursalInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutSucursalInput | GoalUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: GoalCreateManySucursalInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutSucursalInput | GoalUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutSucursalInput | GoalUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput> | ReportCreateWithoutSucursalInput[] | ReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutSucursalInput | ReportCreateOrConnectWithoutSucursalInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutSucursalInput | ReportUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ReportCreateManySucursalInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutSucursalInput | ReportUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutSucursalInput | ReportUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput> | GeneralReportCreateWithoutSucursalInput[] | GeneralReportUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSucursalInput | GeneralReportCreateOrConnectWithoutSucursalInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSucursalInput | GeneralReportUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: GeneralReportCreateManySucursalInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSucursalInput | GeneralReportUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSucursalInput | GeneralReportUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput> | FolderCreateWithoutSucursalInput[] | FolderUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutSucursalInput | FolderCreateOrConnectWithoutSucursalInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutSucursalInput | FolderUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: FolderCreateManySucursalInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutSucursalInput | FolderUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutSucursalInput | FolderUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput> | FileCreateWithoutSucursalInput[] | FileUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutSucursalInput | FileCreateOrConnectWithoutSucursalInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutSucursalInput | FileUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: FileCreateManySucursalInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutSucursalInput | FileUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: FileUpdateManyWithWhereWithoutSucursalInput | FileUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput> | NotificationCreateWithoutSucursalInput[] | NotificationUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSucursalInput | NotificationCreateOrConnectWithoutSucursalInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSucursalInput | NotificationUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: NotificationCreateManySucursalInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSucursalInput | NotificationUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSucursalInput | NotificationUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput> | ErrorLogCreateWithoutSucursalInput[] | ErrorLogUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ErrorLogCreateOrConnectWithoutSucursalInput | ErrorLogCreateOrConnectWithoutSucursalInput[]
    upsert?: ErrorLogUpsertWithWhereUniqueWithoutSucursalInput | ErrorLogUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ErrorLogCreateManySucursalInputEnvelope
    set?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    disconnect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    delete?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    connect?: ErrorLogWhereUniqueInput | ErrorLogWhereUniqueInput[]
    update?: ErrorLogUpdateWithWhereUniqueWithoutSucursalInput | ErrorLogUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ErrorLogUpdateManyWithWhereWithoutSucursalInput | ErrorLogUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ErrorLogScalarWhereInput | ErrorLogScalarWhereInput[]
  }

  export type ScanUncheckedUpdateManyWithoutSucursalNestedInput = {
    create?: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput> | ScanCreateWithoutSucursalInput[] | ScanUncheckedCreateWithoutSucursalInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutSucursalInput | ScanCreateOrConnectWithoutSucursalInput[]
    upsert?: ScanUpsertWithWhereUniqueWithoutSucursalInput | ScanUpsertWithWhereUniqueWithoutSucursalInput[]
    createMany?: ScanCreateManySucursalInputEnvelope
    set?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    disconnect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    delete?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    update?: ScanUpdateWithWhereUniqueWithoutSucursalInput | ScanUpdateWithWhereUniqueWithoutSucursalInput[]
    updateMany?: ScanUpdateManyWithWhereWithoutSucursalInput | ScanUpdateManyWithWhereWithoutSucursalInput[]
    deleteMany?: ScanScalarWhereInput | ScanScalarWhereInput[]
  }

  export type SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput = {
    create?: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput> | SucursalConnectionCreateWithoutSourceSucursalInput[] | SucursalConnectionUncheckedCreateWithoutSourceSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutSourceSucursalInput | SucursalConnectionCreateOrConnectWithoutSourceSucursalInput[]
    upsert?: SucursalConnectionUpsertWithWhereUniqueWithoutSourceSucursalInput | SucursalConnectionUpsertWithWhereUniqueWithoutSourceSucursalInput[]
    createMany?: SucursalConnectionCreateManySourceSucursalInputEnvelope
    set?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    disconnect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    delete?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    update?: SucursalConnectionUpdateWithWhereUniqueWithoutSourceSucursalInput | SucursalConnectionUpdateWithWhereUniqueWithoutSourceSucursalInput[]
    updateMany?: SucursalConnectionUpdateManyWithWhereWithoutSourceSucursalInput | SucursalConnectionUpdateManyWithWhereWithoutSourceSucursalInput[]
    deleteMany?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
  }

  export type SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput = {
    create?: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput> | SucursalConnectionCreateWithoutTargetSucursalInput[] | SucursalConnectionUncheckedCreateWithoutTargetSucursalInput[]
    connectOrCreate?: SucursalConnectionCreateOrConnectWithoutTargetSucursalInput | SucursalConnectionCreateOrConnectWithoutTargetSucursalInput[]
    upsert?: SucursalConnectionUpsertWithWhereUniqueWithoutTargetSucursalInput | SucursalConnectionUpsertWithWhereUniqueWithoutTargetSucursalInput[]
    createMany?: SucursalConnectionCreateManyTargetSucursalInputEnvelope
    set?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    disconnect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    delete?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    connect?: SucursalConnectionWhereUniqueInput | SucursalConnectionWhereUniqueInput[]
    update?: SucursalConnectionUpdateWithWhereUniqueWithoutTargetSucursalInput | SucursalConnectionUpdateWithWhereUniqueWithoutTargetSucursalInput[]
    updateMany?: SucursalConnectionUpdateManyWithWhereWithoutTargetSucursalInput | SucursalConnectionUpdateManyWithWhereWithoutTargetSucursalInput[]
    deleteMany?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
  }

  export type SucursalCreateNestedOneWithoutSourceConnectionsInput = {
    create?: XOR<SucursalCreateWithoutSourceConnectionsInput, SucursalUncheckedCreateWithoutSourceConnectionsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutSourceConnectionsInput
    connect?: SucursalWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutTargetConnectionsInput = {
    create?: XOR<SucursalCreateWithoutTargetConnectionsInput, SucursalUncheckedCreateWithoutTargetConnectionsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutTargetConnectionsInput
    connect?: SucursalWhereUniqueInput
  }

  export type SucursalUpdateOneRequiredWithoutSourceConnectionsNestedInput = {
    create?: XOR<SucursalCreateWithoutSourceConnectionsInput, SucursalUncheckedCreateWithoutSourceConnectionsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutSourceConnectionsInput
    upsert?: SucursalUpsertWithoutSourceConnectionsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutSourceConnectionsInput, SucursalUpdateWithoutSourceConnectionsInput>, SucursalUncheckedUpdateWithoutSourceConnectionsInput>
  }

  export type SucursalUpdateOneRequiredWithoutTargetConnectionsNestedInput = {
    create?: XOR<SucursalCreateWithoutTargetConnectionsInput, SucursalUncheckedCreateWithoutTargetConnectionsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutTargetConnectionsInput
    upsert?: SucursalUpsertWithoutTargetConnectionsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutTargetConnectionsInput, SucursalUpdateWithoutTargetConnectionsInput>, SucursalUncheckedUpdateWithoutTargetConnectionsInput>
  }

  export type SucursalCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<SucursalCreateWithoutDepartmentsInput, SucursalUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutDepartmentsInput
    connect?: SucursalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSupervisedDepartmentsInput = {
    create?: XOR<UserCreateWithoutSupervisedDepartmentsInput, UserUncheckedCreateWithoutSupervisedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupervisedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDepartmentSupervisorsInput = {
    create?: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput> | UserCreateWithoutDepartmentSupervisorsInput[] | UserUncheckedCreateWithoutDepartmentSupervisorsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentSupervisorsInput | UserCreateOrConnectWithoutDepartmentSupervisorsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput> | GoalCreateWithoutDepartmentInput[] | GoalUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutDepartmentInput | GoalCreateOrConnectWithoutDepartmentInput[]
    createMany?: GoalCreateManyDepartmentInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput = {
    create?: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput> | UserCreateWithoutDepartmentSupervisorsInput[] | UserUncheckedCreateWithoutDepartmentSupervisorsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentSupervisorsInput | UserCreateOrConnectWithoutDepartmentSupervisorsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput> | GoalCreateWithoutDepartmentInput[] | GoalUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutDepartmentInput | GoalCreateOrConnectWithoutDepartmentInput[]
    createMany?: GoalCreateManyDepartmentInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type SucursalUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<SucursalCreateWithoutDepartmentsInput, SucursalUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutDepartmentsInput
    upsert?: SucursalUpsertWithoutDepartmentsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutDepartmentsInput, SucursalUpdateWithoutDepartmentsInput>, SucursalUncheckedUpdateWithoutDepartmentsInput>
  }

  export type UserUpdateOneWithoutSupervisedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutSupervisedDepartmentsInput, UserUncheckedCreateWithoutSupervisedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupervisedDepartmentsInput
    upsert?: UserUpsertWithoutSupervisedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSupervisedDepartmentsInput, UserUpdateWithoutSupervisedDepartmentsInput>, UserUncheckedUpdateWithoutSupervisedDepartmentsInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDepartmentSupervisorsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput> | UserCreateWithoutDepartmentSupervisorsInput[] | UserUncheckedCreateWithoutDepartmentSupervisorsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentSupervisorsInput | UserCreateOrConnectWithoutDepartmentSupervisorsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentSupervisorsInput | UserUpsertWithWhereUniqueWithoutDepartmentSupervisorsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentSupervisorsInput | UserUpdateWithWhereUniqueWithoutDepartmentSupervisorsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentSupervisorsInput | UserUpdateManyWithWhereWithoutDepartmentSupervisorsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput> | GoalCreateWithoutDepartmentInput[] | GoalUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutDepartmentInput | GoalCreateOrConnectWithoutDepartmentInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutDepartmentInput | GoalUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: GoalCreateManyDepartmentInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutDepartmentInput | GoalUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutDepartmentInput | GoalUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput> | UserCreateWithoutDepartmentSupervisorsInput[] | UserUncheckedCreateWithoutDepartmentSupervisorsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentSupervisorsInput | UserCreateOrConnectWithoutDepartmentSupervisorsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentSupervisorsInput | UserUpsertWithWhereUniqueWithoutDepartmentSupervisorsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentSupervisorsInput | UserUpdateWithWhereUniqueWithoutDepartmentSupervisorsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentSupervisorsInput | UserUpdateManyWithWhereWithoutDepartmentSupervisorsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput> | GoalCreateWithoutDepartmentInput[] | GoalUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutDepartmentInput | GoalCreateOrConnectWithoutDepartmentInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutDepartmentInput | GoalUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: GoalCreateManyDepartmentInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutDepartmentInput | GoalUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutDepartmentInput | GoalUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type SucursalCreateNestedOneWithoutUsersInput = {
    create?: XOR<SucursalCreateWithoutUsersInput, SucursalUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutUsersInput
    connect?: SucursalWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubordinatesInput = {
    create?: XOR<UserCreateWithoutSubordinatesInput, UserUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubordinatesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput> | UserCreateWithoutSupervisorInput[] | UserUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput | UserCreateOrConnectWithoutSupervisorInput[]
    createMany?: UserCreateManySupervisorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput> | DepartmentCreateWithoutSupervisorInput[] | DepartmentUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorInput | DepartmentCreateOrConnectWithoutSupervisorInput[]
    createMany?: DepartmentCreateManySupervisorInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutSupervisorsInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput> | DepartmentCreateWithoutSupervisorsInput[] | DepartmentUncheckedCreateWithoutSupervisorsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorsInput | DepartmentCreateOrConnectWithoutSupervisorsInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type FolderCreateNestedManyWithoutUserInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type LibraryCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput> | LibraryCreateWithoutUserInput[] | LibraryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutUserInput | LibraryCreateOrConnectWithoutUserInput[]
    createMany?: LibraryCreateManyUserInputEnvelope
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
  }

  export type LibraryMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput> | LibraryMemberCreateWithoutUserInput[] | LibraryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutUserInput | LibraryMemberCreateOrConnectWithoutUserInput[]
    createMany?: LibraryMemberCreateManyUserInputEnvelope
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
  }

  export type GoalAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput> | GoalAssignmentCreateWithoutUserInput[] | GoalAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutUserInput | GoalAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: GoalAssignmentCreateManyUserInputEnvelope
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ScanCreateNestedManyWithoutUserInput = {
    create?: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput> | ScanCreateWithoutUserInput[] | ScanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutUserInput | ScanCreateOrConnectWithoutUserInput[]
    createMany?: ScanCreateManyUserInputEnvelope
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput> | GoalCreateWithoutCreatedByInput[] | GoalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutCreatedByInput | GoalCreateOrConnectWithoutCreatedByInput[]
    createMany?: GoalCreateManyCreatedByInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type GeneralReportCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput> | GeneralReportCreateWithoutSubmittedByInput[] | GeneralReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedByInput | GeneralReportCreateOrConnectWithoutSubmittedByInput[]
    createMany?: GeneralReportCreateManySubmittedByInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GeneralReportCreateNestedManyWithoutSubmittedToInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput> | GeneralReportCreateWithoutSubmittedToInput[] | GeneralReportUncheckedCreateWithoutSubmittedToInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedToInput | GeneralReportCreateOrConnectWithoutSubmittedToInput[]
    createMany?: GeneralReportCreateManySubmittedToInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GeneralReportCreateNestedManyWithoutRespondedByInput = {
    create?: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput> | GeneralReportCreateWithoutRespondedByInput[] | GeneralReportUncheckedCreateWithoutRespondedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutRespondedByInput | GeneralReportCreateOrConnectWithoutRespondedByInput[]
    createMany?: GeneralReportCreateManyRespondedByInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GoalReportCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput> | GoalReportCreateWithoutSubmittedByInput[] | GoalReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutSubmittedByInput | GoalReportCreateOrConnectWithoutSubmittedByInput[]
    createMany?: GoalReportCreateManySubmittedByInputEnvelope
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput> | UserCreateWithoutSupervisorInput[] | UserUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput | UserCreateOrConnectWithoutSupervisorInput[]
    createMany?: UserCreateManySupervisorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput> | DepartmentCreateWithoutSupervisorInput[] | DepartmentUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorInput | DepartmentCreateOrConnectWithoutSupervisorInput[]
    createMany?: DepartmentCreateManySupervisorInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput> | DepartmentCreateWithoutSupervisorsInput[] | DepartmentUncheckedCreateWithoutSupervisorsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorsInput | DepartmentCreateOrConnectWithoutSupervisorsInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type LibraryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput> | LibraryCreateWithoutUserInput[] | LibraryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutUserInput | LibraryCreateOrConnectWithoutUserInput[]
    createMany?: LibraryCreateManyUserInputEnvelope
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
  }

  export type LibraryMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput> | LibraryMemberCreateWithoutUserInput[] | LibraryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutUserInput | LibraryMemberCreateOrConnectWithoutUserInput[]
    createMany?: LibraryMemberCreateManyUserInputEnvelope
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
  }

  export type GoalAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput> | GoalAssignmentCreateWithoutUserInput[] | GoalAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutUserInput | GoalAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: GoalAssignmentCreateManyUserInputEnvelope
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ScanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput> | ScanCreateWithoutUserInput[] | ScanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutUserInput | ScanCreateOrConnectWithoutUserInput[]
    createMany?: ScanCreateManyUserInputEnvelope
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput> | GoalCreateWithoutCreatedByInput[] | GoalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutCreatedByInput | GoalCreateOrConnectWithoutCreatedByInput[]
    createMany?: GoalCreateManyCreatedByInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput> | GeneralReportCreateWithoutSubmittedByInput[] | GeneralReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedByInput | GeneralReportCreateOrConnectWithoutSubmittedByInput[]
    createMany?: GeneralReportCreateManySubmittedByInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput> | GeneralReportCreateWithoutSubmittedToInput[] | GeneralReportUncheckedCreateWithoutSubmittedToInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedToInput | GeneralReportCreateOrConnectWithoutSubmittedToInput[]
    createMany?: GeneralReportCreateManySubmittedToInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput = {
    create?: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput> | GeneralReportCreateWithoutRespondedByInput[] | GeneralReportUncheckedCreateWithoutRespondedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutRespondedByInput | GeneralReportCreateOrConnectWithoutRespondedByInput[]
    createMany?: GeneralReportCreateManyRespondedByInputEnvelope
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
  }

  export type GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput> | GoalReportCreateWithoutSubmittedByInput[] | GoalReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutSubmittedByInput | GoalReportCreateOrConnectWithoutSubmittedByInput[]
    createMany?: GoalReportCreateManySubmittedByInputEnvelope
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SucursalUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<SucursalCreateWithoutUsersInput, SucursalUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutUsersInput
    upsert?: SucursalUpsertWithoutUsersInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutUsersInput, SucursalUpdateWithoutUsersInput>, SucursalUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneWithoutSubordinatesNestedInput = {
    create?: XOR<UserCreateWithoutSubordinatesInput, UserUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubordinatesInput
    upsert?: UserUpsertWithoutSubordinatesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubordinatesInput, UserUpdateWithoutSubordinatesInput>, UserUncheckedUpdateWithoutSubordinatesInput>
  }

  export type UserUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput> | UserCreateWithoutSupervisorInput[] | UserUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput | UserCreateOrConnectWithoutSupervisorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSupervisorInput | UserUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: UserCreateManySupervisorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSupervisorInput | UserUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSupervisorInput | UserUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput> | DepartmentCreateWithoutSupervisorInput[] | DepartmentUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorInput | DepartmentCreateOrConnectWithoutSupervisorInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSupervisorInput | DepartmentUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: DepartmentCreateManySupervisorInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSupervisorInput | DepartmentUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSupervisorInput | DepartmentUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutSupervisorsNestedInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput> | DepartmentCreateWithoutSupervisorsInput[] | DepartmentUncheckedCreateWithoutSupervisorsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorsInput | DepartmentCreateOrConnectWithoutSupervisorsInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSupervisorsInput | DepartmentUpsertWithWhereUniqueWithoutSupervisorsInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSupervisorsInput | DepartmentUpdateWithWhereUniqueWithoutSupervisorsInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSupervisorsInput | DepartmentUpdateManyWithWhereWithoutSupervisorsInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type FolderUpdateManyWithoutUserNestedInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutUserInput | FolderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutUserInput | FolderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutUserInput | FolderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type LibraryUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput> | LibraryCreateWithoutUserInput[] | LibraryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutUserInput | LibraryCreateOrConnectWithoutUserInput[]
    upsert?: LibraryUpsertWithWhereUniqueWithoutUserInput | LibraryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryCreateManyUserInputEnvelope
    set?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    disconnect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    delete?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    update?: LibraryUpdateWithWhereUniqueWithoutUserInput | LibraryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryUpdateManyWithWhereWithoutUserInput | LibraryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
  }

  export type LibraryMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput> | LibraryMemberCreateWithoutUserInput[] | LibraryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutUserInput | LibraryMemberCreateOrConnectWithoutUserInput[]
    upsert?: LibraryMemberUpsertWithWhereUniqueWithoutUserInput | LibraryMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryMemberCreateManyUserInputEnvelope
    set?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    disconnect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    delete?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    update?: LibraryMemberUpdateWithWhereUniqueWithoutUserInput | LibraryMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryMemberUpdateManyWithWhereWithoutUserInput | LibraryMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
  }

  export type GoalAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput> | GoalAssignmentCreateWithoutUserInput[] | GoalAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutUserInput | GoalAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: GoalAssignmentUpsertWithWhereUniqueWithoutUserInput | GoalAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalAssignmentCreateManyUserInputEnvelope
    set?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    disconnect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    delete?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    update?: GoalAssignmentUpdateWithWhereUniqueWithoutUserInput | GoalAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalAssignmentUpdateManyWithWhereWithoutUserInput | GoalAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ScanUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput> | ScanCreateWithoutUserInput[] | ScanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutUserInput | ScanCreateOrConnectWithoutUserInput[]
    upsert?: ScanUpsertWithWhereUniqueWithoutUserInput | ScanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScanCreateManyUserInputEnvelope
    set?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    disconnect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    delete?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    update?: ScanUpdateWithWhereUniqueWithoutUserInput | ScanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScanUpdateManyWithWhereWithoutUserInput | ScanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScanScalarWhereInput | ScanScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput> | GoalCreateWithoutCreatedByInput[] | GoalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutCreatedByInput | GoalCreateOrConnectWithoutCreatedByInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutCreatedByInput | GoalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GoalCreateManyCreatedByInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutCreatedByInput | GoalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutCreatedByInput | GoalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type GeneralReportUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput> | GeneralReportCreateWithoutSubmittedByInput[] | GeneralReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedByInput | GeneralReportCreateOrConnectWithoutSubmittedByInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSubmittedByInput | GeneralReportUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: GeneralReportCreateManySubmittedByInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSubmittedByInput | GeneralReportUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSubmittedByInput | GeneralReportUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GeneralReportUpdateManyWithoutSubmittedToNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput> | GeneralReportCreateWithoutSubmittedToInput[] | GeneralReportUncheckedCreateWithoutSubmittedToInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedToInput | GeneralReportCreateOrConnectWithoutSubmittedToInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSubmittedToInput | GeneralReportUpsertWithWhereUniqueWithoutSubmittedToInput[]
    createMany?: GeneralReportCreateManySubmittedToInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSubmittedToInput | GeneralReportUpdateWithWhereUniqueWithoutSubmittedToInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSubmittedToInput | GeneralReportUpdateManyWithWhereWithoutSubmittedToInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GeneralReportUpdateManyWithoutRespondedByNestedInput = {
    create?: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput> | GeneralReportCreateWithoutRespondedByInput[] | GeneralReportUncheckedCreateWithoutRespondedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutRespondedByInput | GeneralReportCreateOrConnectWithoutRespondedByInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutRespondedByInput | GeneralReportUpsertWithWhereUniqueWithoutRespondedByInput[]
    createMany?: GeneralReportCreateManyRespondedByInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutRespondedByInput | GeneralReportUpdateWithWhereUniqueWithoutRespondedByInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutRespondedByInput | GeneralReportUpdateManyWithWhereWithoutRespondedByInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GoalReportUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput> | GoalReportCreateWithoutSubmittedByInput[] | GoalReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutSubmittedByInput | GoalReportCreateOrConnectWithoutSubmittedByInput[]
    upsert?: GoalReportUpsertWithWhereUniqueWithoutSubmittedByInput | GoalReportUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: GoalReportCreateManySubmittedByInputEnvelope
    set?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    disconnect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    delete?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    update?: GoalReportUpdateWithWhereUniqueWithoutSubmittedByInput | GoalReportUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: GoalReportUpdateManyWithWhereWithoutSubmittedByInput | GoalReportUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput> | UserCreateWithoutSupervisorInput[] | UserUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput | UserCreateOrConnectWithoutSupervisorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSupervisorInput | UserUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: UserCreateManySupervisorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSupervisorInput | UserUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSupervisorInput | UserUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput> | DepartmentCreateWithoutSupervisorInput[] | DepartmentUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorInput | DepartmentCreateOrConnectWithoutSupervisorInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSupervisorInput | DepartmentUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: DepartmentCreateManySupervisorInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSupervisorInput | DepartmentUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSupervisorInput | DepartmentUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput = {
    create?: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput> | DepartmentCreateWithoutSupervisorsInput[] | DepartmentUncheckedCreateWithoutSupervisorsInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutSupervisorsInput | DepartmentCreateOrConnectWithoutSupervisorsInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutSupervisorsInput | DepartmentUpsertWithWhereUniqueWithoutSupervisorsInput[]
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutSupervisorsInput | DepartmentUpdateWithWhereUniqueWithoutSupervisorsInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutSupervisorsInput | DepartmentUpdateManyWithWhereWithoutSupervisorsInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutUserInput | FolderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutUserInput | FolderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutUserInput | FolderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type LibraryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput> | LibraryCreateWithoutUserInput[] | LibraryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryCreateOrConnectWithoutUserInput | LibraryCreateOrConnectWithoutUserInput[]
    upsert?: LibraryUpsertWithWhereUniqueWithoutUserInput | LibraryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryCreateManyUserInputEnvelope
    set?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    disconnect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    delete?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    connect?: LibraryWhereUniqueInput | LibraryWhereUniqueInput[]
    update?: LibraryUpdateWithWhereUniqueWithoutUserInput | LibraryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryUpdateManyWithWhereWithoutUserInput | LibraryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
  }

  export type LibraryMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput> | LibraryMemberCreateWithoutUserInput[] | LibraryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutUserInput | LibraryMemberCreateOrConnectWithoutUserInput[]
    upsert?: LibraryMemberUpsertWithWhereUniqueWithoutUserInput | LibraryMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryMemberCreateManyUserInputEnvelope
    set?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    disconnect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    delete?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    update?: LibraryMemberUpdateWithWhereUniqueWithoutUserInput | LibraryMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryMemberUpdateManyWithWhereWithoutUserInput | LibraryMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
  }

  export type GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput> | GoalAssignmentCreateWithoutUserInput[] | GoalAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutUserInput | GoalAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: GoalAssignmentUpsertWithWhereUniqueWithoutUserInput | GoalAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalAssignmentCreateManyUserInputEnvelope
    set?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    disconnect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    delete?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    update?: GoalAssignmentUpdateWithWhereUniqueWithoutUserInput | GoalAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalAssignmentUpdateManyWithWhereWithoutUserInput | GoalAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ScanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput> | ScanCreateWithoutUserInput[] | ScanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScanCreateOrConnectWithoutUserInput | ScanCreateOrConnectWithoutUserInput[]
    upsert?: ScanUpsertWithWhereUniqueWithoutUserInput | ScanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScanCreateManyUserInputEnvelope
    set?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    disconnect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    delete?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    connect?: ScanWhereUniqueInput | ScanWhereUniqueInput[]
    update?: ScanUpdateWithWhereUniqueWithoutUserInput | ScanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScanUpdateManyWithWhereWithoutUserInput | ScanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScanScalarWhereInput | ScanScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput> | GoalCreateWithoutCreatedByInput[] | GoalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutCreatedByInput | GoalCreateOrConnectWithoutCreatedByInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutCreatedByInput | GoalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GoalCreateManyCreatedByInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutCreatedByInput | GoalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutCreatedByInput | GoalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput> | GeneralReportCreateWithoutSubmittedByInput[] | GeneralReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedByInput | GeneralReportCreateOrConnectWithoutSubmittedByInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSubmittedByInput | GeneralReportUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: GeneralReportCreateManySubmittedByInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSubmittedByInput | GeneralReportUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSubmittedByInput | GeneralReportUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput = {
    create?: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput> | GeneralReportCreateWithoutSubmittedToInput[] | GeneralReportUncheckedCreateWithoutSubmittedToInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutSubmittedToInput | GeneralReportCreateOrConnectWithoutSubmittedToInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutSubmittedToInput | GeneralReportUpsertWithWhereUniqueWithoutSubmittedToInput[]
    createMany?: GeneralReportCreateManySubmittedToInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutSubmittedToInput | GeneralReportUpdateWithWhereUniqueWithoutSubmittedToInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutSubmittedToInput | GeneralReportUpdateManyWithWhereWithoutSubmittedToInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput = {
    create?: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput> | GeneralReportCreateWithoutRespondedByInput[] | GeneralReportUncheckedCreateWithoutRespondedByInput[]
    connectOrCreate?: GeneralReportCreateOrConnectWithoutRespondedByInput | GeneralReportCreateOrConnectWithoutRespondedByInput[]
    upsert?: GeneralReportUpsertWithWhereUniqueWithoutRespondedByInput | GeneralReportUpsertWithWhereUniqueWithoutRespondedByInput[]
    createMany?: GeneralReportCreateManyRespondedByInputEnvelope
    set?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    disconnect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    delete?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    connect?: GeneralReportWhereUniqueInput | GeneralReportWhereUniqueInput[]
    update?: GeneralReportUpdateWithWhereUniqueWithoutRespondedByInput | GeneralReportUpdateWithWhereUniqueWithoutRespondedByInput[]
    updateMany?: GeneralReportUpdateManyWithWhereWithoutRespondedByInput | GeneralReportUpdateManyWithWhereWithoutRespondedByInput[]
    deleteMany?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
  }

  export type GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput> | GoalReportCreateWithoutSubmittedByInput[] | GoalReportUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutSubmittedByInput | GoalReportCreateOrConnectWithoutSubmittedByInput[]
    upsert?: GoalReportUpsertWithWhereUniqueWithoutSubmittedByInput | GoalReportUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: GoalReportCreateManySubmittedByInputEnvelope
    set?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    disconnect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    delete?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    update?: GoalReportUpdateWithWhereUniqueWithoutSubmittedByInput | GoalReportUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: GoalReportUpdateManyWithWhereWithoutSubmittedByInput | GoalReportUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFoldersInput = {
    create?: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoldersInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutFoldersInput = {
    create?: XOR<SucursalCreateWithoutFoldersInput, SucursalUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutFoldersInput
    connect?: SucursalWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutChildrenInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    connect?: FolderWhereUniqueInput
  }

  export type FolderCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutFolderInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoldersInput
    upsert?: UserUpsertWithoutFoldersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoldersInput, UserUpdateWithoutFoldersInput>, UserUncheckedUpdateWithoutFoldersInput>
  }

  export type SucursalUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<SucursalCreateWithoutFoldersInput, SucursalUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutFoldersInput
    upsert?: SucursalUpsertWithoutFoldersInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutFoldersInput, SucursalUpdateWithoutFoldersInput>, SucursalUncheckedUpdateWithoutFoldersInput>
  }

  export type FolderUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    upsert?: FolderUpsertWithoutChildrenInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutChildrenInput, FolderUpdateWithoutChildrenInput>, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUpdateManyWithoutFolderNestedInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutFolderInput | FileUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutFolderInput | FileUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutFolderInput | FileUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutFolderInput | FileUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutFolderInput | FileUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutFolderInput | FileUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FolderCreateNestedOneWithoutFilesInput = {
    create?: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFilesInput
    connect?: FolderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutFilesInput = {
    create?: XOR<SucursalCreateWithoutFilesInput, SucursalUncheckedCreateWithoutFilesInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutFilesInput
    connect?: SucursalWhereUniqueInput
  }

  export type ReportFileCreateNestedManyWithoutFileInput = {
    create?: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput> | ReportFileCreateWithoutFileInput[] | ReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutFileInput | ReportFileCreateOrConnectWithoutFileInput[]
    createMany?: ReportFileCreateManyFileInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type GeneralReportFileCreateNestedManyWithoutFileInput = {
    create?: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput> | GeneralReportFileCreateWithoutFileInput[] | GeneralReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutFileInput | GeneralReportFileCreateOrConnectWithoutFileInput[]
    createMany?: GeneralReportFileCreateManyFileInputEnvelope
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
  }

  export type GoalReportFileCreateNestedManyWithoutFileInput = {
    create?: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput> | GoalReportFileCreateWithoutFileInput[] | GoalReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutFileInput | GoalReportFileCreateOrConnectWithoutFileInput[]
    createMany?: GoalReportFileCreateManyFileInputEnvelope
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
  }

  export type ReportFileUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput> | ReportFileCreateWithoutFileInput[] | ReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutFileInput | ReportFileCreateOrConnectWithoutFileInput[]
    createMany?: ReportFileCreateManyFileInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type GeneralReportFileUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput> | GeneralReportFileCreateWithoutFileInput[] | GeneralReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutFileInput | GeneralReportFileCreateOrConnectWithoutFileInput[]
    createMany?: GeneralReportFileCreateManyFileInputEnvelope
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
  }

  export type GoalReportFileUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput> | GoalReportFileCreateWithoutFileInput[] | GoalReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutFileInput | GoalReportFileCreateOrConnectWithoutFileInput[]
    createMany?: GoalReportFileCreateManyFileInputEnvelope
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FolderUpdateOneWithoutFilesNestedInput = {
    create?: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFilesInput
    upsert?: FolderUpsertWithoutFilesInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutFilesInput, FolderUpdateWithoutFilesInput>, FolderUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilesInput, UserUpdateWithoutFilesInput>, UserUncheckedUpdateWithoutFilesInput>
  }

  export type SucursalUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<SucursalCreateWithoutFilesInput, SucursalUncheckedCreateWithoutFilesInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutFilesInput
    upsert?: SucursalUpsertWithoutFilesInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutFilesInput, SucursalUpdateWithoutFilesInput>, SucursalUncheckedUpdateWithoutFilesInput>
  }

  export type ReportFileUpdateManyWithoutFileNestedInput = {
    create?: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput> | ReportFileCreateWithoutFileInput[] | ReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutFileInput | ReportFileCreateOrConnectWithoutFileInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutFileInput | ReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: ReportFileCreateManyFileInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutFileInput | ReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutFileInput | ReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type GeneralReportFileUpdateManyWithoutFileNestedInput = {
    create?: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput> | GeneralReportFileCreateWithoutFileInput[] | GeneralReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutFileInput | GeneralReportFileCreateOrConnectWithoutFileInput[]
    upsert?: GeneralReportFileUpsertWithWhereUniqueWithoutFileInput | GeneralReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: GeneralReportFileCreateManyFileInputEnvelope
    set?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    disconnect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    delete?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    update?: GeneralReportFileUpdateWithWhereUniqueWithoutFileInput | GeneralReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: GeneralReportFileUpdateManyWithWhereWithoutFileInput | GeneralReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
  }

  export type GoalReportFileUpdateManyWithoutFileNestedInput = {
    create?: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput> | GoalReportFileCreateWithoutFileInput[] | GoalReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutFileInput | GoalReportFileCreateOrConnectWithoutFileInput[]
    upsert?: GoalReportFileUpsertWithWhereUniqueWithoutFileInput | GoalReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: GoalReportFileCreateManyFileInputEnvelope
    set?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    disconnect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    delete?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    update?: GoalReportFileUpdateWithWhereUniqueWithoutFileInput | GoalReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: GoalReportFileUpdateManyWithWhereWithoutFileInput | GoalReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
  }

  export type ReportFileUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput> | ReportFileCreateWithoutFileInput[] | ReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutFileInput | ReportFileCreateOrConnectWithoutFileInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutFileInput | ReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: ReportFileCreateManyFileInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutFileInput | ReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutFileInput | ReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput> | GeneralReportFileCreateWithoutFileInput[] | GeneralReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutFileInput | GeneralReportFileCreateOrConnectWithoutFileInput[]
    upsert?: GeneralReportFileUpsertWithWhereUniqueWithoutFileInput | GeneralReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: GeneralReportFileCreateManyFileInputEnvelope
    set?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    disconnect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    delete?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    update?: GeneralReportFileUpdateWithWhereUniqueWithoutFileInput | GeneralReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: GeneralReportFileUpdateManyWithWhereWithoutFileInput | GeneralReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
  }

  export type GoalReportFileUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput> | GoalReportFileCreateWithoutFileInput[] | GoalReportFileUncheckedCreateWithoutFileInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutFileInput | GoalReportFileCreateOrConnectWithoutFileInput[]
    upsert?: GoalReportFileUpsertWithWhereUniqueWithoutFileInput | GoalReportFileUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: GoalReportFileCreateManyFileInputEnvelope
    set?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    disconnect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    delete?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    update?: GoalReportFileUpdateWithWhereUniqueWithoutFileInput | GoalReportFileUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: GoalReportFileUpdateManyWithWhereWithoutFileInput | GoalReportFileUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLibrariesInput = {
    create?: XOR<UserCreateWithoutLibrariesInput, UserUncheckedCreateWithoutLibrariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibrariesInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutLibrariesInput = {
    create?: XOR<SucursalCreateWithoutLibrariesInput, SucursalUncheckedCreateWithoutLibrariesInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutLibrariesInput
    connect?: SucursalWhereUniqueInput
  }

  export type LibraryMemberCreateNestedManyWithoutLibraryInput = {
    create?: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput> | LibraryMemberCreateWithoutLibraryInput[] | LibraryMemberUncheckedCreateWithoutLibraryInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutLibraryInput | LibraryMemberCreateOrConnectWithoutLibraryInput[]
    createMany?: LibraryMemberCreateManyLibraryInputEnvelope
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
  }

  export type LibraryMemberUncheckedCreateNestedManyWithoutLibraryInput = {
    create?: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput> | LibraryMemberCreateWithoutLibraryInput[] | LibraryMemberUncheckedCreateWithoutLibraryInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutLibraryInput | LibraryMemberCreateOrConnectWithoutLibraryInput[]
    createMany?: LibraryMemberCreateManyLibraryInputEnvelope
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutLibrariesNestedInput = {
    create?: XOR<UserCreateWithoutLibrariesInput, UserUncheckedCreateWithoutLibrariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibrariesInput
    upsert?: UserUpsertWithoutLibrariesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLibrariesInput, UserUpdateWithoutLibrariesInput>, UserUncheckedUpdateWithoutLibrariesInput>
  }

  export type SucursalUpdateOneRequiredWithoutLibrariesNestedInput = {
    create?: XOR<SucursalCreateWithoutLibrariesInput, SucursalUncheckedCreateWithoutLibrariesInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutLibrariesInput
    upsert?: SucursalUpsertWithoutLibrariesInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutLibrariesInput, SucursalUpdateWithoutLibrariesInput>, SucursalUncheckedUpdateWithoutLibrariesInput>
  }

  export type LibraryMemberUpdateManyWithoutLibraryNestedInput = {
    create?: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput> | LibraryMemberCreateWithoutLibraryInput[] | LibraryMemberUncheckedCreateWithoutLibraryInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutLibraryInput | LibraryMemberCreateOrConnectWithoutLibraryInput[]
    upsert?: LibraryMemberUpsertWithWhereUniqueWithoutLibraryInput | LibraryMemberUpsertWithWhereUniqueWithoutLibraryInput[]
    createMany?: LibraryMemberCreateManyLibraryInputEnvelope
    set?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    disconnect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    delete?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    update?: LibraryMemberUpdateWithWhereUniqueWithoutLibraryInput | LibraryMemberUpdateWithWhereUniqueWithoutLibraryInput[]
    updateMany?: LibraryMemberUpdateManyWithWhereWithoutLibraryInput | LibraryMemberUpdateManyWithWhereWithoutLibraryInput[]
    deleteMany?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
  }

  export type LibraryMemberUncheckedUpdateManyWithoutLibraryNestedInput = {
    create?: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput> | LibraryMemberCreateWithoutLibraryInput[] | LibraryMemberUncheckedCreateWithoutLibraryInput[]
    connectOrCreate?: LibraryMemberCreateOrConnectWithoutLibraryInput | LibraryMemberCreateOrConnectWithoutLibraryInput[]
    upsert?: LibraryMemberUpsertWithWhereUniqueWithoutLibraryInput | LibraryMemberUpsertWithWhereUniqueWithoutLibraryInput[]
    createMany?: LibraryMemberCreateManyLibraryInputEnvelope
    set?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    disconnect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    delete?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    connect?: LibraryMemberWhereUniqueInput | LibraryMemberWhereUniqueInput[]
    update?: LibraryMemberUpdateWithWhereUniqueWithoutLibraryInput | LibraryMemberUpdateWithWhereUniqueWithoutLibraryInput[]
    updateMany?: LibraryMemberUpdateManyWithWhereWithoutLibraryInput | LibraryMemberUpdateManyWithWhereWithoutLibraryInput[]
    deleteMany?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
  }

  export type LibraryCreateNestedOneWithoutMembersInput = {
    create?: XOR<LibraryCreateWithoutMembersInput, LibraryUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LibraryCreateOrConnectWithoutMembersInput
    connect?: LibraryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLibraryMembersInput = {
    create?: XOR<UserCreateWithoutLibraryMembersInput, UserUncheckedCreateWithoutLibraryMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibraryMembersInput
    connect?: UserWhereUniqueInput
  }

  export type LibraryUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<LibraryCreateWithoutMembersInput, LibraryUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LibraryCreateOrConnectWithoutMembersInput
    upsert?: LibraryUpsertWithoutMembersInput
    connect?: LibraryWhereUniqueInput
    update?: XOR<XOR<LibraryUpdateToOneWithWhereWithoutMembersInput, LibraryUpdateWithoutMembersInput>, LibraryUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutLibraryMembersNestedInput = {
    create?: XOR<UserCreateWithoutLibraryMembersInput, UserUncheckedCreateWithoutLibraryMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibraryMembersInput
    upsert?: UserUpsertWithoutLibraryMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLibraryMembersInput, UserUpdateWithoutLibraryMembersInput>, UserUncheckedUpdateWithoutLibraryMembersInput>
  }

  export type DepartmentCreateNestedOneWithoutGoalsInput = {
    create?: XOR<DepartmentCreateWithoutGoalsInput, DepartmentUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutGoalsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedGoalsInput = {
    create?: XOR<UserCreateWithoutCreatedGoalsInput, UserUncheckedCreateWithoutCreatedGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutGoalsInput = {
    create?: XOR<SucursalCreateWithoutGoalsInput, SucursalUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutGoalsInput
    connect?: SucursalWhereUniqueInput
  }

  export type GoalAssignmentCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput> | GoalAssignmentCreateWithoutGoalInput[] | GoalAssignmentUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutGoalInput | GoalAssignmentCreateOrConnectWithoutGoalInput[]
    createMany?: GoalAssignmentCreateManyGoalInputEnvelope
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
  }

  export type GoalReportCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput> | GoalReportCreateWithoutGoalInput[] | GoalReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutGoalInput | GoalReportCreateOrConnectWithoutGoalInput[]
    createMany?: GoalReportCreateManyGoalInputEnvelope
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutGoalInput = {
    create?: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput> | ReportCreateWithoutGoalInput[] | ReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutGoalInput | ReportCreateOrConnectWithoutGoalInput[]
    createMany?: ReportCreateManyGoalInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput> | GoalAssignmentCreateWithoutGoalInput[] | GoalAssignmentUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutGoalInput | GoalAssignmentCreateOrConnectWithoutGoalInput[]
    createMany?: GoalAssignmentCreateManyGoalInputEnvelope
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
  }

  export type GoalReportUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput> | GoalReportCreateWithoutGoalInput[] | GoalReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutGoalInput | GoalReportCreateOrConnectWithoutGoalInput[]
    createMany?: GoalReportCreateManyGoalInputEnvelope
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput> | ReportCreateWithoutGoalInput[] | ReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutGoalInput | ReportCreateOrConnectWithoutGoalInput[]
    createMany?: ReportCreateManyGoalInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<DepartmentCreateWithoutGoalsInput, DepartmentUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutGoalsInput
    upsert?: DepartmentUpsertWithoutGoalsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutGoalsInput, DepartmentUpdateWithoutGoalsInput>, DepartmentUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedGoalsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedGoalsInput, UserUncheckedCreateWithoutCreatedGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedGoalsInput
    upsert?: UserUpsertWithoutCreatedGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedGoalsInput, UserUpdateWithoutCreatedGoalsInput>, UserUncheckedUpdateWithoutCreatedGoalsInput>
  }

  export type SucursalUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<SucursalCreateWithoutGoalsInput, SucursalUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutGoalsInput
    upsert?: SucursalUpsertWithoutGoalsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutGoalsInput, SucursalUpdateWithoutGoalsInput>, SucursalUncheckedUpdateWithoutGoalsInput>
  }

  export type GoalAssignmentUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput> | GoalAssignmentCreateWithoutGoalInput[] | GoalAssignmentUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutGoalInput | GoalAssignmentCreateOrConnectWithoutGoalInput[]
    upsert?: GoalAssignmentUpsertWithWhereUniqueWithoutGoalInput | GoalAssignmentUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalAssignmentCreateManyGoalInputEnvelope
    set?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    disconnect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    delete?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    update?: GoalAssignmentUpdateWithWhereUniqueWithoutGoalInput | GoalAssignmentUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalAssignmentUpdateManyWithWhereWithoutGoalInput | GoalAssignmentUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
  }

  export type GoalReportUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput> | GoalReportCreateWithoutGoalInput[] | GoalReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutGoalInput | GoalReportCreateOrConnectWithoutGoalInput[]
    upsert?: GoalReportUpsertWithWhereUniqueWithoutGoalInput | GoalReportUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalReportCreateManyGoalInputEnvelope
    set?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    disconnect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    delete?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    update?: GoalReportUpdateWithWhereUniqueWithoutGoalInput | GoalReportUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalReportUpdateManyWithWhereWithoutGoalInput | GoalReportUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutGoalNestedInput = {
    create?: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput> | ReportCreateWithoutGoalInput[] | ReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutGoalInput | ReportCreateOrConnectWithoutGoalInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutGoalInput | ReportUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: ReportCreateManyGoalInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutGoalInput | ReportUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutGoalInput | ReportUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput> | GoalAssignmentCreateWithoutGoalInput[] | GoalAssignmentUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalAssignmentCreateOrConnectWithoutGoalInput | GoalAssignmentCreateOrConnectWithoutGoalInput[]
    upsert?: GoalAssignmentUpsertWithWhereUniqueWithoutGoalInput | GoalAssignmentUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalAssignmentCreateManyGoalInputEnvelope
    set?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    disconnect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    delete?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    connect?: GoalAssignmentWhereUniqueInput | GoalAssignmentWhereUniqueInput[]
    update?: GoalAssignmentUpdateWithWhereUniqueWithoutGoalInput | GoalAssignmentUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalAssignmentUpdateManyWithWhereWithoutGoalInput | GoalAssignmentUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
  }

  export type GoalReportUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput> | GoalReportCreateWithoutGoalInput[] | GoalReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: GoalReportCreateOrConnectWithoutGoalInput | GoalReportCreateOrConnectWithoutGoalInput[]
    upsert?: GoalReportUpsertWithWhereUniqueWithoutGoalInput | GoalReportUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: GoalReportCreateManyGoalInputEnvelope
    set?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    disconnect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    delete?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    connect?: GoalReportWhereUniqueInput | GoalReportWhereUniqueInput[]
    update?: GoalReportUpdateWithWhereUniqueWithoutGoalInput | GoalReportUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: GoalReportUpdateManyWithWhereWithoutGoalInput | GoalReportUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput> | ReportCreateWithoutGoalInput[] | ReportUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutGoalInput | ReportCreateOrConnectWithoutGoalInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutGoalInput | ReportUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: ReportCreateManyGoalInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutGoalInput | ReportUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutGoalInput | ReportUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type GoalCreateNestedOneWithoutReportsInput = {
    create?: XOR<GoalCreateWithoutReportsInput, GoalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutReportsInput
    connect?: GoalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGoalReportsInput = {
    create?: XOR<UserCreateWithoutGoalReportsInput, UserUncheckedCreateWithoutGoalReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalReportsInput
    connect?: UserWhereUniqueInput
  }

  export type GoalReportFileCreateNestedManyWithoutGoalReportInput = {
    create?: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput> | GoalReportFileCreateWithoutGoalReportInput[] | GoalReportFileUncheckedCreateWithoutGoalReportInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutGoalReportInput | GoalReportFileCreateOrConnectWithoutGoalReportInput[]
    createMany?: GoalReportFileCreateManyGoalReportInputEnvelope
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
  }

  export type GoalReportFileUncheckedCreateNestedManyWithoutGoalReportInput = {
    create?: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput> | GoalReportFileCreateWithoutGoalReportInput[] | GoalReportFileUncheckedCreateWithoutGoalReportInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutGoalReportInput | GoalReportFileCreateOrConnectWithoutGoalReportInput[]
    createMany?: GoalReportFileCreateManyGoalReportInputEnvelope
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
  }

  export type GoalUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<GoalCreateWithoutReportsInput, GoalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutReportsInput
    upsert?: GoalUpsertWithoutReportsInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutReportsInput, GoalUpdateWithoutReportsInput>, GoalUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutGoalReportsNestedInput = {
    create?: XOR<UserCreateWithoutGoalReportsInput, UserUncheckedCreateWithoutGoalReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalReportsInput
    upsert?: UserUpsertWithoutGoalReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalReportsInput, UserUpdateWithoutGoalReportsInput>, UserUncheckedUpdateWithoutGoalReportsInput>
  }

  export type GoalReportFileUpdateManyWithoutGoalReportNestedInput = {
    create?: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput> | GoalReportFileCreateWithoutGoalReportInput[] | GoalReportFileUncheckedCreateWithoutGoalReportInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutGoalReportInput | GoalReportFileCreateOrConnectWithoutGoalReportInput[]
    upsert?: GoalReportFileUpsertWithWhereUniqueWithoutGoalReportInput | GoalReportFileUpsertWithWhereUniqueWithoutGoalReportInput[]
    createMany?: GoalReportFileCreateManyGoalReportInputEnvelope
    set?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    disconnect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    delete?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    update?: GoalReportFileUpdateWithWhereUniqueWithoutGoalReportInput | GoalReportFileUpdateWithWhereUniqueWithoutGoalReportInput[]
    updateMany?: GoalReportFileUpdateManyWithWhereWithoutGoalReportInput | GoalReportFileUpdateManyWithWhereWithoutGoalReportInput[]
    deleteMany?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
  }

  export type GoalReportFileUncheckedUpdateManyWithoutGoalReportNestedInput = {
    create?: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput> | GoalReportFileCreateWithoutGoalReportInput[] | GoalReportFileUncheckedCreateWithoutGoalReportInput[]
    connectOrCreate?: GoalReportFileCreateOrConnectWithoutGoalReportInput | GoalReportFileCreateOrConnectWithoutGoalReportInput[]
    upsert?: GoalReportFileUpsertWithWhereUniqueWithoutGoalReportInput | GoalReportFileUpsertWithWhereUniqueWithoutGoalReportInput[]
    createMany?: GoalReportFileCreateManyGoalReportInputEnvelope
    set?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    disconnect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    delete?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    connect?: GoalReportFileWhereUniqueInput | GoalReportFileWhereUniqueInput[]
    update?: GoalReportFileUpdateWithWhereUniqueWithoutGoalReportInput | GoalReportFileUpdateWithWhereUniqueWithoutGoalReportInput[]
    updateMany?: GoalReportFileUpdateManyWithWhereWithoutGoalReportInput | GoalReportFileUpdateManyWithWhereWithoutGoalReportInput[]
    deleteMany?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
  }

  export type GoalReportCreateNestedOneWithoutFilesInput = {
    create?: XOR<GoalReportCreateWithoutFilesInput, GoalReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GoalReportCreateOrConnectWithoutFilesInput
    connect?: GoalReportWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutGoalReportsInput = {
    create?: XOR<FileCreateWithoutGoalReportsInput, FileUncheckedCreateWithoutGoalReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutGoalReportsInput
    connect?: FileWhereUniqueInput
  }

  export type GoalReportUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<GoalReportCreateWithoutFilesInput, GoalReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: GoalReportCreateOrConnectWithoutFilesInput
    upsert?: GoalReportUpsertWithoutFilesInput
    connect?: GoalReportWhereUniqueInput
    update?: XOR<XOR<GoalReportUpdateToOneWithWhereWithoutFilesInput, GoalReportUpdateWithoutFilesInput>, GoalReportUncheckedUpdateWithoutFilesInput>
  }

  export type FileUpdateOneRequiredWithoutGoalReportsNestedInput = {
    create?: XOR<FileCreateWithoutGoalReportsInput, FileUncheckedCreateWithoutGoalReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutGoalReportsInput
    upsert?: FileUpsertWithoutGoalReportsInput
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutGoalReportsInput, FileUpdateWithoutGoalReportsInput>, FileUncheckedUpdateWithoutGoalReportsInput>
  }

  export type GoalCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<GoalCreateWithoutAssignmentsInput, GoalUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutAssignmentsInput
    connect?: GoalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGoalsInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type GoalUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<GoalCreateWithoutAssignmentsInput, GoalUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutAssignmentsInput
    upsert?: GoalUpsertWithoutAssignmentsInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutAssignmentsInput, GoalUpdateWithoutAssignmentsInput>, GoalUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    upsert?: UserUpsertWithoutGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalsInput, UserUpdateWithoutGoalsInput>, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type GoalCreateNestedOneWithoutGeneralReportsInput = {
    create?: XOR<GoalCreateWithoutGeneralReportsInput, GoalUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutGeneralReportsInput
    connect?: GoalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutReportsInput = {
    create?: XOR<SucursalCreateWithoutReportsInput, SucursalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutReportsInput
    connect?: SucursalWhereUniqueInput
  }

  export type ReportFileCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput> | ReportFileCreateWithoutReportInput[] | ReportFileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutReportInput | ReportFileCreateOrConnectWithoutReportInput[]
    createMany?: ReportFileCreateManyReportInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type ReportFileUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput> | ReportFileCreateWithoutReportInput[] | ReportFileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutReportInput | ReportFileCreateOrConnectWithoutReportInput[]
    createMany?: ReportFileCreateManyReportInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type GoalUpdateOneWithoutGeneralReportsNestedInput = {
    create?: XOR<GoalCreateWithoutGeneralReportsInput, GoalUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: GoalCreateOrConnectWithoutGeneralReportsInput
    upsert?: GoalUpsertWithoutGeneralReportsInput
    disconnect?: GoalWhereInput | boolean
    delete?: GoalWhereInput | boolean
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutGeneralReportsInput, GoalUpdateWithoutGeneralReportsInput>, GoalUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type SucursalUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<SucursalCreateWithoutReportsInput, SucursalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutReportsInput
    upsert?: SucursalUpsertWithoutReportsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutReportsInput, SucursalUpdateWithoutReportsInput>, SucursalUncheckedUpdateWithoutReportsInput>
  }

  export type ReportFileUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput> | ReportFileCreateWithoutReportInput[] | ReportFileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutReportInput | ReportFileCreateOrConnectWithoutReportInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutReportInput | ReportFileUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportFileCreateManyReportInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutReportInput | ReportFileUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutReportInput | ReportFileUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type ReportFileUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput> | ReportFileCreateWithoutReportInput[] | ReportFileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutReportInput | ReportFileCreateOrConnectWithoutReportInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutReportInput | ReportFileUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportFileCreateManyReportInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutReportInput | ReportFileUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutReportInput | ReportFileUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubmittedReportsInput = {
    create?: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedReportsInput = {
    create?: XOR<UserCreateWithoutReceivedReportsInput, UserUncheckedCreateWithoutReceivedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRespondedReportsInput = {
    create?: XOR<UserCreateWithoutRespondedReportsInput, UserUncheckedCreateWithoutRespondedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRespondedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutGeneralReportsInput = {
    create?: XOR<SucursalCreateWithoutGeneralReportsInput, SucursalUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutGeneralReportsInput
    connect?: SucursalWhereUniqueInput
  }

  export type GeneralReportFileCreateNestedManyWithoutGeneralReportInput = {
    create?: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput> | GeneralReportFileCreateWithoutGeneralReportInput[] | GeneralReportFileUncheckedCreateWithoutGeneralReportInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutGeneralReportInput | GeneralReportFileCreateOrConnectWithoutGeneralReportInput[]
    createMany?: GeneralReportFileCreateManyGeneralReportInputEnvelope
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
  }

  export type GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput = {
    create?: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput> | GeneralReportFileCreateWithoutGeneralReportInput[] | GeneralReportFileUncheckedCreateWithoutGeneralReportInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutGeneralReportInput | GeneralReportFileCreateOrConnectWithoutGeneralReportInput[]
    createMany?: GeneralReportFileCreateManyGeneralReportInputEnvelope
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubmittedReportsNestedInput = {
    create?: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedReportsInput
    upsert?: UserUpsertWithoutSubmittedReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmittedReportsInput, UserUpdateWithoutSubmittedReportsInput>, UserUncheckedUpdateWithoutSubmittedReportsInput>
  }

  export type UserUpdateOneWithoutReceivedReportsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedReportsInput, UserUncheckedCreateWithoutReceivedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedReportsInput
    upsert?: UserUpsertWithoutReceivedReportsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedReportsInput, UserUpdateWithoutReceivedReportsInput>, UserUncheckedUpdateWithoutReceivedReportsInput>
  }

  export type UserUpdateOneWithoutRespondedReportsNestedInput = {
    create?: XOR<UserCreateWithoutRespondedReportsInput, UserUncheckedCreateWithoutRespondedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRespondedReportsInput
    upsert?: UserUpsertWithoutRespondedReportsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRespondedReportsInput, UserUpdateWithoutRespondedReportsInput>, UserUncheckedUpdateWithoutRespondedReportsInput>
  }

  export type SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput = {
    create?: XOR<SucursalCreateWithoutGeneralReportsInput, SucursalUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutGeneralReportsInput
    upsert?: SucursalUpsertWithoutGeneralReportsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutGeneralReportsInput, SucursalUpdateWithoutGeneralReportsInput>, SucursalUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type GeneralReportFileUpdateManyWithoutGeneralReportNestedInput = {
    create?: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput> | GeneralReportFileCreateWithoutGeneralReportInput[] | GeneralReportFileUncheckedCreateWithoutGeneralReportInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutGeneralReportInput | GeneralReportFileCreateOrConnectWithoutGeneralReportInput[]
    upsert?: GeneralReportFileUpsertWithWhereUniqueWithoutGeneralReportInput | GeneralReportFileUpsertWithWhereUniqueWithoutGeneralReportInput[]
    createMany?: GeneralReportFileCreateManyGeneralReportInputEnvelope
    set?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    disconnect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    delete?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    update?: GeneralReportFileUpdateWithWhereUniqueWithoutGeneralReportInput | GeneralReportFileUpdateWithWhereUniqueWithoutGeneralReportInput[]
    updateMany?: GeneralReportFileUpdateManyWithWhereWithoutGeneralReportInput | GeneralReportFileUpdateManyWithWhereWithoutGeneralReportInput[]
    deleteMany?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
  }

  export type GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput = {
    create?: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput> | GeneralReportFileCreateWithoutGeneralReportInput[] | GeneralReportFileUncheckedCreateWithoutGeneralReportInput[]
    connectOrCreate?: GeneralReportFileCreateOrConnectWithoutGeneralReportInput | GeneralReportFileCreateOrConnectWithoutGeneralReportInput[]
    upsert?: GeneralReportFileUpsertWithWhereUniqueWithoutGeneralReportInput | GeneralReportFileUpsertWithWhereUniqueWithoutGeneralReportInput[]
    createMany?: GeneralReportFileCreateManyGeneralReportInputEnvelope
    set?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    disconnect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    delete?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    connect?: GeneralReportFileWhereUniqueInput | GeneralReportFileWhereUniqueInput[]
    update?: GeneralReportFileUpdateWithWhereUniqueWithoutGeneralReportInput | GeneralReportFileUpdateWithWhereUniqueWithoutGeneralReportInput[]
    updateMany?: GeneralReportFileUpdateManyWithWhereWithoutGeneralReportInput | GeneralReportFileUpdateManyWithWhereWithoutGeneralReportInput[]
    deleteMany?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
  }

  export type GeneralReportCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<GeneralReportCreateWithoutAttachmentsInput, GeneralReportUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: GeneralReportCreateOrConnectWithoutAttachmentsInput
    connect?: GeneralReportWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutGeneralReportsInput = {
    create?: XOR<FileCreateWithoutGeneralReportsInput, FileUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutGeneralReportsInput
    connect?: FileWhereUniqueInput
  }

  export type GeneralReportUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<GeneralReportCreateWithoutAttachmentsInput, GeneralReportUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: GeneralReportCreateOrConnectWithoutAttachmentsInput
    upsert?: GeneralReportUpsertWithoutAttachmentsInput
    connect?: GeneralReportWhereUniqueInput
    update?: XOR<XOR<GeneralReportUpdateToOneWithWhereWithoutAttachmentsInput, GeneralReportUpdateWithoutAttachmentsInput>, GeneralReportUncheckedUpdateWithoutAttachmentsInput>
  }

  export type FileUpdateOneRequiredWithoutGeneralReportsNestedInput = {
    create?: XOR<FileCreateWithoutGeneralReportsInput, FileUncheckedCreateWithoutGeneralReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutGeneralReportsInput
    upsert?: FileUpsertWithoutGeneralReportsInput
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutGeneralReportsInput, FileUpdateWithoutGeneralReportsInput>, FileUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type ReportCreateNestedOneWithoutFilesInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    connect?: ReportWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutReportsInput = {
    create?: XOR<FileCreateWithoutReportsInput, FileUncheckedCreateWithoutReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutReportsInput
    connect?: FileWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    upsert?: ReportUpsertWithoutFilesInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutFilesInput, ReportUpdateWithoutFilesInput>, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type FileUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<FileCreateWithoutReportsInput, FileUncheckedCreateWithoutReportsInput>
    connectOrCreate?: FileCreateOrConnectWithoutReportsInput
    upsert?: FileUpsertWithoutReportsInput
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutReportsInput, FileUpdateWithoutReportsInput>, FileUncheckedUpdateWithoutReportsInput>
  }

  export type UserCreateNestedOneWithoutScansInput = {
    create?: XOR<UserCreateWithoutScansInput, UserUncheckedCreateWithoutScansInput>
    connectOrCreate?: UserCreateOrConnectWithoutScansInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutScansInput = {
    create?: XOR<SucursalCreateWithoutScansInput, SucursalUncheckedCreateWithoutScansInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutScansInput
    connect?: SucursalWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutScansNestedInput = {
    create?: XOR<UserCreateWithoutScansInput, UserUncheckedCreateWithoutScansInput>
    connectOrCreate?: UserCreateOrConnectWithoutScansInput
    upsert?: UserUpsertWithoutScansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScansInput, UserUpdateWithoutScansInput>, UserUncheckedUpdateWithoutScansInput>
  }

  export type SucursalUpdateOneRequiredWithoutScansNestedInput = {
    create?: XOR<SucursalCreateWithoutScansInput, SucursalUncheckedCreateWithoutScansInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutScansInput
    upsert?: SucursalUpsertWithoutScansInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutScansInput, SucursalUpdateWithoutScansInput>, SucursalUncheckedUpdateWithoutScansInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type SucursalCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<SucursalCreateWithoutNotificationsInput, SucursalUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutNotificationsInput
    connect?: SucursalWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type SucursalUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<SucursalCreateWithoutNotificationsInput, SucursalUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutNotificationsInput
    upsert?: SucursalUpsertWithoutNotificationsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutNotificationsInput, SucursalUpdateWithoutNotificationsInput>, SucursalUncheckedUpdateWithoutNotificationsInput>
  }

  export type SucursalCreateNestedOneWithoutErrorLogsInput = {
    create?: XOR<SucursalCreateWithoutErrorLogsInput, SucursalUncheckedCreateWithoutErrorLogsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutErrorLogsInput
    connect?: SucursalWhereUniqueInput
  }

  export type SucursalUpdateOneRequiredWithoutErrorLogsNestedInput = {
    create?: XOR<SucursalCreateWithoutErrorLogsInput, SucursalUncheckedCreateWithoutErrorLogsInput>
    connectOrCreate?: SucursalCreateOrConnectWithoutErrorLogsInput
    upsert?: SucursalUpsertWithoutErrorLogsInput
    connect?: SucursalWhereUniqueInput
    update?: XOR<XOR<SucursalUpdateToOneWithWhereWithoutErrorLogsInput, SucursalUpdateWithoutErrorLogsInput>, SucursalUncheckedUpdateWithoutErrorLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserCreateWithoutSucursalInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSucursalInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput>
  }

  export type UserCreateManySucursalInputEnvelope = {
    data: UserCreateManySucursalInput | UserCreateManySucursalInput[]
  }

  export type DepartmentCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supervisor?: UserCreateNestedOneWithoutSupervisedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    supervisors?: UserCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    supervisors?: UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutSucursalInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput>
  }

  export type DepartmentCreateManySucursalInputEnvelope = {
    data: DepartmentCreateManySucursalInput | DepartmentCreateManySucursalInput[]
  }

  export type LibraryCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLibrariesInput
    members?: LibraryMemberCreateNestedManyWithoutLibraryInput
  }

  export type LibraryUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: LibraryMemberUncheckedCreateNestedManyWithoutLibraryInput
  }

  export type LibraryCreateOrConnectWithoutSucursalInput = {
    where: LibraryWhereUniqueInput
    create: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput>
  }

  export type LibraryCreateManySucursalInputEnvelope = {
    data: LibraryCreateManySucursalInput | LibraryCreateManySucursalInput[]
  }

  export type GoalCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutSucursalInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput>
  }

  export type GoalCreateManySucursalInputEnvelope = {
    data: GoalCreateManySucursalInput | GoalCreateManySucursalInput[]
  }

  export type ReportCreateWithoutSucursalInput = {
    id?: string
    title: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: GoalCreateNestedOneWithoutGeneralReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    files?: ReportFileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutSucursalInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: ReportFileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutSucursalInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput>
  }

  export type ReportCreateManySucursalInputEnvelope = {
    data: ReportCreateManySucursalInput | ReportCreateManySucursalInput[]
  }

  export type GeneralReportCreateWithoutSucursalInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedReportsInput
    submittedTo?: UserCreateNestedOneWithoutReceivedReportsInput
    respondedBy?: UserCreateNestedOneWithoutRespondedReportsInput
    attachments?: GeneralReportFileCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUncheckedCreateWithoutSucursalInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportCreateOrConnectWithoutSucursalInput = {
    where: GeneralReportWhereUniqueInput
    create: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput>
  }

  export type GeneralReportCreateManySucursalInputEnvelope = {
    data: GeneralReportCreateManySucursalInput | GeneralReportCreateManySucursalInput[]
  }

  export type FolderCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutSucursalInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput>
  }

  export type FolderCreateManySucursalInputEnvelope = {
    data: FolderCreateManySucursalInput | FolderCreateManySucursalInput[]
  }

  export type FileCreateWithoutSucursalInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    user: UserCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutSucursalInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutSucursalInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput>
  }

  export type FileCreateManySucursalInputEnvelope = {
    data: FileCreateManySucursalInput | FileCreateManySucursalInput[]
  }

  export type NotificationCreateWithoutSucursalInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutSucursalInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    userId: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutSucursalInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput>
  }

  export type NotificationCreateManySucursalInputEnvelope = {
    data: NotificationCreateManySucursalInput | NotificationCreateManySucursalInput[]
  }

  export type ErrorLogCreateWithoutSucursalInput = {
    id?: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type ErrorLogUncheckedCreateWithoutSucursalInput = {
    id?: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type ErrorLogCreateOrConnectWithoutSucursalInput = {
    where: ErrorLogWhereUniqueInput
    create: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput>
  }

  export type ErrorLogCreateManySucursalInputEnvelope = {
    data: ErrorLogCreateManySucursalInput | ErrorLogCreateManySucursalInput[]
  }

  export type ScanCreateWithoutSucursalInput = {
    id?: string
    title: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutScansInput
  }

  export type ScanUncheckedCreateWithoutSucursalInput = {
    id?: string
    title: string
    userId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScanCreateOrConnectWithoutSucursalInput = {
    where: ScanWhereUniqueInput
    create: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput>
  }

  export type ScanCreateManySucursalInputEnvelope = {
    data: ScanCreateManySucursalInput | ScanCreateManySucursalInput[]
  }

  export type SucursalConnectionCreateWithoutSourceSucursalInput = {
    id?: string
    createdAt?: Date | string
    targetSucursal: SucursalCreateNestedOneWithoutTargetConnectionsInput
  }

  export type SucursalConnectionUncheckedCreateWithoutSourceSucursalInput = {
    id?: string
    targetSucursalId: string
    createdAt?: Date | string
  }

  export type SucursalConnectionCreateOrConnectWithoutSourceSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    create: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput>
  }

  export type SucursalConnectionCreateManySourceSucursalInputEnvelope = {
    data: SucursalConnectionCreateManySourceSucursalInput | SucursalConnectionCreateManySourceSucursalInput[]
  }

  export type SucursalConnectionCreateWithoutTargetSucursalInput = {
    id?: string
    createdAt?: Date | string
    sourceSucursal: SucursalCreateNestedOneWithoutSourceConnectionsInput
  }

  export type SucursalConnectionUncheckedCreateWithoutTargetSucursalInput = {
    id?: string
    sourceSucursalId: string
    createdAt?: Date | string
  }

  export type SucursalConnectionCreateOrConnectWithoutTargetSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    create: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput>
  }

  export type SucursalConnectionCreateManyTargetSucursalInputEnvelope = {
    data: SucursalConnectionCreateManyTargetSucursalInput | SucursalConnectionCreateManyTargetSucursalInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutSucursalInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSucursalInput, UserUncheckedUpdateWithoutSucursalInput>
    create: XOR<UserCreateWithoutSucursalInput, UserUncheckedCreateWithoutSucursalInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSucursalInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSucursalInput, UserUncheckedUpdateWithoutSucursalInput>
  }

  export type UserUpdateManyWithWhereWithoutSucursalInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSucursalInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    sucursalId?: StringFilter<"User"> | string
    departmentId?: StringNullableFilter<"User"> | string | null
    supervisorId?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutSucursalInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutSucursalInput, DepartmentUncheckedUpdateWithoutSucursalInput>
    create: XOR<DepartmentCreateWithoutSucursalInput, DepartmentUncheckedCreateWithoutSucursalInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutSucursalInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutSucursalInput, DepartmentUncheckedUpdateWithoutSucursalInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutSucursalInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutSucursalInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    sucursalId?: StringFilter<"Department"> | string
    supervisorId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type LibraryUpsertWithWhereUniqueWithoutSucursalInput = {
    where: LibraryWhereUniqueInput
    update: XOR<LibraryUpdateWithoutSucursalInput, LibraryUncheckedUpdateWithoutSucursalInput>
    create: XOR<LibraryCreateWithoutSucursalInput, LibraryUncheckedCreateWithoutSucursalInput>
  }

  export type LibraryUpdateWithWhereUniqueWithoutSucursalInput = {
    where: LibraryWhereUniqueInput
    data: XOR<LibraryUpdateWithoutSucursalInput, LibraryUncheckedUpdateWithoutSucursalInput>
  }

  export type LibraryUpdateManyWithWhereWithoutSucursalInput = {
    where: LibraryScalarWhereInput
    data: XOR<LibraryUpdateManyMutationInput, LibraryUncheckedUpdateManyWithoutSucursalInput>
  }

  export type LibraryScalarWhereInput = {
    AND?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
    OR?: LibraryScalarWhereInput[]
    NOT?: LibraryScalarWhereInput | LibraryScalarWhereInput[]
    id?: StringFilter<"Library"> | string
    name?: StringFilter<"Library"> | string
    description?: StringNullableFilter<"Library"> | string | null
    userId?: StringFilter<"Library"> | string
    sucursalId?: StringFilter<"Library"> | string
    createdAt?: DateTimeFilter<"Library"> | Date | string
    updatedAt?: DateTimeFilter<"Library"> | Date | string
  }

  export type GoalUpsertWithWhereUniqueWithoutSucursalInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutSucursalInput, GoalUncheckedUpdateWithoutSucursalInput>
    create: XOR<GoalCreateWithoutSucursalInput, GoalUncheckedCreateWithoutSucursalInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutSucursalInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutSucursalInput, GoalUncheckedUpdateWithoutSucursalInput>
  }

  export type GoalUpdateManyWithWhereWithoutSucursalInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutSucursalInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    name?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    status?: StringFilter<"Goal"> | string
    priority?: StringFilter<"Goal"> | string
    progress?: IntFilter<"Goal"> | number
    departmentId?: StringFilter<"Goal"> | string
    createdById?: StringFilter<"Goal"> | string
    sucursalId?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutSucursalInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutSucursalInput, ReportUncheckedUpdateWithoutSucursalInput>
    create: XOR<ReportCreateWithoutSucursalInput, ReportUncheckedCreateWithoutSucursalInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutSucursalInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutSucursalInput, ReportUncheckedUpdateWithoutSucursalInput>
  }

  export type ReportUpdateManyWithWhereWithoutSucursalInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutSucursalInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    title?: StringFilter<"Report"> | string
    description?: StringNullableFilter<"Report"> | string | null
    goalId?: StringNullableFilter<"Report"> | string | null
    userId?: StringFilter<"Report"> | string
    sucursalId?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
  }

  export type GeneralReportUpsertWithWhereUniqueWithoutSucursalInput = {
    where: GeneralReportWhereUniqueInput
    update: XOR<GeneralReportUpdateWithoutSucursalInput, GeneralReportUncheckedUpdateWithoutSucursalInput>
    create: XOR<GeneralReportCreateWithoutSucursalInput, GeneralReportUncheckedCreateWithoutSucursalInput>
  }

  export type GeneralReportUpdateWithWhereUniqueWithoutSucursalInput = {
    where: GeneralReportWhereUniqueInput
    data: XOR<GeneralReportUpdateWithoutSucursalInput, GeneralReportUncheckedUpdateWithoutSucursalInput>
  }

  export type GeneralReportUpdateManyWithWhereWithoutSucursalInput = {
    where: GeneralReportScalarWhereInput
    data: XOR<GeneralReportUpdateManyMutationInput, GeneralReportUncheckedUpdateManyWithoutSucursalInput>
  }

  export type GeneralReportScalarWhereInput = {
    AND?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
    OR?: GeneralReportScalarWhereInput[]
    NOT?: GeneralReportScalarWhereInput | GeneralReportScalarWhereInput[]
    id?: StringFilter<"GeneralReport"> | string
    title?: StringFilter<"GeneralReport"> | string
    description?: StringFilter<"GeneralReport"> | string
    type?: StringFilter<"GeneralReport"> | string
    status?: StringFilter<"GeneralReport"> | string
    submittedById?: StringFilter<"GeneralReport"> | string
    submittedToId?: StringNullableFilter<"GeneralReport"> | string | null
    respondedById?: StringNullableFilter<"GeneralReport"> | string | null
    response?: StringNullableFilter<"GeneralReport"> | string | null
    submittedAt?: DateTimeFilter<"GeneralReport"> | Date | string
    respondedAt?: DateTimeNullableFilter<"GeneralReport"> | Date | string | null
    sucursalId?: StringFilter<"GeneralReport"> | string
    createdAt?: DateTimeFilter<"GeneralReport"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralReport"> | Date | string
  }

  export type FolderUpsertWithWhereUniqueWithoutSucursalInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutSucursalInput, FolderUncheckedUpdateWithoutSucursalInput>
    create: XOR<FolderCreateWithoutSucursalInput, FolderUncheckedCreateWithoutSucursalInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutSucursalInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutSucursalInput, FolderUncheckedUpdateWithoutSucursalInput>
  }

  export type FolderUpdateManyWithWhereWithoutSucursalInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutSucursalInput>
  }

  export type FolderScalarWhereInput = {
    AND?: FolderScalarWhereInput | FolderScalarWhereInput[]
    OR?: FolderScalarWhereInput[]
    NOT?: FolderScalarWhereInput | FolderScalarWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    parentId?: StringNullableFilter<"Folder"> | string | null
    userId?: StringFilter<"Folder"> | string
    sucursalId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
  }

  export type FileUpsertWithWhereUniqueWithoutSucursalInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutSucursalInput, FileUncheckedUpdateWithoutSucursalInput>
    create: XOR<FileCreateWithoutSucursalInput, FileUncheckedCreateWithoutSucursalInput>
  }

  export type FileUpdateWithWhereUniqueWithoutSucursalInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutSucursalInput, FileUncheckedUpdateWithoutSucursalInput>
  }

  export type FileUpdateManyWithWhereWithoutSucursalInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutSucursalInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    originalName?: StringNullableFilter<"File"> | string | null
    description?: StringNullableFilter<"File"> | string | null
    url?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    type?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    isPublic?: BoolFilter<"File"> | boolean
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringFilter<"File"> | string
    sucursalId?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutSucursalInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutSucursalInput, NotificationUncheckedUpdateWithoutSucursalInput>
    create: XOR<NotificationCreateWithoutSucursalInput, NotificationUncheckedCreateWithoutSucursalInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutSucursalInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutSucursalInput, NotificationUncheckedUpdateWithoutSucursalInput>
  }

  export type NotificationUpdateManyWithWhereWithoutSucursalInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutSucursalInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    description?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    sucursalId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ErrorLogUpsertWithWhereUniqueWithoutSucursalInput = {
    where: ErrorLogWhereUniqueInput
    update: XOR<ErrorLogUpdateWithoutSucursalInput, ErrorLogUncheckedUpdateWithoutSucursalInput>
    create: XOR<ErrorLogCreateWithoutSucursalInput, ErrorLogUncheckedCreateWithoutSucursalInput>
  }

  export type ErrorLogUpdateWithWhereUniqueWithoutSucursalInput = {
    where: ErrorLogWhereUniqueInput
    data: XOR<ErrorLogUpdateWithoutSucursalInput, ErrorLogUncheckedUpdateWithoutSucursalInput>
  }

  export type ErrorLogUpdateManyWithWhereWithoutSucursalInput = {
    where: ErrorLogScalarWhereInput
    data: XOR<ErrorLogUpdateManyMutationInput, ErrorLogUncheckedUpdateManyWithoutSucursalInput>
  }

  export type ErrorLogScalarWhereInput = {
    AND?: ErrorLogScalarWhereInput | ErrorLogScalarWhereInput[]
    OR?: ErrorLogScalarWhereInput[]
    NOT?: ErrorLogScalarWhereInput | ErrorLogScalarWhereInput[]
    id?: StringFilter<"ErrorLog"> | string
    sucursalId?: StringFilter<"ErrorLog"> | string
    errorType?: StringFilter<"ErrorLog"> | string
    description?: StringFilter<"ErrorLog"> | string
    errorDetails?: StringNullableFilter<"ErrorLog"> | string | null
    createdAt?: DateTimeFilter<"ErrorLog"> | Date | string
  }

  export type ScanUpsertWithWhereUniqueWithoutSucursalInput = {
    where: ScanWhereUniqueInput
    update: XOR<ScanUpdateWithoutSucursalInput, ScanUncheckedUpdateWithoutSucursalInput>
    create: XOR<ScanCreateWithoutSucursalInput, ScanUncheckedCreateWithoutSucursalInput>
  }

  export type ScanUpdateWithWhereUniqueWithoutSucursalInput = {
    where: ScanWhereUniqueInput
    data: XOR<ScanUpdateWithoutSucursalInput, ScanUncheckedUpdateWithoutSucursalInput>
  }

  export type ScanUpdateManyWithWhereWithoutSucursalInput = {
    where: ScanScalarWhereInput
    data: XOR<ScanUpdateManyMutationInput, ScanUncheckedUpdateManyWithoutSucursalInput>
  }

  export type ScanScalarWhereInput = {
    AND?: ScanScalarWhereInput | ScanScalarWhereInput[]
    OR?: ScanScalarWhereInput[]
    NOT?: ScanScalarWhereInput | ScanScalarWhereInput[]
    id?: StringFilter<"Scan"> | string
    title?: StringFilter<"Scan"> | string
    userId?: StringFilter<"Scan"> | string
    sucursalId?: StringFilter<"Scan"> | string
    images?: StringFilter<"Scan"> | string
    pdfUrl?: StringNullableFilter<"Scan"> | string | null
    createdAt?: DateTimeFilter<"Scan"> | Date | string
    updatedAt?: DateTimeFilter<"Scan"> | Date | string
  }

  export type SucursalConnectionUpsertWithWhereUniqueWithoutSourceSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    update: XOR<SucursalConnectionUpdateWithoutSourceSucursalInput, SucursalConnectionUncheckedUpdateWithoutSourceSucursalInput>
    create: XOR<SucursalConnectionCreateWithoutSourceSucursalInput, SucursalConnectionUncheckedCreateWithoutSourceSucursalInput>
  }

  export type SucursalConnectionUpdateWithWhereUniqueWithoutSourceSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    data: XOR<SucursalConnectionUpdateWithoutSourceSucursalInput, SucursalConnectionUncheckedUpdateWithoutSourceSucursalInput>
  }

  export type SucursalConnectionUpdateManyWithWhereWithoutSourceSucursalInput = {
    where: SucursalConnectionScalarWhereInput
    data: XOR<SucursalConnectionUpdateManyMutationInput, SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalInput>
  }

  export type SucursalConnectionScalarWhereInput = {
    AND?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
    OR?: SucursalConnectionScalarWhereInput[]
    NOT?: SucursalConnectionScalarWhereInput | SucursalConnectionScalarWhereInput[]
    id?: StringFilter<"SucursalConnection"> | string
    sourceSucursalId?: StringFilter<"SucursalConnection"> | string
    targetSucursalId?: StringFilter<"SucursalConnection"> | string
    createdAt?: DateTimeFilter<"SucursalConnection"> | Date | string
  }

  export type SucursalConnectionUpsertWithWhereUniqueWithoutTargetSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    update: XOR<SucursalConnectionUpdateWithoutTargetSucursalInput, SucursalConnectionUncheckedUpdateWithoutTargetSucursalInput>
    create: XOR<SucursalConnectionCreateWithoutTargetSucursalInput, SucursalConnectionUncheckedCreateWithoutTargetSucursalInput>
  }

  export type SucursalConnectionUpdateWithWhereUniqueWithoutTargetSucursalInput = {
    where: SucursalConnectionWhereUniqueInput
    data: XOR<SucursalConnectionUpdateWithoutTargetSucursalInput, SucursalConnectionUncheckedUpdateWithoutTargetSucursalInput>
  }

  export type SucursalConnectionUpdateManyWithWhereWithoutTargetSucursalInput = {
    where: SucursalConnectionScalarWhereInput
    data: XOR<SucursalConnectionUpdateManyMutationInput, SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalInput>
  }

  export type SucursalCreateWithoutSourceConnectionsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutSourceConnectionsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutSourceConnectionsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutSourceConnectionsInput, SucursalUncheckedCreateWithoutSourceConnectionsInput>
  }

  export type SucursalCreateWithoutTargetConnectionsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
  }

  export type SucursalUncheckedCreateWithoutTargetConnectionsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
  }

  export type SucursalCreateOrConnectWithoutTargetConnectionsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutTargetConnectionsInput, SucursalUncheckedCreateWithoutTargetConnectionsInput>
  }

  export type SucursalUpsertWithoutSourceConnectionsInput = {
    update: XOR<SucursalUpdateWithoutSourceConnectionsInput, SucursalUncheckedUpdateWithoutSourceConnectionsInput>
    create: XOR<SucursalCreateWithoutSourceConnectionsInput, SucursalUncheckedCreateWithoutSourceConnectionsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutSourceConnectionsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutSourceConnectionsInput, SucursalUncheckedUpdateWithoutSourceConnectionsInput>
  }

  export type SucursalUpdateWithoutSourceConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutSourceConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUpsertWithoutTargetConnectionsInput = {
    update: XOR<SucursalUpdateWithoutTargetConnectionsInput, SucursalUncheckedUpdateWithoutTargetConnectionsInput>
    create: XOR<SucursalCreateWithoutTargetConnectionsInput, SucursalUncheckedCreateWithoutTargetConnectionsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutTargetConnectionsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutTargetConnectionsInput, SucursalUncheckedUpdateWithoutTargetConnectionsInput>
  }

  export type SucursalUpdateWithoutTargetConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutTargetConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
  }

  export type SucursalCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutDepartmentsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutDepartmentsInput, SucursalUncheckedCreateWithoutDepartmentsInput>
  }

  export type UserCreateWithoutSupervisedDepartmentsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupervisedDepartmentsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupervisedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupervisedDepartmentsInput, UserUncheckedCreateWithoutSupervisedDepartmentsInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
  }

  export type UserCreateWithoutDepartmentSupervisorsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentSupervisorsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentSupervisorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput>
  }

  export type GoalCreateWithoutDepartmentInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutDepartmentInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput>
  }

  export type GoalCreateManyDepartmentInputEnvelope = {
    data: GoalCreateManyDepartmentInput | GoalCreateManyDepartmentInput[]
  }

  export type SucursalUpsertWithoutDepartmentsInput = {
    update: XOR<SucursalUpdateWithoutDepartmentsInput, SucursalUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<SucursalCreateWithoutDepartmentsInput, SucursalUncheckedCreateWithoutDepartmentsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutDepartmentsInput, SucursalUncheckedUpdateWithoutDepartmentsInput>
  }

  export type SucursalUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type UserUpsertWithoutSupervisedDepartmentsInput = {
    update: XOR<UserUpdateWithoutSupervisedDepartmentsInput, UserUncheckedUpdateWithoutSupervisedDepartmentsInput>
    create: XOR<UserCreateWithoutSupervisedDepartmentsInput, UserUncheckedCreateWithoutSupervisedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSupervisedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSupervisedDepartmentsInput, UserUncheckedUpdateWithoutSupervisedDepartmentsInput>
  }

  export type UserUpdateWithoutSupervisedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupervisedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentSupervisorsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentSupervisorsInput, UserUncheckedUpdateWithoutDepartmentSupervisorsInput>
    create: XOR<UserCreateWithoutDepartmentSupervisorsInput, UserUncheckedCreateWithoutDepartmentSupervisorsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentSupervisorsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentSupervisorsInput, UserUncheckedUpdateWithoutDepartmentSupervisorsInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentSupervisorsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentSupervisorsInput>
  }

  export type GoalUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutDepartmentInput, GoalUncheckedUpdateWithoutDepartmentInput>
    create: XOR<GoalCreateWithoutDepartmentInput, GoalUncheckedCreateWithoutDepartmentInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutDepartmentInput, GoalUncheckedUpdateWithoutDepartmentInput>
  }

  export type GoalUpdateManyWithWhereWithoutDepartmentInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type SucursalCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutUsersInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutUsersInput, SucursalUncheckedCreateWithoutUsersInput>
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutDepartmentsInput
    supervisor?: UserCreateNestedOneWithoutSupervisedDepartmentsInput
    supervisors?: UserCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supervisors?: UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutSubordinatesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubordinatesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubordinatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubordinatesInput, UserUncheckedCreateWithoutSubordinatesInput>
  }

  export type UserCreateWithoutSupervisorInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupervisorInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupervisorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
  }

  export type UserCreateManySupervisorInputEnvelope = {
    data: UserCreateManySupervisorInput | UserCreateManySupervisorInput[]
  }

  export type DepartmentCreateWithoutSupervisorInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    supervisors?: UserCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutSupervisorInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    supervisors?: UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput
    goals?: GoalUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutSupervisorInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput>
  }

  export type DepartmentCreateManySupervisorInputEnvelope = {
    data: DepartmentCreateManySupervisorInput | DepartmentCreateManySupervisorInput[]
  }

  export type DepartmentCreateWithoutSupervisorsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutDepartmentsInput
    supervisor?: UserCreateNestedOneWithoutSupervisedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    goals?: GoalCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutSupervisorsInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    goals?: GoalUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutSupervisorsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput>
  }

  export type FolderCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutUserInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput>
  }

  export type FolderCreateManyUserInputEnvelope = {
    data: FolderCreateManyUserInput | FolderCreateManyUserInput[]
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: FileCreateManyUserInput | FileCreateManyUserInput[]
  }

  export type LibraryCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutLibrariesInput
    members?: LibraryMemberCreateNestedManyWithoutLibraryInput
  }

  export type LibraryUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: LibraryMemberUncheckedCreateNestedManyWithoutLibraryInput
  }

  export type LibraryCreateOrConnectWithoutUserInput = {
    where: LibraryWhereUniqueInput
    create: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput>
  }

  export type LibraryCreateManyUserInputEnvelope = {
    data: LibraryCreateManyUserInput | LibraryCreateManyUserInput[]
  }

  export type LibraryMemberCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    library: LibraryCreateNestedOneWithoutMembersInput
  }

  export type LibraryMemberUncheckedCreateWithoutUserInput = {
    id?: string
    libraryId: string
    createdAt?: Date | string
  }

  export type LibraryMemberCreateOrConnectWithoutUserInput = {
    where: LibraryMemberWhereUniqueInput
    create: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput>
  }

  export type LibraryMemberCreateManyUserInputEnvelope = {
    data: LibraryMemberCreateManyUserInput | LibraryMemberCreateManyUserInput[]
  }

  export type GoalAssignmentCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    goal: GoalCreateNestedOneWithoutAssignmentsInput
  }

  export type GoalAssignmentUncheckedCreateWithoutUserInput = {
    id?: string
    goalId: string
    assignedAt?: Date | string
  }

  export type GoalAssignmentCreateOrConnectWithoutUserInput = {
    where: GoalAssignmentWhereUniqueInput
    create: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput>
  }

  export type GoalAssignmentCreateManyUserInputEnvelope = {
    data: GoalAssignmentCreateManyUserInput | GoalAssignmentCreateManyUserInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    createdAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    sucursalId: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type ScanCreateWithoutUserInput = {
    id?: string
    title: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutScansInput
  }

  export type ScanUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    sucursalId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScanCreateOrConnectWithoutUserInput = {
    where: ScanWhereUniqueInput
    create: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput>
  }

  export type ScanCreateManyUserInputEnvelope = {
    data: ScanCreateManyUserInput | ScanCreateManyUserInput[]
  }

  export type GoalCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutCreatedByInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput>
  }

  export type GoalCreateManyCreatedByInputEnvelope = {
    data: GoalCreateManyCreatedByInput | GoalCreateManyCreatedByInput[]
  }

  export type GeneralReportCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedTo?: UserCreateNestedOneWithoutReceivedReportsInput
    respondedBy?: UserCreateNestedOneWithoutRespondedReportsInput
    sucursal: SucursalCreateNestedOneWithoutGeneralReportsInput
    attachments?: GeneralReportFileCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUncheckedCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportCreateOrConnectWithoutSubmittedByInput = {
    where: GeneralReportWhereUniqueInput
    create: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput>
  }

  export type GeneralReportCreateManySubmittedByInputEnvelope = {
    data: GeneralReportCreateManySubmittedByInput | GeneralReportCreateManySubmittedByInput[]
  }

  export type GeneralReportCreateWithoutSubmittedToInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedReportsInput
    respondedBy?: UserCreateNestedOneWithoutRespondedReportsInput
    sucursal: SucursalCreateNestedOneWithoutGeneralReportsInput
    attachments?: GeneralReportFileCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUncheckedCreateWithoutSubmittedToInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportCreateOrConnectWithoutSubmittedToInput = {
    where: GeneralReportWhereUniqueInput
    create: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput>
  }

  export type GeneralReportCreateManySubmittedToInputEnvelope = {
    data: GeneralReportCreateManySubmittedToInput | GeneralReportCreateManySubmittedToInput[]
  }

  export type GeneralReportCreateWithoutRespondedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedReportsInput
    submittedTo?: UserCreateNestedOneWithoutReceivedReportsInput
    sucursal: SucursalCreateNestedOneWithoutGeneralReportsInput
    attachments?: GeneralReportFileCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportUncheckedCreateWithoutRespondedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GeneralReportFileUncheckedCreateNestedManyWithoutGeneralReportInput
  }

  export type GeneralReportCreateOrConnectWithoutRespondedByInput = {
    where: GeneralReportWhereUniqueInput
    create: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput>
  }

  export type GeneralReportCreateManyRespondedByInputEnvelope = {
    data: GeneralReportCreateManyRespondedByInput | GeneralReportCreateManyRespondedByInput[]
  }

  export type GoalReportCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    goal: GoalCreateNestedOneWithoutReportsInput
    files?: GoalReportFileCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportUncheckedCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    goalId: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: GoalReportFileUncheckedCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportCreateOrConnectWithoutSubmittedByInput = {
    where: GoalReportWhereUniqueInput
    create: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput>
  }

  export type GoalReportCreateManySubmittedByInputEnvelope = {
    data: GoalReportCreateManySubmittedByInput | GoalReportCreateManySubmittedByInput[]
  }

  export type ReportCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: GoalCreateNestedOneWithoutGeneralReportsInput
    sucursal: SucursalCreateNestedOneWithoutReportsInput
    files?: ReportFileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: ReportFileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
  }

  export type SucursalUpsertWithoutUsersInput = {
    update: XOR<SucursalUpdateWithoutUsersInput, SucursalUncheckedUpdateWithoutUsersInput>
    create: XOR<SucursalCreateWithoutUsersInput, SucursalUncheckedCreateWithoutUsersInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutUsersInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutUsersInput, SucursalUncheckedUpdateWithoutUsersInput>
  }

  export type SucursalUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutDepartmentsNestedInput
    supervisor?: UserUpdateOneWithoutSupervisedDepartmentsNestedInput
    supervisors?: UserUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supervisors?: UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserUpsertWithoutSubordinatesInput = {
    update: XOR<UserUpdateWithoutSubordinatesInput, UserUncheckedUpdateWithoutSubordinatesInput>
    create: XOR<UserCreateWithoutSubordinatesInput, UserUncheckedCreateWithoutSubordinatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubordinatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubordinatesInput, UserUncheckedUpdateWithoutSubordinatesInput>
  }

  export type UserUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSupervisorInput, UserUncheckedUpdateWithoutSupervisorInput>
    create: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSupervisorInput, UserUncheckedUpdateWithoutSupervisorInput>
  }

  export type UserUpdateManyWithWhereWithoutSupervisorInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutSupervisorInput, DepartmentUncheckedUpdateWithoutSupervisorInput>
    create: XOR<DepartmentCreateWithoutSupervisorInput, DepartmentUncheckedCreateWithoutSupervisorInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutSupervisorInput, DepartmentUncheckedUpdateWithoutSupervisorInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutSupervisorInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutSupervisorsInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutSupervisorsInput, DepartmentUncheckedUpdateWithoutSupervisorsInput>
    create: XOR<DepartmentCreateWithoutSupervisorsInput, DepartmentUncheckedCreateWithoutSupervisorsInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutSupervisorsInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutSupervisorsInput, DepartmentUncheckedUpdateWithoutSupervisorsInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutSupervisorsInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutSupervisorsInput>
  }

  export type FolderUpsertWithWhereUniqueWithoutUserInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutUserInput, FolderUncheckedUpdateWithoutUserInput>
    create: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutUserInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutUserInput, FolderUncheckedUpdateWithoutUserInput>
  }

  export type FolderUpdateManyWithWhereWithoutUserInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutUserInput>
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUserInput>
  }

  export type LibraryUpsertWithWhereUniqueWithoutUserInput = {
    where: LibraryWhereUniqueInput
    update: XOR<LibraryUpdateWithoutUserInput, LibraryUncheckedUpdateWithoutUserInput>
    create: XOR<LibraryCreateWithoutUserInput, LibraryUncheckedCreateWithoutUserInput>
  }

  export type LibraryUpdateWithWhereUniqueWithoutUserInput = {
    where: LibraryWhereUniqueInput
    data: XOR<LibraryUpdateWithoutUserInput, LibraryUncheckedUpdateWithoutUserInput>
  }

  export type LibraryUpdateManyWithWhereWithoutUserInput = {
    where: LibraryScalarWhereInput
    data: XOR<LibraryUpdateManyMutationInput, LibraryUncheckedUpdateManyWithoutUserInput>
  }

  export type LibraryMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: LibraryMemberWhereUniqueInput
    update: XOR<LibraryMemberUpdateWithoutUserInput, LibraryMemberUncheckedUpdateWithoutUserInput>
    create: XOR<LibraryMemberCreateWithoutUserInput, LibraryMemberUncheckedCreateWithoutUserInput>
  }

  export type LibraryMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: LibraryMemberWhereUniqueInput
    data: XOR<LibraryMemberUpdateWithoutUserInput, LibraryMemberUncheckedUpdateWithoutUserInput>
  }

  export type LibraryMemberUpdateManyWithWhereWithoutUserInput = {
    where: LibraryMemberScalarWhereInput
    data: XOR<LibraryMemberUpdateManyMutationInput, LibraryMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type LibraryMemberScalarWhereInput = {
    AND?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
    OR?: LibraryMemberScalarWhereInput[]
    NOT?: LibraryMemberScalarWhereInput | LibraryMemberScalarWhereInput[]
    id?: StringFilter<"LibraryMember"> | string
    libraryId?: StringFilter<"LibraryMember"> | string
    userId?: StringFilter<"LibraryMember"> | string
    createdAt?: DateTimeFilter<"LibraryMember"> | Date | string
  }

  export type GoalAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalAssignmentWhereUniqueInput
    update: XOR<GoalAssignmentUpdateWithoutUserInput, GoalAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<GoalAssignmentCreateWithoutUserInput, GoalAssignmentUncheckedCreateWithoutUserInput>
  }

  export type GoalAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalAssignmentWhereUniqueInput
    data: XOR<GoalAssignmentUpdateWithoutUserInput, GoalAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type GoalAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: GoalAssignmentScalarWhereInput
    data: XOR<GoalAssignmentUpdateManyMutationInput, GoalAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalAssignmentScalarWhereInput = {
    AND?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
    OR?: GoalAssignmentScalarWhereInput[]
    NOT?: GoalAssignmentScalarWhereInput | GoalAssignmentScalarWhereInput[]
    id?: StringFilter<"GoalAssignment"> | string
    goalId?: StringFilter<"GoalAssignment"> | string
    userId?: StringFilter<"GoalAssignment"> | string
    assignedAt?: DateTimeFilter<"GoalAssignment"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type ScanUpsertWithWhereUniqueWithoutUserInput = {
    where: ScanWhereUniqueInput
    update: XOR<ScanUpdateWithoutUserInput, ScanUncheckedUpdateWithoutUserInput>
    create: XOR<ScanCreateWithoutUserInput, ScanUncheckedCreateWithoutUserInput>
  }

  export type ScanUpdateWithWhereUniqueWithoutUserInput = {
    where: ScanWhereUniqueInput
    data: XOR<ScanUpdateWithoutUserInput, ScanUncheckedUpdateWithoutUserInput>
  }

  export type ScanUpdateManyWithWhereWithoutUserInput = {
    where: ScanScalarWhereInput
    data: XOR<ScanUpdateManyMutationInput, ScanUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutCreatedByInput, GoalUncheckedUpdateWithoutCreatedByInput>
    create: XOR<GoalCreateWithoutCreatedByInput, GoalUncheckedCreateWithoutCreatedByInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutCreatedByInput, GoalUncheckedUpdateWithoutCreatedByInput>
  }

  export type GoalUpdateManyWithWhereWithoutCreatedByInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type GeneralReportUpsertWithWhereUniqueWithoutSubmittedByInput = {
    where: GeneralReportWhereUniqueInput
    update: XOR<GeneralReportUpdateWithoutSubmittedByInput, GeneralReportUncheckedUpdateWithoutSubmittedByInput>
    create: XOR<GeneralReportCreateWithoutSubmittedByInput, GeneralReportUncheckedCreateWithoutSubmittedByInput>
  }

  export type GeneralReportUpdateWithWhereUniqueWithoutSubmittedByInput = {
    where: GeneralReportWhereUniqueInput
    data: XOR<GeneralReportUpdateWithoutSubmittedByInput, GeneralReportUncheckedUpdateWithoutSubmittedByInput>
  }

  export type GeneralReportUpdateManyWithWhereWithoutSubmittedByInput = {
    where: GeneralReportScalarWhereInput
    data: XOR<GeneralReportUpdateManyMutationInput, GeneralReportUncheckedUpdateManyWithoutSubmittedByInput>
  }

  export type GeneralReportUpsertWithWhereUniqueWithoutSubmittedToInput = {
    where: GeneralReportWhereUniqueInput
    update: XOR<GeneralReportUpdateWithoutSubmittedToInput, GeneralReportUncheckedUpdateWithoutSubmittedToInput>
    create: XOR<GeneralReportCreateWithoutSubmittedToInput, GeneralReportUncheckedCreateWithoutSubmittedToInput>
  }

  export type GeneralReportUpdateWithWhereUniqueWithoutSubmittedToInput = {
    where: GeneralReportWhereUniqueInput
    data: XOR<GeneralReportUpdateWithoutSubmittedToInput, GeneralReportUncheckedUpdateWithoutSubmittedToInput>
  }

  export type GeneralReportUpdateManyWithWhereWithoutSubmittedToInput = {
    where: GeneralReportScalarWhereInput
    data: XOR<GeneralReportUpdateManyMutationInput, GeneralReportUncheckedUpdateManyWithoutSubmittedToInput>
  }

  export type GeneralReportUpsertWithWhereUniqueWithoutRespondedByInput = {
    where: GeneralReportWhereUniqueInput
    update: XOR<GeneralReportUpdateWithoutRespondedByInput, GeneralReportUncheckedUpdateWithoutRespondedByInput>
    create: XOR<GeneralReportCreateWithoutRespondedByInput, GeneralReportUncheckedCreateWithoutRespondedByInput>
  }

  export type GeneralReportUpdateWithWhereUniqueWithoutRespondedByInput = {
    where: GeneralReportWhereUniqueInput
    data: XOR<GeneralReportUpdateWithoutRespondedByInput, GeneralReportUncheckedUpdateWithoutRespondedByInput>
  }

  export type GeneralReportUpdateManyWithWhereWithoutRespondedByInput = {
    where: GeneralReportScalarWhereInput
    data: XOR<GeneralReportUpdateManyMutationInput, GeneralReportUncheckedUpdateManyWithoutRespondedByInput>
  }

  export type GoalReportUpsertWithWhereUniqueWithoutSubmittedByInput = {
    where: GoalReportWhereUniqueInput
    update: XOR<GoalReportUpdateWithoutSubmittedByInput, GoalReportUncheckedUpdateWithoutSubmittedByInput>
    create: XOR<GoalReportCreateWithoutSubmittedByInput, GoalReportUncheckedCreateWithoutSubmittedByInput>
  }

  export type GoalReportUpdateWithWhereUniqueWithoutSubmittedByInput = {
    where: GoalReportWhereUniqueInput
    data: XOR<GoalReportUpdateWithoutSubmittedByInput, GoalReportUncheckedUpdateWithoutSubmittedByInput>
  }

  export type GoalReportUpdateManyWithWhereWithoutSubmittedByInput = {
    where: GoalReportScalarWhereInput
    data: XOR<GoalReportUpdateManyMutationInput, GoalReportUncheckedUpdateManyWithoutSubmittedByInput>
  }

  export type GoalReportScalarWhereInput = {
    AND?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
    OR?: GoalReportScalarWhereInput[]
    NOT?: GoalReportScalarWhereInput | GoalReportScalarWhereInput[]
    id?: StringFilter<"GoalReport"> | string
    title?: StringFilter<"GoalReport"> | string
    description?: StringFilter<"GoalReport"> | string
    goalId?: StringFilter<"GoalReport"> | string
    submittedById?: StringFilter<"GoalReport"> | string
    isCompletion?: BoolFilter<"GoalReport"> | boolean
    status?: StringFilter<"GoalReport"> | string
    createdAt?: DateTimeFilter<"GoalReport"> | Date | string
    updatedAt?: DateTimeFilter<"GoalReport"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutFoldersInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoldersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
  }

  export type SucursalCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutFoldersInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutFoldersInput, SucursalUncheckedCreateWithoutFoldersInput>
  }

  export type FolderCreateWithoutChildrenInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFoldersInput
    sucursal: SucursalCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutChildrenInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
  }

  export type FolderCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFoldersInput
    sucursal: SucursalCreateNestedOneWithoutFoldersInput
    children?: FolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutParentInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderCreateManyParentInputEnvelope = {
    data: FolderCreateManyParentInput | FolderCreateManyParentInput[]
  }

  export type FileCreateWithoutFolderInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutFolderInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutFolderInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileCreateManyFolderInputEnvelope = {
    data: FileCreateManyFolderInput | FileCreateManyFolderInput[]
  }

  export type UserUpsertWithoutFoldersInput = {
    update: XOR<UserUpdateWithoutFoldersInput, UserUncheckedUpdateWithoutFoldersInput>
    create: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoldersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoldersInput, UserUncheckedUpdateWithoutFoldersInput>
  }

  export type UserUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutFoldersInput = {
    update: XOR<SucursalUpdateWithoutFoldersInput, SucursalUncheckedUpdateWithoutFoldersInput>
    create: XOR<SucursalCreateWithoutFoldersInput, SucursalUncheckedCreateWithoutFoldersInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutFoldersInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutFoldersInput, SucursalUncheckedUpdateWithoutFoldersInput>
  }

  export type SucursalUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type FolderUpsertWithoutChildrenInput = {
    update: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutChildrenInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUpsertWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
  }

  export type FolderUpdateManyWithWhereWithoutParentInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutParentInput>
  }

  export type FileUpsertWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileUpdateWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
  }

  export type FileUpdateManyWithWhereWithoutFolderInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFolderInput>
  }

  export type FolderCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFoldersInput
    sucursal: SucursalCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutFilesInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutFilesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type SucursalCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutFilesInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutFilesInput, SucursalUncheckedCreateWithoutFilesInput>
  }

  export type ReportFileCreateWithoutFileInput = {
    id?: string
    report: ReportCreateNestedOneWithoutFilesInput
  }

  export type ReportFileUncheckedCreateWithoutFileInput = {
    id?: string
    reportId: string
  }

  export type ReportFileCreateOrConnectWithoutFileInput = {
    where: ReportFileWhereUniqueInput
    create: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput>
  }

  export type ReportFileCreateManyFileInputEnvelope = {
    data: ReportFileCreateManyFileInput | ReportFileCreateManyFileInput[]
  }

  export type GeneralReportFileCreateWithoutFileInput = {
    id?: string
    generalReport: GeneralReportCreateNestedOneWithoutAttachmentsInput
  }

  export type GeneralReportFileUncheckedCreateWithoutFileInput = {
    id?: string
    generalReportId: string
  }

  export type GeneralReportFileCreateOrConnectWithoutFileInput = {
    where: GeneralReportFileWhereUniqueInput
    create: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput>
  }

  export type GeneralReportFileCreateManyFileInputEnvelope = {
    data: GeneralReportFileCreateManyFileInput | GeneralReportFileCreateManyFileInput[]
  }

  export type GoalReportFileCreateWithoutFileInput = {
    id?: string
    goalReport: GoalReportCreateNestedOneWithoutFilesInput
  }

  export type GoalReportFileUncheckedCreateWithoutFileInput = {
    id?: string
    goalReportId: string
  }

  export type GoalReportFileCreateOrConnectWithoutFileInput = {
    where: GoalReportFileWhereUniqueInput
    create: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput>
  }

  export type GoalReportFileCreateManyFileInputEnvelope = {
    data: GoalReportFileCreateManyFileInput | GoalReportFileCreateManyFileInput[]
  }

  export type FolderUpsertWithoutFilesInput = {
    update: XOR<FolderUpdateWithoutFilesInput, FolderUncheckedUpdateWithoutFilesInput>
    create: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutFilesInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutFilesInput, FolderUncheckedUpdateWithoutFilesInput>
  }

  export type FolderUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutFilesInput = {
    update: XOR<SucursalUpdateWithoutFilesInput, SucursalUncheckedUpdateWithoutFilesInput>
    create: XOR<SucursalCreateWithoutFilesInput, SucursalUncheckedCreateWithoutFilesInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutFilesInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutFilesInput, SucursalUncheckedUpdateWithoutFilesInput>
  }

  export type SucursalUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type ReportFileUpsertWithWhereUniqueWithoutFileInput = {
    where: ReportFileWhereUniqueInput
    update: XOR<ReportFileUpdateWithoutFileInput, ReportFileUncheckedUpdateWithoutFileInput>
    create: XOR<ReportFileCreateWithoutFileInput, ReportFileUncheckedCreateWithoutFileInput>
  }

  export type ReportFileUpdateWithWhereUniqueWithoutFileInput = {
    where: ReportFileWhereUniqueInput
    data: XOR<ReportFileUpdateWithoutFileInput, ReportFileUncheckedUpdateWithoutFileInput>
  }

  export type ReportFileUpdateManyWithWhereWithoutFileInput = {
    where: ReportFileScalarWhereInput
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyWithoutFileInput>
  }

  export type ReportFileScalarWhereInput = {
    AND?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
    OR?: ReportFileScalarWhereInput[]
    NOT?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
    id?: StringFilter<"ReportFile"> | string
    reportId?: StringFilter<"ReportFile"> | string
    fileId?: StringFilter<"ReportFile"> | string
  }

  export type GeneralReportFileUpsertWithWhereUniqueWithoutFileInput = {
    where: GeneralReportFileWhereUniqueInput
    update: XOR<GeneralReportFileUpdateWithoutFileInput, GeneralReportFileUncheckedUpdateWithoutFileInput>
    create: XOR<GeneralReportFileCreateWithoutFileInput, GeneralReportFileUncheckedCreateWithoutFileInput>
  }

  export type GeneralReportFileUpdateWithWhereUniqueWithoutFileInput = {
    where: GeneralReportFileWhereUniqueInput
    data: XOR<GeneralReportFileUpdateWithoutFileInput, GeneralReportFileUncheckedUpdateWithoutFileInput>
  }

  export type GeneralReportFileUpdateManyWithWhereWithoutFileInput = {
    where: GeneralReportFileScalarWhereInput
    data: XOR<GeneralReportFileUpdateManyMutationInput, GeneralReportFileUncheckedUpdateManyWithoutFileInput>
  }

  export type GeneralReportFileScalarWhereInput = {
    AND?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
    OR?: GeneralReportFileScalarWhereInput[]
    NOT?: GeneralReportFileScalarWhereInput | GeneralReportFileScalarWhereInput[]
    id?: StringFilter<"GeneralReportFile"> | string
    generalReportId?: StringFilter<"GeneralReportFile"> | string
    fileId?: StringFilter<"GeneralReportFile"> | string
  }

  export type GoalReportFileUpsertWithWhereUniqueWithoutFileInput = {
    where: GoalReportFileWhereUniqueInput
    update: XOR<GoalReportFileUpdateWithoutFileInput, GoalReportFileUncheckedUpdateWithoutFileInput>
    create: XOR<GoalReportFileCreateWithoutFileInput, GoalReportFileUncheckedCreateWithoutFileInput>
  }

  export type GoalReportFileUpdateWithWhereUniqueWithoutFileInput = {
    where: GoalReportFileWhereUniqueInput
    data: XOR<GoalReportFileUpdateWithoutFileInput, GoalReportFileUncheckedUpdateWithoutFileInput>
  }

  export type GoalReportFileUpdateManyWithWhereWithoutFileInput = {
    where: GoalReportFileScalarWhereInput
    data: XOR<GoalReportFileUpdateManyMutationInput, GoalReportFileUncheckedUpdateManyWithoutFileInput>
  }

  export type GoalReportFileScalarWhereInput = {
    AND?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
    OR?: GoalReportFileScalarWhereInput[]
    NOT?: GoalReportFileScalarWhereInput | GoalReportFileScalarWhereInput[]
    id?: StringFilter<"GoalReportFile"> | string
    goalReportId?: StringFilter<"GoalReportFile"> | string
    fileId?: StringFilter<"GoalReportFile"> | string
  }

  export type UserCreateWithoutLibrariesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLibrariesInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLibrariesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLibrariesInput, UserUncheckedCreateWithoutLibrariesInput>
  }

  export type SucursalCreateWithoutLibrariesInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutLibrariesInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutLibrariesInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutLibrariesInput, SucursalUncheckedCreateWithoutLibrariesInput>
  }

  export type LibraryMemberCreateWithoutLibraryInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLibraryMembersInput
  }

  export type LibraryMemberUncheckedCreateWithoutLibraryInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LibraryMemberCreateOrConnectWithoutLibraryInput = {
    where: LibraryMemberWhereUniqueInput
    create: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput>
  }

  export type LibraryMemberCreateManyLibraryInputEnvelope = {
    data: LibraryMemberCreateManyLibraryInput | LibraryMemberCreateManyLibraryInput[]
  }

  export type UserUpsertWithoutLibrariesInput = {
    update: XOR<UserUpdateWithoutLibrariesInput, UserUncheckedUpdateWithoutLibrariesInput>
    create: XOR<UserCreateWithoutLibrariesInput, UserUncheckedCreateWithoutLibrariesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLibrariesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLibrariesInput, UserUncheckedUpdateWithoutLibrariesInput>
  }

  export type UserUpdateWithoutLibrariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLibrariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutLibrariesInput = {
    update: XOR<SucursalUpdateWithoutLibrariesInput, SucursalUncheckedUpdateWithoutLibrariesInput>
    create: XOR<SucursalCreateWithoutLibrariesInput, SucursalUncheckedCreateWithoutLibrariesInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutLibrariesInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutLibrariesInput, SucursalUncheckedUpdateWithoutLibrariesInput>
  }

  export type SucursalUpdateWithoutLibrariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutLibrariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type LibraryMemberUpsertWithWhereUniqueWithoutLibraryInput = {
    where: LibraryMemberWhereUniqueInput
    update: XOR<LibraryMemberUpdateWithoutLibraryInput, LibraryMemberUncheckedUpdateWithoutLibraryInput>
    create: XOR<LibraryMemberCreateWithoutLibraryInput, LibraryMemberUncheckedCreateWithoutLibraryInput>
  }

  export type LibraryMemberUpdateWithWhereUniqueWithoutLibraryInput = {
    where: LibraryMemberWhereUniqueInput
    data: XOR<LibraryMemberUpdateWithoutLibraryInput, LibraryMemberUncheckedUpdateWithoutLibraryInput>
  }

  export type LibraryMemberUpdateManyWithWhereWithoutLibraryInput = {
    where: LibraryMemberScalarWhereInput
    data: XOR<LibraryMemberUpdateManyMutationInput, LibraryMemberUncheckedUpdateManyWithoutLibraryInput>
  }

  export type LibraryCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLibrariesInput
    sucursal: SucursalCreateNestedOneWithoutLibrariesInput
  }

  export type LibraryUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCreateOrConnectWithoutMembersInput = {
    where: LibraryWhereUniqueInput
    create: XOR<LibraryCreateWithoutMembersInput, LibraryUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutLibraryMembersInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLibraryMembersInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLibraryMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLibraryMembersInput, UserUncheckedCreateWithoutLibraryMembersInput>
  }

  export type LibraryUpsertWithoutMembersInput = {
    update: XOR<LibraryUpdateWithoutMembersInput, LibraryUncheckedUpdateWithoutMembersInput>
    create: XOR<LibraryCreateWithoutMembersInput, LibraryUncheckedCreateWithoutMembersInput>
    where?: LibraryWhereInput
  }

  export type LibraryUpdateToOneWithWhereWithoutMembersInput = {
    where?: LibraryWhereInput
    data: XOR<LibraryUpdateWithoutMembersInput, LibraryUncheckedUpdateWithoutMembersInput>
  }

  export type LibraryUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLibrariesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutLibrariesNestedInput
  }

  export type LibraryUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutLibraryMembersInput = {
    update: XOR<UserUpdateWithoutLibraryMembersInput, UserUncheckedUpdateWithoutLibraryMembersInput>
    create: XOR<UserCreateWithoutLibraryMembersInput, UserUncheckedCreateWithoutLibraryMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLibraryMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLibraryMembersInput, UserUncheckedUpdateWithoutLibraryMembersInput>
  }

  export type UserUpdateWithoutLibraryMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLibraryMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentCreateWithoutGoalsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sucursal: SucursalCreateNestedOneWithoutDepartmentsInput
    supervisor?: UserCreateNestedOneWithoutSupervisedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    supervisors?: UserCreateNestedManyWithoutDepartmentSupervisorsInput
  }

  export type DepartmentUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    supervisors?: UserUncheckedCreateNestedManyWithoutDepartmentSupervisorsInput
  }

  export type DepartmentCreateOrConnectWithoutGoalsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutGoalsInput, DepartmentUncheckedCreateWithoutGoalsInput>
  }

  export type UserCreateWithoutCreatedGoalsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedGoalsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedGoalsInput, UserUncheckedCreateWithoutCreatedGoalsInput>
  }

  export type SucursalCreateWithoutGoalsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutGoalsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutGoalsInput, SucursalUncheckedCreateWithoutGoalsInput>
  }

  export type GoalAssignmentCreateWithoutGoalInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalAssignmentUncheckedCreateWithoutGoalInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type GoalAssignmentCreateOrConnectWithoutGoalInput = {
    where: GoalAssignmentWhereUniqueInput
    create: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput>
  }

  export type GoalAssignmentCreateManyGoalInputEnvelope = {
    data: GoalAssignmentCreateManyGoalInput | GoalAssignmentCreateManyGoalInput[]
  }

  export type GoalReportCreateWithoutGoalInput = {
    id?: string
    title: string
    description: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutGoalReportsInput
    files?: GoalReportFileCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportUncheckedCreateWithoutGoalInput = {
    id?: string
    title: string
    description: string
    submittedById: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: GoalReportFileUncheckedCreateNestedManyWithoutGoalReportInput
  }

  export type GoalReportCreateOrConnectWithoutGoalInput = {
    where: GoalReportWhereUniqueInput
    create: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput>
  }

  export type GoalReportCreateManyGoalInputEnvelope = {
    data: GoalReportCreateManyGoalInput | GoalReportCreateManyGoalInput[]
  }

  export type ReportCreateWithoutGoalInput = {
    id?: string
    title: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
    sucursal: SucursalCreateNestedOneWithoutReportsInput
    files?: ReportFileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutGoalInput = {
    id?: string
    title: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: ReportFileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutGoalInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput>
  }

  export type ReportCreateManyGoalInputEnvelope = {
    data: ReportCreateManyGoalInput | ReportCreateManyGoalInput[]
  }

  export type DepartmentUpsertWithoutGoalsInput = {
    update: XOR<DepartmentUpdateWithoutGoalsInput, DepartmentUncheckedUpdateWithoutGoalsInput>
    create: XOR<DepartmentCreateWithoutGoalsInput, DepartmentUncheckedCreateWithoutGoalsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutGoalsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutGoalsInput, DepartmentUncheckedUpdateWithoutGoalsInput>
  }

  export type DepartmentUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutDepartmentsNestedInput
    supervisor?: UserUpdateOneWithoutSupervisedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUpdateManyWithoutDepartmentSupervisorsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput
  }

  export type UserUpsertWithoutCreatedGoalsInput = {
    update: XOR<UserUpdateWithoutCreatedGoalsInput, UserUncheckedUpdateWithoutCreatedGoalsInput>
    create: XOR<UserCreateWithoutCreatedGoalsInput, UserUncheckedCreateWithoutCreatedGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedGoalsInput, UserUncheckedUpdateWithoutCreatedGoalsInput>
  }

  export type UserUpdateWithoutCreatedGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutGoalsInput = {
    update: XOR<SucursalUpdateWithoutGoalsInput, SucursalUncheckedUpdateWithoutGoalsInput>
    create: XOR<SucursalCreateWithoutGoalsInput, SucursalUncheckedCreateWithoutGoalsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutGoalsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutGoalsInput, SucursalUncheckedUpdateWithoutGoalsInput>
  }

  export type SucursalUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type GoalAssignmentUpsertWithWhereUniqueWithoutGoalInput = {
    where: GoalAssignmentWhereUniqueInput
    update: XOR<GoalAssignmentUpdateWithoutGoalInput, GoalAssignmentUncheckedUpdateWithoutGoalInput>
    create: XOR<GoalAssignmentCreateWithoutGoalInput, GoalAssignmentUncheckedCreateWithoutGoalInput>
  }

  export type GoalAssignmentUpdateWithWhereUniqueWithoutGoalInput = {
    where: GoalAssignmentWhereUniqueInput
    data: XOR<GoalAssignmentUpdateWithoutGoalInput, GoalAssignmentUncheckedUpdateWithoutGoalInput>
  }

  export type GoalAssignmentUpdateManyWithWhereWithoutGoalInput = {
    where: GoalAssignmentScalarWhereInput
    data: XOR<GoalAssignmentUpdateManyMutationInput, GoalAssignmentUncheckedUpdateManyWithoutGoalInput>
  }

  export type GoalReportUpsertWithWhereUniqueWithoutGoalInput = {
    where: GoalReportWhereUniqueInput
    update: XOR<GoalReportUpdateWithoutGoalInput, GoalReportUncheckedUpdateWithoutGoalInput>
    create: XOR<GoalReportCreateWithoutGoalInput, GoalReportUncheckedCreateWithoutGoalInput>
  }

  export type GoalReportUpdateWithWhereUniqueWithoutGoalInput = {
    where: GoalReportWhereUniqueInput
    data: XOR<GoalReportUpdateWithoutGoalInput, GoalReportUncheckedUpdateWithoutGoalInput>
  }

  export type GoalReportUpdateManyWithWhereWithoutGoalInput = {
    where: GoalReportScalarWhereInput
    data: XOR<GoalReportUpdateManyMutationInput, GoalReportUncheckedUpdateManyWithoutGoalInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutGoalInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutGoalInput, ReportUncheckedUpdateWithoutGoalInput>
    create: XOR<ReportCreateWithoutGoalInput, ReportUncheckedCreateWithoutGoalInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutGoalInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutGoalInput, ReportUncheckedUpdateWithoutGoalInput>
  }

  export type ReportUpdateManyWithWhereWithoutGoalInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutGoalInput>
  }

  export type GoalCreateWithoutReportsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutReportsInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutReportsInput, GoalUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutGoalReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalReportsInput, UserUncheckedCreateWithoutGoalReportsInput>
  }

  export type GoalReportFileCreateWithoutGoalReportInput = {
    id?: string
    file: FileCreateNestedOneWithoutGoalReportsInput
  }

  export type GoalReportFileUncheckedCreateWithoutGoalReportInput = {
    id?: string
    fileId: string
  }

  export type GoalReportFileCreateOrConnectWithoutGoalReportInput = {
    where: GoalReportFileWhereUniqueInput
    create: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput>
  }

  export type GoalReportFileCreateManyGoalReportInputEnvelope = {
    data: GoalReportFileCreateManyGoalReportInput | GoalReportFileCreateManyGoalReportInput[]
  }

  export type GoalUpsertWithoutReportsInput = {
    update: XOR<GoalUpdateWithoutReportsInput, GoalUncheckedUpdateWithoutReportsInput>
    create: XOR<GoalCreateWithoutReportsInput, GoalUncheckedCreateWithoutReportsInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutReportsInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutReportsInput, GoalUncheckedUpdateWithoutReportsInput>
  }

  export type GoalUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type UserUpsertWithoutGoalReportsInput = {
    update: XOR<UserUpdateWithoutGoalReportsInput, UserUncheckedUpdateWithoutGoalReportsInput>
    create: XOR<UserCreateWithoutGoalReportsInput, UserUncheckedCreateWithoutGoalReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalReportsInput, UserUncheckedUpdateWithoutGoalReportsInput>
  }

  export type UserUpdateWithoutGoalReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalReportFileUpsertWithWhereUniqueWithoutGoalReportInput = {
    where: GoalReportFileWhereUniqueInput
    update: XOR<GoalReportFileUpdateWithoutGoalReportInput, GoalReportFileUncheckedUpdateWithoutGoalReportInput>
    create: XOR<GoalReportFileCreateWithoutGoalReportInput, GoalReportFileUncheckedCreateWithoutGoalReportInput>
  }

  export type GoalReportFileUpdateWithWhereUniqueWithoutGoalReportInput = {
    where: GoalReportFileWhereUniqueInput
    data: XOR<GoalReportFileUpdateWithoutGoalReportInput, GoalReportFileUncheckedUpdateWithoutGoalReportInput>
  }

  export type GoalReportFileUpdateManyWithWhereWithoutGoalReportInput = {
    where: GoalReportFileScalarWhereInput
    data: XOR<GoalReportFileUpdateManyMutationInput, GoalReportFileUncheckedUpdateManyWithoutGoalReportInput>
  }

  export type GoalReportCreateWithoutFilesInput = {
    id?: string
    title: string
    description: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    goal: GoalCreateNestedOneWithoutReportsInput
    submittedBy: UserCreateNestedOneWithoutGoalReportsInput
  }

  export type GoalReportUncheckedCreateWithoutFilesInput = {
    id?: string
    title: string
    description: string
    goalId: string
    submittedById: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalReportCreateOrConnectWithoutFilesInput = {
    where: GoalReportWhereUniqueInput
    create: XOR<GoalReportCreateWithoutFilesInput, GoalReportUncheckedCreateWithoutFilesInput>
  }

  export type FileCreateWithoutGoalReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    user: UserCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutGoalReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutGoalReportsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutGoalReportsInput, FileUncheckedCreateWithoutGoalReportsInput>
  }

  export type GoalReportUpsertWithoutFilesInput = {
    update: XOR<GoalReportUpdateWithoutFilesInput, GoalReportUncheckedUpdateWithoutFilesInput>
    create: XOR<GoalReportCreateWithoutFilesInput, GoalReportUncheckedCreateWithoutFilesInput>
    where?: GoalReportWhereInput
  }

  export type GoalReportUpdateToOneWithWhereWithoutFilesInput = {
    where?: GoalReportWhereInput
    data: XOR<GoalReportUpdateWithoutFilesInput, GoalReportUncheckedUpdateWithoutFilesInput>
  }

  export type GoalReportUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutReportsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutGoalReportsNestedInput
  }

  export type GoalReportUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpsertWithoutGoalReportsInput = {
    update: XOR<FileUpdateWithoutGoalReportsInput, FileUncheckedUpdateWithoutGoalReportsInput>
    create: XOR<FileCreateWithoutGoalReportsInput, FileUncheckedCreateWithoutGoalReportsInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutGoalReportsInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutGoalReportsInput, FileUncheckedUpdateWithoutGoalReportsInput>
  }

  export type FileUpdateWithoutGoalReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutGoalReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type GoalCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
    generalReports?: ReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
    generalReports?: ReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutAssignmentsInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutAssignmentsInput, GoalUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutGoalsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
  }

  export type GoalUpsertWithoutAssignmentsInput = {
    update: XOR<GoalUpdateWithoutAssignmentsInput, GoalUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<GoalCreateWithoutAssignmentsInput, GoalUncheckedCreateWithoutAssignmentsInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutAssignmentsInput, GoalUncheckedUpdateWithoutAssignmentsInput>
  }

  export type GoalUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type UserUpsertWithoutGoalsInput = {
    update: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutGoalsInput
    createdBy: UserCreateNestedOneWithoutCreatedGoalsInput
    sucursal: SucursalCreateNestedOneWithoutGoalsInput
    assignments?: GoalAssignmentCreateNestedManyWithoutGoalInput
    reports?: GoalReportCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: GoalAssignmentUncheckedCreateNestedManyWithoutGoalInput
    reports?: GoalReportUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutGeneralReportsInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutGeneralReportsInput, GoalUncheckedCreateWithoutGeneralReportsInput>
  }

  export type UserCreateWithoutReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type SucursalCreateWithoutReportsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutReportsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutReportsInput, SucursalUncheckedCreateWithoutReportsInput>
  }

  export type ReportFileCreateWithoutReportInput = {
    id?: string
    file: FileCreateNestedOneWithoutReportsInput
  }

  export type ReportFileUncheckedCreateWithoutReportInput = {
    id?: string
    fileId: string
  }

  export type ReportFileCreateOrConnectWithoutReportInput = {
    where: ReportFileWhereUniqueInput
    create: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput>
  }

  export type ReportFileCreateManyReportInputEnvelope = {
    data: ReportFileCreateManyReportInput | ReportFileCreateManyReportInput[]
  }

  export type GoalUpsertWithoutGeneralReportsInput = {
    update: XOR<GoalUpdateWithoutGeneralReportsInput, GoalUncheckedUpdateWithoutGeneralReportsInput>
    create: XOR<GoalCreateWithoutGeneralReportsInput, GoalUncheckedCreateWithoutGeneralReportsInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutGeneralReportsInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutGeneralReportsInput, GoalUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type GoalUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
  }

  export type SucursalUpsertWithoutReportsInput = {
    update: XOR<SucursalUpdateWithoutReportsInput, SucursalUncheckedUpdateWithoutReportsInput>
    create: XOR<SucursalCreateWithoutReportsInput, SucursalUncheckedCreateWithoutReportsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutReportsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutReportsInput, SucursalUncheckedUpdateWithoutReportsInput>
  }

  export type SucursalUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type ReportFileUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportFileWhereUniqueInput
    update: XOR<ReportFileUpdateWithoutReportInput, ReportFileUncheckedUpdateWithoutReportInput>
    create: XOR<ReportFileCreateWithoutReportInput, ReportFileUncheckedCreateWithoutReportInput>
  }

  export type ReportFileUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportFileWhereUniqueInput
    data: XOR<ReportFileUpdateWithoutReportInput, ReportFileUncheckedUpdateWithoutReportInput>
  }

  export type ReportFileUpdateManyWithWhereWithoutReportInput = {
    where: ReportFileScalarWhereInput
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyWithoutReportInput>
  }

  export type UserCreateWithoutSubmittedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubmittedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubmittedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
  }

  export type UserCreateWithoutReceivedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedReportsInput, UserUncheckedCreateWithoutReceivedReportsInput>
  }

  export type UserCreateWithoutRespondedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRespondedReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRespondedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRespondedReportsInput, UserUncheckedCreateWithoutRespondedReportsInput>
  }

  export type SucursalCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutGeneralReportsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutGeneralReportsInput, SucursalUncheckedCreateWithoutGeneralReportsInput>
  }

  export type GeneralReportFileCreateWithoutGeneralReportInput = {
    id?: string
    file: FileCreateNestedOneWithoutGeneralReportsInput
  }

  export type GeneralReportFileUncheckedCreateWithoutGeneralReportInput = {
    id?: string
    fileId: string
  }

  export type GeneralReportFileCreateOrConnectWithoutGeneralReportInput = {
    where: GeneralReportFileWhereUniqueInput
    create: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput>
  }

  export type GeneralReportFileCreateManyGeneralReportInputEnvelope = {
    data: GeneralReportFileCreateManyGeneralReportInput | GeneralReportFileCreateManyGeneralReportInput[]
  }

  export type UserUpsertWithoutSubmittedReportsInput = {
    update: XOR<UserUpdateWithoutSubmittedReportsInput, UserUncheckedUpdateWithoutSubmittedReportsInput>
    create: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmittedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmittedReportsInput, UserUncheckedUpdateWithoutSubmittedReportsInput>
  }

  export type UserUpdateWithoutSubmittedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmittedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedReportsInput = {
    update: XOR<UserUpdateWithoutReceivedReportsInput, UserUncheckedUpdateWithoutReceivedReportsInput>
    create: XOR<UserCreateWithoutReceivedReportsInput, UserUncheckedCreateWithoutReceivedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedReportsInput, UserUncheckedUpdateWithoutReceivedReportsInput>
  }

  export type UserUpdateWithoutReceivedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutRespondedReportsInput = {
    update: XOR<UserUpdateWithoutRespondedReportsInput, UserUncheckedUpdateWithoutRespondedReportsInput>
    create: XOR<UserCreateWithoutRespondedReportsInput, UserUncheckedCreateWithoutRespondedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRespondedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRespondedReportsInput, UserUncheckedUpdateWithoutRespondedReportsInput>
  }

  export type UserUpdateWithoutRespondedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRespondedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutGeneralReportsInput = {
    update: XOR<SucursalUpdateWithoutGeneralReportsInput, SucursalUncheckedUpdateWithoutGeneralReportsInput>
    create: XOR<SucursalCreateWithoutGeneralReportsInput, SucursalUncheckedCreateWithoutGeneralReportsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutGeneralReportsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutGeneralReportsInput, SucursalUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type SucursalUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type GeneralReportFileUpsertWithWhereUniqueWithoutGeneralReportInput = {
    where: GeneralReportFileWhereUniqueInput
    update: XOR<GeneralReportFileUpdateWithoutGeneralReportInput, GeneralReportFileUncheckedUpdateWithoutGeneralReportInput>
    create: XOR<GeneralReportFileCreateWithoutGeneralReportInput, GeneralReportFileUncheckedCreateWithoutGeneralReportInput>
  }

  export type GeneralReportFileUpdateWithWhereUniqueWithoutGeneralReportInput = {
    where: GeneralReportFileWhereUniqueInput
    data: XOR<GeneralReportFileUpdateWithoutGeneralReportInput, GeneralReportFileUncheckedUpdateWithoutGeneralReportInput>
  }

  export type GeneralReportFileUpdateManyWithWhereWithoutGeneralReportInput = {
    where: GeneralReportFileScalarWhereInput
    data: XOR<GeneralReportFileUpdateManyMutationInput, GeneralReportFileUncheckedUpdateManyWithoutGeneralReportInput>
  }

  export type GeneralReportCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submittedBy: UserCreateNestedOneWithoutSubmittedReportsInput
    submittedTo?: UserCreateNestedOneWithoutReceivedReportsInput
    respondedBy?: UserCreateNestedOneWithoutRespondedReportsInput
    sucursal: SucursalCreateNestedOneWithoutGeneralReportsInput
  }

  export type GeneralReportUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportCreateOrConnectWithoutAttachmentsInput = {
    where: GeneralReportWhereUniqueInput
    create: XOR<GeneralReportCreateWithoutAttachmentsInput, GeneralReportUncheckedCreateWithoutAttachmentsInput>
  }

  export type FileCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    user: UserCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    reports?: ReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutGeneralReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutGeneralReportsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutGeneralReportsInput, FileUncheckedCreateWithoutGeneralReportsInput>
  }

  export type GeneralReportUpsertWithoutAttachmentsInput = {
    update: XOR<GeneralReportUpdateWithoutAttachmentsInput, GeneralReportUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<GeneralReportCreateWithoutAttachmentsInput, GeneralReportUncheckedCreateWithoutAttachmentsInput>
    where?: GeneralReportWhereInput
  }

  export type GeneralReportUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: GeneralReportWhereInput
    data: XOR<GeneralReportUpdateWithoutAttachmentsInput, GeneralReportUncheckedUpdateWithoutAttachmentsInput>
  }

  export type GeneralReportUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
    submittedTo?: UserUpdateOneWithoutReceivedReportsNestedInput
    respondedBy?: UserUpdateOneWithoutRespondedReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput
  }

  export type GeneralReportUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpsertWithoutGeneralReportsInput = {
    update: XOR<FileUpdateWithoutGeneralReportsInput, FileUncheckedUpdateWithoutGeneralReportsInput>
    create: XOR<FileCreateWithoutGeneralReportsInput, FileUncheckedCreateWithoutGeneralReportsInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutGeneralReportsInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutGeneralReportsInput, FileUncheckedUpdateWithoutGeneralReportsInput>
  }

  export type FileUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutGeneralReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type ReportCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: GoalCreateNestedOneWithoutGeneralReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    sucursal: SucursalCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutFilesInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
  }

  export type FileCreateWithoutReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutFilesInput
    user: UserCreateNestedOneWithoutFilesInput
    sucursal: SucursalCreateNestedOneWithoutFilesInput
    generalReports?: GeneralReportFileCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    generalReports?: GeneralReportFileUncheckedCreateNestedManyWithoutFileInput
    goalReports?: GoalReportFileUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutReportsInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutReportsInput, FileUncheckedCreateWithoutReportsInput>
  }

  export type ReportUpsertWithoutFilesInput = {
    update: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutFilesInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type ReportUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneWithoutGeneralReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpsertWithoutReportsInput = {
    update: XOR<FileUpdateWithoutReportsInput, FileUncheckedUpdateWithoutReportsInput>
    create: XOR<FileCreateWithoutReportsInput, FileUncheckedCreateWithoutReportsInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutReportsInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutReportsInput, FileUncheckedUpdateWithoutReportsInput>
  }

  export type FileUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type UserCreateWithoutScansInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScansInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScansInput, UserUncheckedCreateWithoutScansInput>
  }

  export type SucursalCreateWithoutScansInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutScansInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutScansInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutScansInput, SucursalUncheckedCreateWithoutScansInput>
  }

  export type UserUpsertWithoutScansInput = {
    update: XOR<UserUpdateWithoutScansInput, UserUncheckedUpdateWithoutScansInput>
    create: XOR<UserCreateWithoutScansInput, UserUncheckedCreateWithoutScansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScansInput, UserUncheckedUpdateWithoutScansInput>
  }

  export type UserUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutScansInput = {
    update: XOR<SucursalUpdateWithoutScansInput, SucursalUncheckedUpdateWithoutScansInput>
    create: XOR<SucursalCreateWithoutScansInput, SucursalUncheckedCreateWithoutScansInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutScansInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutScansInput, SucursalUncheckedUpdateWithoutScansInput>
  }

  export type SucursalUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    sucursal: SucursalCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    supervisor?: UserCreateNestedOneWithoutSubordinatesInput
    subordinates?: UserCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentCreateNestedManyWithoutSupervisorsInput
    folders?: FolderCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    libraries?: LibraryCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentCreateNestedManyWithoutUserInput
    scans?: ScanCreateNestedManyWithoutUserInput
    createdGoals?: GoalCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportCreateNestedManyWithoutSubmittedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    subordinates?: UserUncheckedCreateNestedManyWithoutSupervisorInput
    supervisedDepartments?: DepartmentUncheckedCreateNestedManyWithoutSupervisorInput
    departmentSupervisors?: DepartmentUncheckedCreateNestedManyWithoutSupervisorsInput
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutUserInput
    libraryMembers?: LibraryMemberUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalAssignmentUncheckedCreateNestedManyWithoutUserInput
    scans?: ScanUncheckedCreateNestedManyWithoutUserInput
    createdGoals?: GoalUncheckedCreateNestedManyWithoutCreatedByInput
    submittedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedByInput
    receivedReports?: GeneralReportUncheckedCreateNestedManyWithoutSubmittedToInput
    respondedReports?: GeneralReportUncheckedCreateNestedManyWithoutRespondedByInput
    goalReports?: GoalReportUncheckedCreateNestedManyWithoutSubmittedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type SucursalCreateWithoutNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    errorLogs?: ErrorLogUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutNotificationsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutNotificationsInput, SucursalUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SucursalUpsertWithoutNotificationsInput = {
    update: XOR<SucursalUpdateWithoutNotificationsInput, SucursalUncheckedUpdateWithoutNotificationsInput>
    create: XOR<SucursalCreateWithoutNotificationsInput, SucursalUncheckedCreateWithoutNotificationsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutNotificationsInput, SucursalUncheckedUpdateWithoutNotificationsInput>
  }

  export type SucursalUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    errorLogs?: ErrorLogUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalCreateWithoutErrorLogsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSucursalInput
    departments?: DepartmentCreateNestedManyWithoutSucursalInput
    libraries?: LibraryCreateNestedManyWithoutSucursalInput
    goals?: GoalCreateNestedManyWithoutSucursalInput
    reports?: ReportCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportCreateNestedManyWithoutSucursalInput
    folders?: FolderCreateNestedManyWithoutSucursalInput
    files?: FileCreateNestedManyWithoutSucursalInput
    notifications?: NotificationCreateNestedManyWithoutSucursalInput
    scans?: ScanCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalUncheckedCreateWithoutErrorLogsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    serverUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSucursalInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutSucursalInput
    libraries?: LibraryUncheckedCreateNestedManyWithoutSucursalInput
    goals?: GoalUncheckedCreateNestedManyWithoutSucursalInput
    reports?: ReportUncheckedCreateNestedManyWithoutSucursalInput
    generalReports?: GeneralReportUncheckedCreateNestedManyWithoutSucursalInput
    folders?: FolderUncheckedCreateNestedManyWithoutSucursalInput
    files?: FileUncheckedCreateNestedManyWithoutSucursalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutSucursalInput
    scans?: ScanUncheckedCreateNestedManyWithoutSucursalInput
    sourceConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutSourceSucursalInput
    targetConnections?: SucursalConnectionUncheckedCreateNestedManyWithoutTargetSucursalInput
  }

  export type SucursalCreateOrConnectWithoutErrorLogsInput = {
    where: SucursalWhereUniqueInput
    create: XOR<SucursalCreateWithoutErrorLogsInput, SucursalUncheckedCreateWithoutErrorLogsInput>
  }

  export type SucursalUpsertWithoutErrorLogsInput = {
    update: XOR<SucursalUpdateWithoutErrorLogsInput, SucursalUncheckedUpdateWithoutErrorLogsInput>
    create: XOR<SucursalCreateWithoutErrorLogsInput, SucursalUncheckedCreateWithoutErrorLogsInput>
    where?: SucursalWhereInput
  }

  export type SucursalUpdateToOneWithWhereWithoutErrorLogsInput = {
    where?: SucursalWhereInput
    data: XOR<SucursalUpdateWithoutErrorLogsInput, SucursalUncheckedUpdateWithoutErrorLogsInput>
  }

  export type SucursalUpdateWithoutErrorLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUpdateManyWithoutSucursalNestedInput
    goals?: GoalUpdateManyWithoutSucursalNestedInput
    reports?: ReportUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUpdateManyWithoutSucursalNestedInput
    folders?: FolderUpdateManyWithoutSucursalNestedInput
    files?: FileUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUpdateManyWithoutSucursalNestedInput
    scans?: ScanUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUpdateManyWithoutTargetSucursalNestedInput
  }

  export type SucursalUncheckedUpdateWithoutErrorLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    serverUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSucursalNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutSucursalNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutSucursalNestedInput
    goals?: GoalUncheckedUpdateManyWithoutSucursalNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSucursalNestedInput
    generalReports?: GeneralReportUncheckedUpdateManyWithoutSucursalNestedInput
    folders?: FolderUncheckedUpdateManyWithoutSucursalNestedInput
    files?: FileUncheckedUpdateManyWithoutSucursalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutSucursalNestedInput
    scans?: ScanUncheckedUpdateManyWithoutSucursalNestedInput
    sourceConnections?: SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalNestedInput
    targetConnections?: SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalNestedInput
  }

  export type UserCreateManySucursalInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    departmentId?: string | null
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type DepartmentCreateManySucursalInput = {
    id?: string
    name: string
    description?: string | null
    supervisorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCreateManySucursalInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalCreateManySucursalInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManySucursalInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportCreateManySucursalInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderCreateManySucursalInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManySucursalInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManySucursalInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    userId: string
    createdAt?: Date | string
  }

  export type ErrorLogCreateManySucursalInput = {
    id?: string
    errorType: string
    description: string
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type ScanCreateManySucursalInput = {
    id?: string
    title: string
    userId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SucursalConnectionCreateManySourceSucursalInput = {
    id?: string
    targetSucursalId: string
    createdAt?: Date | string
  }

  export type SucursalConnectionCreateManyTargetSucursalInput = {
    id?: string
    sourceSucursalId: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supervisor?: UserUpdateOneWithoutSupervisedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLibrariesNestedInput
    members?: LibraryMemberUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: LibraryMemberUncheckedUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneWithoutGeneralReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    files?: ReportFileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: ReportFileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
    submittedTo?: UserUpdateOneWithoutReceivedReportsNestedInput
    respondedBy?: UserUpdateOneWithoutRespondedReportsNestedInput
    attachments?: GeneralReportFileUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ErrorLogUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScansNestedInput
  }

  export type ScanUncheckedUpdateWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanUncheckedUpdateManyWithoutSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionUpdateWithoutSourceSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetSucursal?: SucursalUpdateOneRequiredWithoutTargetConnectionsNestedInput
  }

  export type SucursalConnectionUncheckedUpdateWithoutSourceSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionUncheckedUpdateManyWithoutSourceSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionUpdateWithoutTargetSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceSucursal?: SucursalUpdateOneRequiredWithoutSourceConnectionsNestedInput
  }

  export type SucursalConnectionUncheckedUpdateWithoutTargetSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SucursalConnectionUncheckedUpdateManyWithoutTargetSucursalInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceSucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    supervisorId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type GoalCreateManyDepartmentInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    createdById: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutDepartmentSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    supervisor?: UserUpdateOneWithoutSubordinatesNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GoalUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdById?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManySupervisorInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    status?: string
    profilePicture?: string | null
    sucursalId: string
    departmentId?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type DepartmentCreateManySupervisorInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    parentId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyUserInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    folderId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryMemberCreateManyUserInput = {
    id?: string
    libraryId: string
    createdAt?: Date | string
  }

  export type GoalAssignmentCreateManyUserInput = {
    id?: string
    goalId: string
    assignedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    description: string
    isRead?: boolean
    sucursalId: string
    createdAt?: Date | string
  }

  export type ScanCreateManyUserInput = {
    id?: string
    title: string
    sucursalId: string
    images: string
    pdfUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    startDate?: Date | string
    endDate?: Date | string
    status?: string
    priority?: string
    progress?: number
    departmentId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportCreateManySubmittedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedToId?: string | null
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportCreateManySubmittedToInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    respondedById?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralReportCreateManyRespondedByInput = {
    id?: string
    title: string
    description: string
    type: string
    status?: string
    submittedById: string
    submittedToId?: string | null
    response?: string | null
    submittedAt?: Date | string
    respondedAt?: Date | string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalReportCreateManySubmittedByInput = {
    id?: string
    title: string
    description: string
    goalId: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    goalId?: string | null
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursal?: SucursalUpdateOneRequiredWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    subordinates?: UserUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    libraries?: LibraryUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scans?: ScanUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subordinates?: UserUncheckedUpdateManyWithoutSupervisorNestedInput
    supervisedDepartments?: DepartmentUncheckedUpdateManyWithoutSupervisorNestedInput
    departmentSupervisors?: DepartmentUncheckedUpdateManyWithoutSupervisorsNestedInput
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    libraries?: LibraryUncheckedUpdateManyWithoutUserNestedInput
    libraryMembers?: LibraryMemberUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scans?: ScanUncheckedUpdateManyWithoutUserNestedInput
    createdGoals?: GoalUncheckedUpdateManyWithoutCreatedByNestedInput
    submittedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    receivedReports?: GeneralReportUncheckedUpdateManyWithoutSubmittedToNestedInput
    respondedReports?: GeneralReportUncheckedUpdateManyWithoutRespondedByNestedInput
    goalReports?: GoalReportUncheckedUpdateManyWithoutSubmittedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUpdateWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    supervisors?: UserUncheckedUpdateManyWithoutDepartmentSupervisorsNestedInput
    goals?: GoalUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutSupervisorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutDepartmentsNestedInput
    supervisor?: UserUpdateOneWithoutSupervisedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    goals?: GoalUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    goals?: GoalUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutSupervisorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    supervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutLibrariesNestedInput
    members?: LibraryMemberUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: LibraryMemberUncheckedUpdateManyWithoutLibraryNestedInput
  }

  export type LibraryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    library?: LibraryUpdateOneRequiredWithoutMembersNestedInput
  }

  export type LibraryMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    libraryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    libraryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type GoalAssignmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sucursal?: SucursalUpdateOneRequiredWithoutScansNestedInput
  }

  export type ScanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    images?: StringFieldUpdateOperationsInput | string
    pdfUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutGoalsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGoalsNestedInput
    assignments?: GoalAssignmentUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: GoalAssignmentUncheckedUpdateManyWithoutGoalNestedInput
    reports?: GoalReportUncheckedUpdateManyWithoutGoalNestedInput
    generalReports?: ReportUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    departmentId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedTo?: UserUpdateOneWithoutReceivedReportsNestedInput
    respondedBy?: UserUpdateOneWithoutRespondedReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput
    attachments?: GeneralReportFileUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateManyWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportUpdateWithoutSubmittedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
    respondedBy?: UserUpdateOneWithoutRespondedReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput
    attachments?: GeneralReportFileUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateWithoutSubmittedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateManyWithoutSubmittedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    respondedById?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralReportUpdateWithoutRespondedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
    submittedTo?: UserUpdateOneWithoutReceivedReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutGeneralReportsNestedInput
    attachments?: GeneralReportFileUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateWithoutRespondedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GeneralReportFileUncheckedUpdateManyWithoutGeneralReportNestedInput
  }

  export type GeneralReportUncheckedUpdateManyWithoutRespondedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    submittedToId?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutReportsNestedInput
    files?: GoalReportFileUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportUncheckedUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: GoalReportFileUncheckedUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportUncheckedUpdateManyWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneWithoutGeneralReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutReportsNestedInput
    files?: ReportFileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: ReportFileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    goalId?: NullableStringFieldUpdateOperationsInput | string | null
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderCreateManyParentInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyFolderInput = {
    id?: string
    name: string
    originalName?: string | null
    description?: string | null
    url: string
    size: number
    type: string
    mimeType?: string | null
    isPublic?: boolean
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFoldersNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFilesNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutFilesNestedInput
    reports?: ReportFileUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportFileUncheckedUpdateManyWithoutFileNestedInput
    generalReports?: GeneralReportFileUncheckedUpdateManyWithoutFileNestedInput
    goalReports?: GoalReportFileUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileCreateManyFileInput = {
    id?: string
    reportId: string
  }

  export type GeneralReportFileCreateManyFileInput = {
    id?: string
    generalReportId: string
  }

  export type GoalReportFileCreateManyFileInput = {
    id?: string
    goalReportId: string
  }

  export type ReportFileUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    report?: ReportUpdateOneRequiredWithoutFilesNestedInput
  }

  export type ReportFileUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReport?: GeneralReportUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type GeneralReportFileUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReportId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    generalReportId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalReportFileUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReport?: GoalReportUpdateOneRequiredWithoutFilesNestedInput
  }

  export type GoalReportFileUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReportId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalReportFileUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalReportId?: StringFieldUpdateOperationsInput | string
  }

  export type LibraryMemberCreateManyLibraryInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LibraryMemberUpdateWithoutLibraryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLibraryMembersNestedInput
  }

  export type LibraryMemberUncheckedUpdateWithoutLibraryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryMemberUncheckedUpdateManyWithoutLibraryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentCreateManyGoalInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type GoalReportCreateManyGoalInput = {
    id?: string
    title: string
    description: string
    submittedById: string
    isCompletion?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyGoalInput = {
    id?: string
    title: string
    description?: string | null
    userId: string
    sucursalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalAssignmentUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalAssignmentUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalAssignmentUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedBy?: UserUpdateOneRequiredWithoutGoalReportsNestedInput
    files?: GoalReportFileUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: GoalReportFileUncheckedUpdateManyWithoutGoalReportNestedInput
  }

  export type GoalReportUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedById?: StringFieldUpdateOperationsInput | string
    isCompletion?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    sucursal?: SucursalUpdateOneRequiredWithoutReportsNestedInput
    files?: ReportFileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: ReportFileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    sucursalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalReportFileCreateManyGoalReportInput = {
    id?: string
    fileId: string
  }

  export type GoalReportFileUpdateWithoutGoalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    file?: FileUpdateOneRequiredWithoutGoalReportsNestedInput
  }

  export type GoalReportFileUncheckedUpdateWithoutGoalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalReportFileUncheckedUpdateManyWithoutGoalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileCreateManyReportInput = {
    id?: string
    fileId: string
  }

  export type ReportFileUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    file?: FileUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportFileUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportFileUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileCreateManyGeneralReportInput = {
    id?: string
    fileId: string
  }

  export type GeneralReportFileUpdateWithoutGeneralReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    file?: FileUpdateOneRequiredWithoutGeneralReportsNestedInput
  }

  export type GeneralReportFileUncheckedUpdateWithoutGeneralReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralReportFileUncheckedUpdateManyWithoutGeneralReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SucursalCountOutputTypeDefaultArgs instead
     */
    export type SucursalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SucursalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FolderCountOutputTypeDefaultArgs instead
     */
    export type FolderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FolderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileCountOutputTypeDefaultArgs instead
     */
    export type FileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LibraryCountOutputTypeDefaultArgs instead
     */
    export type LibraryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LibraryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalCountOutputTypeDefaultArgs instead
     */
    export type GoalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalReportCountOutputTypeDefaultArgs instead
     */
    export type GoalReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCountOutputTypeDefaultArgs instead
     */
    export type ReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneralReportCountOutputTypeDefaultArgs instead
     */
    export type GeneralReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneralReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SucursalDefaultArgs instead
     */
    export type SucursalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SucursalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SucursalConnectionDefaultArgs instead
     */
    export type SucursalConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SucursalConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FolderDefaultArgs instead
     */
    export type FolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FolderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileDefaultArgs instead
     */
    export type FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LibraryDefaultArgs instead
     */
    export type LibraryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LibraryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LibraryMemberDefaultArgs instead
     */
    export type LibraryMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LibraryMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalDefaultArgs instead
     */
    export type GoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalReportDefaultArgs instead
     */
    export type GoalReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalReportFileDefaultArgs instead
     */
    export type GoalReportFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalReportFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalAssignmentDefaultArgs instead
     */
    export type GoalAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneralReportDefaultArgs instead
     */
    export type GeneralReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneralReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneralReportFileDefaultArgs instead
     */
    export type GeneralReportFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneralReportFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportFileDefaultArgs instead
     */
    export type ReportFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScanDefaultArgs instead
     */
    export type ScanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ErrorLogDefaultArgs instead
     */
    export type ErrorLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ErrorLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}